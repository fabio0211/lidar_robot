
embedded_project.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000ac18  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00015f8c  0800ade8  0800ade8  0001ade8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08020d74  08020d74  000400ac  2**0
                  CONTENTS
  4 .ARM          00000008  08020d74  08020d74  00030d74  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08020d7c  08020d7c  000400ac  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08020d7c  08020d7c  00030d7c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08020d80  08020d80  00030d80  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000ac  20000000  08020d84  00040000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00002abc  200000ac  08020e30  000400ac  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20002b68  08020e30  00042b68  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000400ac  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  000400dc  2**0
                  CONTENTS, READONLY
 13 .debug_info   000173a4  00000000  00000000  0004011f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003bb1  00000000  00000000  000574c3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000014f8  00000000  00000000  0005b078  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00001053  00000000  00000000  0005c570  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00024ba8  00000000  00000000  0005d5c3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001bf4d  00000000  00000000  0008216b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d96a1  00000000  00000000  0009e0b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00005fd8  00000000  00000000  0017775c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006c  00000000  00000000  0017d734  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	200000ac 	.word	0x200000ac
 80001ec:	00000000 	.word	0x00000000
 80001f0:	0800add0 	.word	0x0800add0

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	200000b0 	.word	0x200000b0
 800020c:	0800add0 	.word	0x0800add0

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_drsub>:
 80002b0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002b4:	e002      	b.n	80002bc <__adddf3>
 80002b6:	bf00      	nop

080002b8 <__aeabi_dsub>:
 80002b8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002bc <__adddf3>:
 80002bc:	b530      	push	{r4, r5, lr}
 80002be:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002c2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002c6:	ea94 0f05 	teq	r4, r5
 80002ca:	bf08      	it	eq
 80002cc:	ea90 0f02 	teqeq	r0, r2
 80002d0:	bf1f      	itttt	ne
 80002d2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002d6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002da:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002de:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002e2:	f000 80e2 	beq.w	80004aa <__adddf3+0x1ee>
 80002e6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ea:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ee:	bfb8      	it	lt
 80002f0:	426d      	neglt	r5, r5
 80002f2:	dd0c      	ble.n	800030e <__adddf3+0x52>
 80002f4:	442c      	add	r4, r5
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	ea82 0000 	eor.w	r0, r2, r0
 8000302:	ea83 0101 	eor.w	r1, r3, r1
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	2d36      	cmp	r5, #54	; 0x36
 8000310:	bf88      	it	hi
 8000312:	bd30      	pophi	{r4, r5, pc}
 8000314:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000318:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800031c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000320:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000324:	d002      	beq.n	800032c <__adddf3+0x70>
 8000326:	4240      	negs	r0, r0
 8000328:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800032c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000330:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000334:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000338:	d002      	beq.n	8000340 <__adddf3+0x84>
 800033a:	4252      	negs	r2, r2
 800033c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000340:	ea94 0f05 	teq	r4, r5
 8000344:	f000 80a7 	beq.w	8000496 <__adddf3+0x1da>
 8000348:	f1a4 0401 	sub.w	r4, r4, #1
 800034c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000350:	db0d      	blt.n	800036e <__adddf3+0xb2>
 8000352:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000356:	fa22 f205 	lsr.w	r2, r2, r5
 800035a:	1880      	adds	r0, r0, r2
 800035c:	f141 0100 	adc.w	r1, r1, #0
 8000360:	fa03 f20e 	lsl.w	r2, r3, lr
 8000364:	1880      	adds	r0, r0, r2
 8000366:	fa43 f305 	asr.w	r3, r3, r5
 800036a:	4159      	adcs	r1, r3
 800036c:	e00e      	b.n	800038c <__adddf3+0xd0>
 800036e:	f1a5 0520 	sub.w	r5, r5, #32
 8000372:	f10e 0e20 	add.w	lr, lr, #32
 8000376:	2a01      	cmp	r2, #1
 8000378:	fa03 fc0e 	lsl.w	ip, r3, lr
 800037c:	bf28      	it	cs
 800037e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000382:	fa43 f305 	asr.w	r3, r3, r5
 8000386:	18c0      	adds	r0, r0, r3
 8000388:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800038c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000390:	d507      	bpl.n	80003a2 <__adddf3+0xe6>
 8000392:	f04f 0e00 	mov.w	lr, #0
 8000396:	f1dc 0c00 	rsbs	ip, ip, #0
 800039a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800039e:	eb6e 0101 	sbc.w	r1, lr, r1
 80003a2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003a6:	d31b      	bcc.n	80003e0 <__adddf3+0x124>
 80003a8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003ac:	d30c      	bcc.n	80003c8 <__adddf3+0x10c>
 80003ae:	0849      	lsrs	r1, r1, #1
 80003b0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003b4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003b8:	f104 0401 	add.w	r4, r4, #1
 80003bc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003c0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003c4:	f080 809a 	bcs.w	80004fc <__adddf3+0x240>
 80003c8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003cc:	bf08      	it	eq
 80003ce:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003d2:	f150 0000 	adcs.w	r0, r0, #0
 80003d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003da:	ea41 0105 	orr.w	r1, r1, r5
 80003de:	bd30      	pop	{r4, r5, pc}
 80003e0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003e4:	4140      	adcs	r0, r0
 80003e6:	eb41 0101 	adc.w	r1, r1, r1
 80003ea:	3c01      	subs	r4, #1
 80003ec:	bf28      	it	cs
 80003ee:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003f2:	d2e9      	bcs.n	80003c8 <__adddf3+0x10c>
 80003f4:	f091 0f00 	teq	r1, #0
 80003f8:	bf04      	itt	eq
 80003fa:	4601      	moveq	r1, r0
 80003fc:	2000      	moveq	r0, #0
 80003fe:	fab1 f381 	clz	r3, r1
 8000402:	bf08      	it	eq
 8000404:	3320      	addeq	r3, #32
 8000406:	f1a3 030b 	sub.w	r3, r3, #11
 800040a:	f1b3 0220 	subs.w	r2, r3, #32
 800040e:	da0c      	bge.n	800042a <__adddf3+0x16e>
 8000410:	320c      	adds	r2, #12
 8000412:	dd08      	ble.n	8000426 <__adddf3+0x16a>
 8000414:	f102 0c14 	add.w	ip, r2, #20
 8000418:	f1c2 020c 	rsb	r2, r2, #12
 800041c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000420:	fa21 f102 	lsr.w	r1, r1, r2
 8000424:	e00c      	b.n	8000440 <__adddf3+0x184>
 8000426:	f102 0214 	add.w	r2, r2, #20
 800042a:	bfd8      	it	le
 800042c:	f1c2 0c20 	rsble	ip, r2, #32
 8000430:	fa01 f102 	lsl.w	r1, r1, r2
 8000434:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000438:	bfdc      	itt	le
 800043a:	ea41 010c 	orrle.w	r1, r1, ip
 800043e:	4090      	lslle	r0, r2
 8000440:	1ae4      	subs	r4, r4, r3
 8000442:	bfa2      	ittt	ge
 8000444:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000448:	4329      	orrge	r1, r5
 800044a:	bd30      	popge	{r4, r5, pc}
 800044c:	ea6f 0404 	mvn.w	r4, r4
 8000450:	3c1f      	subs	r4, #31
 8000452:	da1c      	bge.n	800048e <__adddf3+0x1d2>
 8000454:	340c      	adds	r4, #12
 8000456:	dc0e      	bgt.n	8000476 <__adddf3+0x1ba>
 8000458:	f104 0414 	add.w	r4, r4, #20
 800045c:	f1c4 0220 	rsb	r2, r4, #32
 8000460:	fa20 f004 	lsr.w	r0, r0, r4
 8000464:	fa01 f302 	lsl.w	r3, r1, r2
 8000468:	ea40 0003 	orr.w	r0, r0, r3
 800046c:	fa21 f304 	lsr.w	r3, r1, r4
 8000470:	ea45 0103 	orr.w	r1, r5, r3
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f1c4 040c 	rsb	r4, r4, #12
 800047a:	f1c4 0220 	rsb	r2, r4, #32
 800047e:	fa20 f002 	lsr.w	r0, r0, r2
 8000482:	fa01 f304 	lsl.w	r3, r1, r4
 8000486:	ea40 0003 	orr.w	r0, r0, r3
 800048a:	4629      	mov	r1, r5
 800048c:	bd30      	pop	{r4, r5, pc}
 800048e:	fa21 f004 	lsr.w	r0, r1, r4
 8000492:	4629      	mov	r1, r5
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f094 0f00 	teq	r4, #0
 800049a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800049e:	bf06      	itte	eq
 80004a0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004a4:	3401      	addeq	r4, #1
 80004a6:	3d01      	subne	r5, #1
 80004a8:	e74e      	b.n	8000348 <__adddf3+0x8c>
 80004aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ae:	bf18      	it	ne
 80004b0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004b4:	d029      	beq.n	800050a <__adddf3+0x24e>
 80004b6:	ea94 0f05 	teq	r4, r5
 80004ba:	bf08      	it	eq
 80004bc:	ea90 0f02 	teqeq	r0, r2
 80004c0:	d005      	beq.n	80004ce <__adddf3+0x212>
 80004c2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004c6:	bf04      	itt	eq
 80004c8:	4619      	moveq	r1, r3
 80004ca:	4610      	moveq	r0, r2
 80004cc:	bd30      	pop	{r4, r5, pc}
 80004ce:	ea91 0f03 	teq	r1, r3
 80004d2:	bf1e      	ittt	ne
 80004d4:	2100      	movne	r1, #0
 80004d6:	2000      	movne	r0, #0
 80004d8:	bd30      	popne	{r4, r5, pc}
 80004da:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004de:	d105      	bne.n	80004ec <__adddf3+0x230>
 80004e0:	0040      	lsls	r0, r0, #1
 80004e2:	4149      	adcs	r1, r1
 80004e4:	bf28      	it	cs
 80004e6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ea:	bd30      	pop	{r4, r5, pc}
 80004ec:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004f0:	bf3c      	itt	cc
 80004f2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004f6:	bd30      	popcc	{r4, r5, pc}
 80004f8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004fc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000500:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000504:	f04f 0000 	mov.w	r0, #0
 8000508:	bd30      	pop	{r4, r5, pc}
 800050a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800050e:	bf1a      	itte	ne
 8000510:	4619      	movne	r1, r3
 8000512:	4610      	movne	r0, r2
 8000514:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000518:	bf1c      	itt	ne
 800051a:	460b      	movne	r3, r1
 800051c:	4602      	movne	r2, r0
 800051e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000522:	bf06      	itte	eq
 8000524:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000528:	ea91 0f03 	teqeq	r1, r3
 800052c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000530:	bd30      	pop	{r4, r5, pc}
 8000532:	bf00      	nop

08000534 <__aeabi_ui2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f04f 0500 	mov.w	r5, #0
 800054c:	f04f 0100 	mov.w	r1, #0
 8000550:	e750      	b.n	80003f4 <__adddf3+0x138>
 8000552:	bf00      	nop

08000554 <__aeabi_i2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000568:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800056c:	bf48      	it	mi
 800056e:	4240      	negmi	r0, r0
 8000570:	f04f 0100 	mov.w	r1, #0
 8000574:	e73e      	b.n	80003f4 <__adddf3+0x138>
 8000576:	bf00      	nop

08000578 <__aeabi_f2d>:
 8000578:	0042      	lsls	r2, r0, #1
 800057a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800057e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000582:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000586:	bf1f      	itttt	ne
 8000588:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800058c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000590:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000594:	4770      	bxne	lr
 8000596:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800059a:	bf08      	it	eq
 800059c:	4770      	bxeq	lr
 800059e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005a2:	bf04      	itt	eq
 80005a4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005a8:	4770      	bxeq	lr
 80005aa:	b530      	push	{r4, r5, lr}
 80005ac:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005b0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005b4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005b8:	e71c      	b.n	80003f4 <__adddf3+0x138>
 80005ba:	bf00      	nop

080005bc <__aeabi_ul2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f04f 0500 	mov.w	r5, #0
 80005ca:	e00a      	b.n	80005e2 <__aeabi_l2d+0x16>

080005cc <__aeabi_l2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005da:	d502      	bpl.n	80005e2 <__aeabi_l2d+0x16>
 80005dc:	4240      	negs	r0, r0
 80005de:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005e2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005e6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ea:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ee:	f43f aed8 	beq.w	80003a2 <__adddf3+0xe6>
 80005f2:	f04f 0203 	mov.w	r2, #3
 80005f6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005fa:	bf18      	it	ne
 80005fc:	3203      	addne	r2, #3
 80005fe:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000602:	bf18      	it	ne
 8000604:	3203      	addne	r2, #3
 8000606:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800060a:	f1c2 0320 	rsb	r3, r2, #32
 800060e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000612:	fa20 f002 	lsr.w	r0, r0, r2
 8000616:	fa01 fe03 	lsl.w	lr, r1, r3
 800061a:	ea40 000e 	orr.w	r0, r0, lr
 800061e:	fa21 f102 	lsr.w	r1, r1, r2
 8000622:	4414      	add	r4, r2
 8000624:	e6bd      	b.n	80003a2 <__adddf3+0xe6>
 8000626:	bf00      	nop

08000628 <__aeabi_dmul>:
 8000628:	b570      	push	{r4, r5, r6, lr}
 800062a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800062e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000632:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000636:	bf1d      	ittte	ne
 8000638:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800063c:	ea94 0f0c 	teqne	r4, ip
 8000640:	ea95 0f0c 	teqne	r5, ip
 8000644:	f000 f8de 	bleq	8000804 <__aeabi_dmul+0x1dc>
 8000648:	442c      	add	r4, r5
 800064a:	ea81 0603 	eor.w	r6, r1, r3
 800064e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000652:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000656:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800065a:	bf18      	it	ne
 800065c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000660:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000664:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000668:	d038      	beq.n	80006dc <__aeabi_dmul+0xb4>
 800066a:	fba0 ce02 	umull	ip, lr, r0, r2
 800066e:	f04f 0500 	mov.w	r5, #0
 8000672:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000676:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800067a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800067e:	f04f 0600 	mov.w	r6, #0
 8000682:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000686:	f09c 0f00 	teq	ip, #0
 800068a:	bf18      	it	ne
 800068c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000690:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000694:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000698:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800069c:	d204      	bcs.n	80006a8 <__aeabi_dmul+0x80>
 800069e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006a2:	416d      	adcs	r5, r5
 80006a4:	eb46 0606 	adc.w	r6, r6, r6
 80006a8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006ac:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006b0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006b4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006b8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006bc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006c0:	bf88      	it	hi
 80006c2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006c6:	d81e      	bhi.n	8000706 <__aeabi_dmul+0xde>
 80006c8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006cc:	bf08      	it	eq
 80006ce:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006d2:	f150 0000 	adcs.w	r0, r0, #0
 80006d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006e0:	ea46 0101 	orr.w	r1, r6, r1
 80006e4:	ea40 0002 	orr.w	r0, r0, r2
 80006e8:	ea81 0103 	eor.w	r1, r1, r3
 80006ec:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006f0:	bfc2      	ittt	gt
 80006f2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006f6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006fa:	bd70      	popgt	{r4, r5, r6, pc}
 80006fc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000700:	f04f 0e00 	mov.w	lr, #0
 8000704:	3c01      	subs	r4, #1
 8000706:	f300 80ab 	bgt.w	8000860 <__aeabi_dmul+0x238>
 800070a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800070e:	bfde      	ittt	le
 8000710:	2000      	movle	r0, #0
 8000712:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000716:	bd70      	pople	{r4, r5, r6, pc}
 8000718:	f1c4 0400 	rsb	r4, r4, #0
 800071c:	3c20      	subs	r4, #32
 800071e:	da35      	bge.n	800078c <__aeabi_dmul+0x164>
 8000720:	340c      	adds	r4, #12
 8000722:	dc1b      	bgt.n	800075c <__aeabi_dmul+0x134>
 8000724:	f104 0414 	add.w	r4, r4, #20
 8000728:	f1c4 0520 	rsb	r5, r4, #32
 800072c:	fa00 f305 	lsl.w	r3, r0, r5
 8000730:	fa20 f004 	lsr.w	r0, r0, r4
 8000734:	fa01 f205 	lsl.w	r2, r1, r5
 8000738:	ea40 0002 	orr.w	r0, r0, r2
 800073c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000740:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000744:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000748:	fa21 f604 	lsr.w	r6, r1, r4
 800074c:	eb42 0106 	adc.w	r1, r2, r6
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 040c 	rsb	r4, r4, #12
 8000760:	f1c4 0520 	rsb	r5, r4, #32
 8000764:	fa00 f304 	lsl.w	r3, r0, r4
 8000768:	fa20 f005 	lsr.w	r0, r0, r5
 800076c:	fa01 f204 	lsl.w	r2, r1, r4
 8000770:	ea40 0002 	orr.w	r0, r0, r2
 8000774:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000778:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800077c:	f141 0100 	adc.w	r1, r1, #0
 8000780:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000784:	bf08      	it	eq
 8000786:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800078a:	bd70      	pop	{r4, r5, r6, pc}
 800078c:	f1c4 0520 	rsb	r5, r4, #32
 8000790:	fa00 f205 	lsl.w	r2, r0, r5
 8000794:	ea4e 0e02 	orr.w	lr, lr, r2
 8000798:	fa20 f304 	lsr.w	r3, r0, r4
 800079c:	fa01 f205 	lsl.w	r2, r1, r5
 80007a0:	ea43 0302 	orr.w	r3, r3, r2
 80007a4:	fa21 f004 	lsr.w	r0, r1, r4
 80007a8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007ac:	fa21 f204 	lsr.w	r2, r1, r4
 80007b0:	ea20 0002 	bic.w	r0, r0, r2
 80007b4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007bc:	bf08      	it	eq
 80007be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007c2:	bd70      	pop	{r4, r5, r6, pc}
 80007c4:	f094 0f00 	teq	r4, #0
 80007c8:	d10f      	bne.n	80007ea <__aeabi_dmul+0x1c2>
 80007ca:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ce:	0040      	lsls	r0, r0, #1
 80007d0:	eb41 0101 	adc.w	r1, r1, r1
 80007d4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3c01      	subeq	r4, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1a6>
 80007de:	ea41 0106 	orr.w	r1, r1, r6
 80007e2:	f095 0f00 	teq	r5, #0
 80007e6:	bf18      	it	ne
 80007e8:	4770      	bxne	lr
 80007ea:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ee:	0052      	lsls	r2, r2, #1
 80007f0:	eb43 0303 	adc.w	r3, r3, r3
 80007f4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007f8:	bf08      	it	eq
 80007fa:	3d01      	subeq	r5, #1
 80007fc:	d0f7      	beq.n	80007ee <__aeabi_dmul+0x1c6>
 80007fe:	ea43 0306 	orr.w	r3, r3, r6
 8000802:	4770      	bx	lr
 8000804:	ea94 0f0c 	teq	r4, ip
 8000808:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800080c:	bf18      	it	ne
 800080e:	ea95 0f0c 	teqne	r5, ip
 8000812:	d00c      	beq.n	800082e <__aeabi_dmul+0x206>
 8000814:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000818:	bf18      	it	ne
 800081a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081e:	d1d1      	bne.n	80007c4 <__aeabi_dmul+0x19c>
 8000820:	ea81 0103 	eor.w	r1, r1, r3
 8000824:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000828:	f04f 0000 	mov.w	r0, #0
 800082c:	bd70      	pop	{r4, r5, r6, pc}
 800082e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000832:	bf06      	itte	eq
 8000834:	4610      	moveq	r0, r2
 8000836:	4619      	moveq	r1, r3
 8000838:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800083c:	d019      	beq.n	8000872 <__aeabi_dmul+0x24a>
 800083e:	ea94 0f0c 	teq	r4, ip
 8000842:	d102      	bne.n	800084a <__aeabi_dmul+0x222>
 8000844:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000848:	d113      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800084a:	ea95 0f0c 	teq	r5, ip
 800084e:	d105      	bne.n	800085c <__aeabi_dmul+0x234>
 8000850:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000854:	bf1c      	itt	ne
 8000856:	4610      	movne	r0, r2
 8000858:	4619      	movne	r1, r3
 800085a:	d10a      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800085c:	ea81 0103 	eor.w	r1, r1, r3
 8000860:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000864:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000868:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800086c:	f04f 0000 	mov.w	r0, #0
 8000870:	bd70      	pop	{r4, r5, r6, pc}
 8000872:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000876:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800087a:	bd70      	pop	{r4, r5, r6, pc}

0800087c <__aeabi_ddiv>:
 800087c:	b570      	push	{r4, r5, r6, lr}
 800087e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000882:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000886:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800088a:	bf1d      	ittte	ne
 800088c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000890:	ea94 0f0c 	teqne	r4, ip
 8000894:	ea95 0f0c 	teqne	r5, ip
 8000898:	f000 f8a7 	bleq	80009ea <__aeabi_ddiv+0x16e>
 800089c:	eba4 0405 	sub.w	r4, r4, r5
 80008a0:	ea81 0e03 	eor.w	lr, r1, r3
 80008a4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008a8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008ac:	f000 8088 	beq.w	80009c0 <__aeabi_ddiv+0x144>
 80008b0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008b4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008b8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008bc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008c0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008c4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008c8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008cc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008d0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008d4:	429d      	cmp	r5, r3
 80008d6:	bf08      	it	eq
 80008d8:	4296      	cmpeq	r6, r2
 80008da:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008de:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008e2:	d202      	bcs.n	80008ea <__aeabi_ddiv+0x6e>
 80008e4:	085b      	lsrs	r3, r3, #1
 80008e6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ea:	1ab6      	subs	r6, r6, r2
 80008ec:	eb65 0503 	sbc.w	r5, r5, r3
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008fa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000928:	085b      	lsrs	r3, r3, #1
 800092a:	ea4f 0232 	mov.w	r2, r2, rrx
 800092e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000932:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000936:	bf22      	ittt	cs
 8000938:	1ab6      	subcs	r6, r6, r2
 800093a:	4675      	movcs	r5, lr
 800093c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000940:	085b      	lsrs	r3, r3, #1
 8000942:	ea4f 0232 	mov.w	r2, r2, rrx
 8000946:	ebb6 0e02 	subs.w	lr, r6, r2
 800094a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800094e:	bf22      	ittt	cs
 8000950:	1ab6      	subcs	r6, r6, r2
 8000952:	4675      	movcs	r5, lr
 8000954:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000958:	ea55 0e06 	orrs.w	lr, r5, r6
 800095c:	d018      	beq.n	8000990 <__aeabi_ddiv+0x114>
 800095e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000962:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000966:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800096a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800096e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000972:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000976:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800097a:	d1c0      	bne.n	80008fe <__aeabi_ddiv+0x82>
 800097c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000980:	d10b      	bne.n	800099a <__aeabi_ddiv+0x11e>
 8000982:	ea41 0100 	orr.w	r1, r1, r0
 8000986:	f04f 0000 	mov.w	r0, #0
 800098a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800098e:	e7b6      	b.n	80008fe <__aeabi_ddiv+0x82>
 8000990:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000994:	bf04      	itt	eq
 8000996:	4301      	orreq	r1, r0
 8000998:	2000      	moveq	r0, #0
 800099a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800099e:	bf88      	it	hi
 80009a0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009a4:	f63f aeaf 	bhi.w	8000706 <__aeabi_dmul+0xde>
 80009a8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009ac:	bf04      	itt	eq
 80009ae:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009b2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009b6:	f150 0000 	adcs.w	r0, r0, #0
 80009ba:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009be:	bd70      	pop	{r4, r5, r6, pc}
 80009c0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009c4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009c8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009cc:	bfc2      	ittt	gt
 80009ce:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009d2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009d6:	bd70      	popgt	{r4, r5, r6, pc}
 80009d8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009dc:	f04f 0e00 	mov.w	lr, #0
 80009e0:	3c01      	subs	r4, #1
 80009e2:	e690      	b.n	8000706 <__aeabi_dmul+0xde>
 80009e4:	ea45 0e06 	orr.w	lr, r5, r6
 80009e8:	e68d      	b.n	8000706 <__aeabi_dmul+0xde>
 80009ea:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ee:	ea94 0f0c 	teq	r4, ip
 80009f2:	bf08      	it	eq
 80009f4:	ea95 0f0c 	teqeq	r5, ip
 80009f8:	f43f af3b 	beq.w	8000872 <__aeabi_dmul+0x24a>
 80009fc:	ea94 0f0c 	teq	r4, ip
 8000a00:	d10a      	bne.n	8000a18 <__aeabi_ddiv+0x19c>
 8000a02:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a06:	f47f af34 	bne.w	8000872 <__aeabi_dmul+0x24a>
 8000a0a:	ea95 0f0c 	teq	r5, ip
 8000a0e:	f47f af25 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a12:	4610      	mov	r0, r2
 8000a14:	4619      	mov	r1, r3
 8000a16:	e72c      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a18:	ea95 0f0c 	teq	r5, ip
 8000a1c:	d106      	bne.n	8000a2c <__aeabi_ddiv+0x1b0>
 8000a1e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a22:	f43f aefd 	beq.w	8000820 <__aeabi_dmul+0x1f8>
 8000a26:	4610      	mov	r0, r2
 8000a28:	4619      	mov	r1, r3
 8000a2a:	e722      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a2c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a30:	bf18      	it	ne
 8000a32:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a36:	f47f aec5 	bne.w	80007c4 <__aeabi_dmul+0x19c>
 8000a3a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a3e:	f47f af0d 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a42:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a46:	f47f aeeb 	bne.w	8000820 <__aeabi_dmul+0x1f8>
 8000a4a:	e712      	b.n	8000872 <__aeabi_dmul+0x24a>

08000a4c <__aeabi_d2iz>:
 8000a4c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a50:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a54:	d215      	bcs.n	8000a82 <__aeabi_d2iz+0x36>
 8000a56:	d511      	bpl.n	8000a7c <__aeabi_d2iz+0x30>
 8000a58:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a5c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a60:	d912      	bls.n	8000a88 <__aeabi_d2iz+0x3c>
 8000a62:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a66:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a6a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a6e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a72:	fa23 f002 	lsr.w	r0, r3, r2
 8000a76:	bf18      	it	ne
 8000a78:	4240      	negne	r0, r0
 8000a7a:	4770      	bx	lr
 8000a7c:	f04f 0000 	mov.w	r0, #0
 8000a80:	4770      	bx	lr
 8000a82:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a86:	d105      	bne.n	8000a94 <__aeabi_d2iz+0x48>
 8000a88:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000a8c:	bf08      	it	eq
 8000a8e:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000a92:	4770      	bx	lr
 8000a94:	f04f 0000 	mov.w	r0, #0
 8000a98:	4770      	bx	lr
 8000a9a:	bf00      	nop

08000a9c <__aeabi_d2uiz>:
 8000a9c:	004a      	lsls	r2, r1, #1
 8000a9e:	d211      	bcs.n	8000ac4 <__aeabi_d2uiz+0x28>
 8000aa0:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000aa4:	d211      	bcs.n	8000aca <__aeabi_d2uiz+0x2e>
 8000aa6:	d50d      	bpl.n	8000ac4 <__aeabi_d2uiz+0x28>
 8000aa8:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000aac:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000ab0:	d40e      	bmi.n	8000ad0 <__aeabi_d2uiz+0x34>
 8000ab2:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ab6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000aba:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000abe:	fa23 f002 	lsr.w	r0, r3, r2
 8000ac2:	4770      	bx	lr
 8000ac4:	f04f 0000 	mov.w	r0, #0
 8000ac8:	4770      	bx	lr
 8000aca:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ace:	d102      	bne.n	8000ad6 <__aeabi_d2uiz+0x3a>
 8000ad0:	f04f 30ff 	mov.w	r0, #4294967295
 8000ad4:	4770      	bx	lr
 8000ad6:	f04f 0000 	mov.w	r0, #0
 8000ada:	4770      	bx	lr

08000adc <__aeabi_uldivmod>:
 8000adc:	b953      	cbnz	r3, 8000af4 <__aeabi_uldivmod+0x18>
 8000ade:	b94a      	cbnz	r2, 8000af4 <__aeabi_uldivmod+0x18>
 8000ae0:	2900      	cmp	r1, #0
 8000ae2:	bf08      	it	eq
 8000ae4:	2800      	cmpeq	r0, #0
 8000ae6:	bf1c      	itt	ne
 8000ae8:	f04f 31ff 	movne.w	r1, #4294967295
 8000aec:	f04f 30ff 	movne.w	r0, #4294967295
 8000af0:	f000 b970 	b.w	8000dd4 <__aeabi_idiv0>
 8000af4:	f1ad 0c08 	sub.w	ip, sp, #8
 8000af8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000afc:	f000 f806 	bl	8000b0c <__udivmoddi4>
 8000b00:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000b04:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000b08:	b004      	add	sp, #16
 8000b0a:	4770      	bx	lr

08000b0c <__udivmoddi4>:
 8000b0c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000b10:	9e08      	ldr	r6, [sp, #32]
 8000b12:	460d      	mov	r5, r1
 8000b14:	4604      	mov	r4, r0
 8000b16:	460f      	mov	r7, r1
 8000b18:	2b00      	cmp	r3, #0
 8000b1a:	d14a      	bne.n	8000bb2 <__udivmoddi4+0xa6>
 8000b1c:	428a      	cmp	r2, r1
 8000b1e:	4694      	mov	ip, r2
 8000b20:	d965      	bls.n	8000bee <__udivmoddi4+0xe2>
 8000b22:	fab2 f382 	clz	r3, r2
 8000b26:	b143      	cbz	r3, 8000b3a <__udivmoddi4+0x2e>
 8000b28:	fa02 fc03 	lsl.w	ip, r2, r3
 8000b2c:	f1c3 0220 	rsb	r2, r3, #32
 8000b30:	409f      	lsls	r7, r3
 8000b32:	fa20 f202 	lsr.w	r2, r0, r2
 8000b36:	4317      	orrs	r7, r2
 8000b38:	409c      	lsls	r4, r3
 8000b3a:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000b3e:	fa1f f58c 	uxth.w	r5, ip
 8000b42:	fbb7 f1fe 	udiv	r1, r7, lr
 8000b46:	0c22      	lsrs	r2, r4, #16
 8000b48:	fb0e 7711 	mls	r7, lr, r1, r7
 8000b4c:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000b50:	fb01 f005 	mul.w	r0, r1, r5
 8000b54:	4290      	cmp	r0, r2
 8000b56:	d90a      	bls.n	8000b6e <__udivmoddi4+0x62>
 8000b58:	eb1c 0202 	adds.w	r2, ip, r2
 8000b5c:	f101 37ff 	add.w	r7, r1, #4294967295
 8000b60:	f080 811c 	bcs.w	8000d9c <__udivmoddi4+0x290>
 8000b64:	4290      	cmp	r0, r2
 8000b66:	f240 8119 	bls.w	8000d9c <__udivmoddi4+0x290>
 8000b6a:	3902      	subs	r1, #2
 8000b6c:	4462      	add	r2, ip
 8000b6e:	1a12      	subs	r2, r2, r0
 8000b70:	b2a4      	uxth	r4, r4
 8000b72:	fbb2 f0fe 	udiv	r0, r2, lr
 8000b76:	fb0e 2210 	mls	r2, lr, r0, r2
 8000b7a:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000b7e:	fb00 f505 	mul.w	r5, r0, r5
 8000b82:	42a5      	cmp	r5, r4
 8000b84:	d90a      	bls.n	8000b9c <__udivmoddi4+0x90>
 8000b86:	eb1c 0404 	adds.w	r4, ip, r4
 8000b8a:	f100 32ff 	add.w	r2, r0, #4294967295
 8000b8e:	f080 8107 	bcs.w	8000da0 <__udivmoddi4+0x294>
 8000b92:	42a5      	cmp	r5, r4
 8000b94:	f240 8104 	bls.w	8000da0 <__udivmoddi4+0x294>
 8000b98:	4464      	add	r4, ip
 8000b9a:	3802      	subs	r0, #2
 8000b9c:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000ba0:	1b64      	subs	r4, r4, r5
 8000ba2:	2100      	movs	r1, #0
 8000ba4:	b11e      	cbz	r6, 8000bae <__udivmoddi4+0xa2>
 8000ba6:	40dc      	lsrs	r4, r3
 8000ba8:	2300      	movs	r3, #0
 8000baa:	e9c6 4300 	strd	r4, r3, [r6]
 8000bae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000bb2:	428b      	cmp	r3, r1
 8000bb4:	d908      	bls.n	8000bc8 <__udivmoddi4+0xbc>
 8000bb6:	2e00      	cmp	r6, #0
 8000bb8:	f000 80ed 	beq.w	8000d96 <__udivmoddi4+0x28a>
 8000bbc:	2100      	movs	r1, #0
 8000bbe:	e9c6 0500 	strd	r0, r5, [r6]
 8000bc2:	4608      	mov	r0, r1
 8000bc4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000bc8:	fab3 f183 	clz	r1, r3
 8000bcc:	2900      	cmp	r1, #0
 8000bce:	d149      	bne.n	8000c64 <__udivmoddi4+0x158>
 8000bd0:	42ab      	cmp	r3, r5
 8000bd2:	d302      	bcc.n	8000bda <__udivmoddi4+0xce>
 8000bd4:	4282      	cmp	r2, r0
 8000bd6:	f200 80f8 	bhi.w	8000dca <__udivmoddi4+0x2be>
 8000bda:	1a84      	subs	r4, r0, r2
 8000bdc:	eb65 0203 	sbc.w	r2, r5, r3
 8000be0:	2001      	movs	r0, #1
 8000be2:	4617      	mov	r7, r2
 8000be4:	2e00      	cmp	r6, #0
 8000be6:	d0e2      	beq.n	8000bae <__udivmoddi4+0xa2>
 8000be8:	e9c6 4700 	strd	r4, r7, [r6]
 8000bec:	e7df      	b.n	8000bae <__udivmoddi4+0xa2>
 8000bee:	b902      	cbnz	r2, 8000bf2 <__udivmoddi4+0xe6>
 8000bf0:	deff      	udf	#255	; 0xff
 8000bf2:	fab2 f382 	clz	r3, r2
 8000bf6:	2b00      	cmp	r3, #0
 8000bf8:	f040 8090 	bne.w	8000d1c <__udivmoddi4+0x210>
 8000bfc:	1a8a      	subs	r2, r1, r2
 8000bfe:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000c02:	fa1f fe8c 	uxth.w	lr, ip
 8000c06:	2101      	movs	r1, #1
 8000c08:	fbb2 f5f7 	udiv	r5, r2, r7
 8000c0c:	fb07 2015 	mls	r0, r7, r5, r2
 8000c10:	0c22      	lsrs	r2, r4, #16
 8000c12:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000c16:	fb0e f005 	mul.w	r0, lr, r5
 8000c1a:	4290      	cmp	r0, r2
 8000c1c:	d908      	bls.n	8000c30 <__udivmoddi4+0x124>
 8000c1e:	eb1c 0202 	adds.w	r2, ip, r2
 8000c22:	f105 38ff 	add.w	r8, r5, #4294967295
 8000c26:	d202      	bcs.n	8000c2e <__udivmoddi4+0x122>
 8000c28:	4290      	cmp	r0, r2
 8000c2a:	f200 80cb 	bhi.w	8000dc4 <__udivmoddi4+0x2b8>
 8000c2e:	4645      	mov	r5, r8
 8000c30:	1a12      	subs	r2, r2, r0
 8000c32:	b2a4      	uxth	r4, r4
 8000c34:	fbb2 f0f7 	udiv	r0, r2, r7
 8000c38:	fb07 2210 	mls	r2, r7, r0, r2
 8000c3c:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000c40:	fb0e fe00 	mul.w	lr, lr, r0
 8000c44:	45a6      	cmp	lr, r4
 8000c46:	d908      	bls.n	8000c5a <__udivmoddi4+0x14e>
 8000c48:	eb1c 0404 	adds.w	r4, ip, r4
 8000c4c:	f100 32ff 	add.w	r2, r0, #4294967295
 8000c50:	d202      	bcs.n	8000c58 <__udivmoddi4+0x14c>
 8000c52:	45a6      	cmp	lr, r4
 8000c54:	f200 80bb 	bhi.w	8000dce <__udivmoddi4+0x2c2>
 8000c58:	4610      	mov	r0, r2
 8000c5a:	eba4 040e 	sub.w	r4, r4, lr
 8000c5e:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000c62:	e79f      	b.n	8000ba4 <__udivmoddi4+0x98>
 8000c64:	f1c1 0720 	rsb	r7, r1, #32
 8000c68:	408b      	lsls	r3, r1
 8000c6a:	fa22 fc07 	lsr.w	ip, r2, r7
 8000c6e:	ea4c 0c03 	orr.w	ip, ip, r3
 8000c72:	fa05 f401 	lsl.w	r4, r5, r1
 8000c76:	fa20 f307 	lsr.w	r3, r0, r7
 8000c7a:	40fd      	lsrs	r5, r7
 8000c7c:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000c80:	4323      	orrs	r3, r4
 8000c82:	fbb5 f8f9 	udiv	r8, r5, r9
 8000c86:	fa1f fe8c 	uxth.w	lr, ip
 8000c8a:	fb09 5518 	mls	r5, r9, r8, r5
 8000c8e:	0c1c      	lsrs	r4, r3, #16
 8000c90:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000c94:	fb08 f50e 	mul.w	r5, r8, lr
 8000c98:	42a5      	cmp	r5, r4
 8000c9a:	fa02 f201 	lsl.w	r2, r2, r1
 8000c9e:	fa00 f001 	lsl.w	r0, r0, r1
 8000ca2:	d90b      	bls.n	8000cbc <__udivmoddi4+0x1b0>
 8000ca4:	eb1c 0404 	adds.w	r4, ip, r4
 8000ca8:	f108 3aff 	add.w	sl, r8, #4294967295
 8000cac:	f080 8088 	bcs.w	8000dc0 <__udivmoddi4+0x2b4>
 8000cb0:	42a5      	cmp	r5, r4
 8000cb2:	f240 8085 	bls.w	8000dc0 <__udivmoddi4+0x2b4>
 8000cb6:	f1a8 0802 	sub.w	r8, r8, #2
 8000cba:	4464      	add	r4, ip
 8000cbc:	1b64      	subs	r4, r4, r5
 8000cbe:	b29d      	uxth	r5, r3
 8000cc0:	fbb4 f3f9 	udiv	r3, r4, r9
 8000cc4:	fb09 4413 	mls	r4, r9, r3, r4
 8000cc8:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000ccc:	fb03 fe0e 	mul.w	lr, r3, lr
 8000cd0:	45a6      	cmp	lr, r4
 8000cd2:	d908      	bls.n	8000ce6 <__udivmoddi4+0x1da>
 8000cd4:	eb1c 0404 	adds.w	r4, ip, r4
 8000cd8:	f103 35ff 	add.w	r5, r3, #4294967295
 8000cdc:	d26c      	bcs.n	8000db8 <__udivmoddi4+0x2ac>
 8000cde:	45a6      	cmp	lr, r4
 8000ce0:	d96a      	bls.n	8000db8 <__udivmoddi4+0x2ac>
 8000ce2:	3b02      	subs	r3, #2
 8000ce4:	4464      	add	r4, ip
 8000ce6:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000cea:	fba3 9502 	umull	r9, r5, r3, r2
 8000cee:	eba4 040e 	sub.w	r4, r4, lr
 8000cf2:	42ac      	cmp	r4, r5
 8000cf4:	46c8      	mov	r8, r9
 8000cf6:	46ae      	mov	lr, r5
 8000cf8:	d356      	bcc.n	8000da8 <__udivmoddi4+0x29c>
 8000cfa:	d053      	beq.n	8000da4 <__udivmoddi4+0x298>
 8000cfc:	b156      	cbz	r6, 8000d14 <__udivmoddi4+0x208>
 8000cfe:	ebb0 0208 	subs.w	r2, r0, r8
 8000d02:	eb64 040e 	sbc.w	r4, r4, lr
 8000d06:	fa04 f707 	lsl.w	r7, r4, r7
 8000d0a:	40ca      	lsrs	r2, r1
 8000d0c:	40cc      	lsrs	r4, r1
 8000d0e:	4317      	orrs	r7, r2
 8000d10:	e9c6 7400 	strd	r7, r4, [r6]
 8000d14:	4618      	mov	r0, r3
 8000d16:	2100      	movs	r1, #0
 8000d18:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d1c:	f1c3 0120 	rsb	r1, r3, #32
 8000d20:	fa02 fc03 	lsl.w	ip, r2, r3
 8000d24:	fa20 f201 	lsr.w	r2, r0, r1
 8000d28:	fa25 f101 	lsr.w	r1, r5, r1
 8000d2c:	409d      	lsls	r5, r3
 8000d2e:	432a      	orrs	r2, r5
 8000d30:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d34:	fa1f fe8c 	uxth.w	lr, ip
 8000d38:	fbb1 f0f7 	udiv	r0, r1, r7
 8000d3c:	fb07 1510 	mls	r5, r7, r0, r1
 8000d40:	0c11      	lsrs	r1, r2, #16
 8000d42:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000d46:	fb00 f50e 	mul.w	r5, r0, lr
 8000d4a:	428d      	cmp	r5, r1
 8000d4c:	fa04 f403 	lsl.w	r4, r4, r3
 8000d50:	d908      	bls.n	8000d64 <__udivmoddi4+0x258>
 8000d52:	eb1c 0101 	adds.w	r1, ip, r1
 8000d56:	f100 38ff 	add.w	r8, r0, #4294967295
 8000d5a:	d22f      	bcs.n	8000dbc <__udivmoddi4+0x2b0>
 8000d5c:	428d      	cmp	r5, r1
 8000d5e:	d92d      	bls.n	8000dbc <__udivmoddi4+0x2b0>
 8000d60:	3802      	subs	r0, #2
 8000d62:	4461      	add	r1, ip
 8000d64:	1b49      	subs	r1, r1, r5
 8000d66:	b292      	uxth	r2, r2
 8000d68:	fbb1 f5f7 	udiv	r5, r1, r7
 8000d6c:	fb07 1115 	mls	r1, r7, r5, r1
 8000d70:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000d74:	fb05 f10e 	mul.w	r1, r5, lr
 8000d78:	4291      	cmp	r1, r2
 8000d7a:	d908      	bls.n	8000d8e <__udivmoddi4+0x282>
 8000d7c:	eb1c 0202 	adds.w	r2, ip, r2
 8000d80:	f105 38ff 	add.w	r8, r5, #4294967295
 8000d84:	d216      	bcs.n	8000db4 <__udivmoddi4+0x2a8>
 8000d86:	4291      	cmp	r1, r2
 8000d88:	d914      	bls.n	8000db4 <__udivmoddi4+0x2a8>
 8000d8a:	3d02      	subs	r5, #2
 8000d8c:	4462      	add	r2, ip
 8000d8e:	1a52      	subs	r2, r2, r1
 8000d90:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000d94:	e738      	b.n	8000c08 <__udivmoddi4+0xfc>
 8000d96:	4631      	mov	r1, r6
 8000d98:	4630      	mov	r0, r6
 8000d9a:	e708      	b.n	8000bae <__udivmoddi4+0xa2>
 8000d9c:	4639      	mov	r1, r7
 8000d9e:	e6e6      	b.n	8000b6e <__udivmoddi4+0x62>
 8000da0:	4610      	mov	r0, r2
 8000da2:	e6fb      	b.n	8000b9c <__udivmoddi4+0x90>
 8000da4:	4548      	cmp	r0, r9
 8000da6:	d2a9      	bcs.n	8000cfc <__udivmoddi4+0x1f0>
 8000da8:	ebb9 0802 	subs.w	r8, r9, r2
 8000dac:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000db0:	3b01      	subs	r3, #1
 8000db2:	e7a3      	b.n	8000cfc <__udivmoddi4+0x1f0>
 8000db4:	4645      	mov	r5, r8
 8000db6:	e7ea      	b.n	8000d8e <__udivmoddi4+0x282>
 8000db8:	462b      	mov	r3, r5
 8000dba:	e794      	b.n	8000ce6 <__udivmoddi4+0x1da>
 8000dbc:	4640      	mov	r0, r8
 8000dbe:	e7d1      	b.n	8000d64 <__udivmoddi4+0x258>
 8000dc0:	46d0      	mov	r8, sl
 8000dc2:	e77b      	b.n	8000cbc <__udivmoddi4+0x1b0>
 8000dc4:	3d02      	subs	r5, #2
 8000dc6:	4462      	add	r2, ip
 8000dc8:	e732      	b.n	8000c30 <__udivmoddi4+0x124>
 8000dca:	4608      	mov	r0, r1
 8000dcc:	e70a      	b.n	8000be4 <__udivmoddi4+0xd8>
 8000dce:	4464      	add	r4, ip
 8000dd0:	3802      	subs	r0, #2
 8000dd2:	e742      	b.n	8000c5a <__udivmoddi4+0x14e>

08000dd4 <__aeabi_idiv0>:
 8000dd4:	4770      	bx	lr
 8000dd6:	bf00      	nop

08000dd8 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000dd8:	b580      	push	{r7, lr}
 8000dda:	b08a      	sub	sp, #40	; 0x28
 8000ddc:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000dde:	f107 0314 	add.w	r3, r7, #20
 8000de2:	2200      	movs	r2, #0
 8000de4:	601a      	str	r2, [r3, #0]
 8000de6:	605a      	str	r2, [r3, #4]
 8000de8:	609a      	str	r2, [r3, #8]
 8000dea:	60da      	str	r2, [r3, #12]
 8000dec:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000dee:	2300      	movs	r3, #0
 8000df0:	613b      	str	r3, [r7, #16]
 8000df2:	4b55      	ldr	r3, [pc, #340]	; (8000f48 <MX_GPIO_Init+0x170>)
 8000df4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000df6:	4a54      	ldr	r2, [pc, #336]	; (8000f48 <MX_GPIO_Init+0x170>)
 8000df8:	f043 0304 	orr.w	r3, r3, #4
 8000dfc:	6313      	str	r3, [r2, #48]	; 0x30
 8000dfe:	4b52      	ldr	r3, [pc, #328]	; (8000f48 <MX_GPIO_Init+0x170>)
 8000e00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e02:	f003 0304 	and.w	r3, r3, #4
 8000e06:	613b      	str	r3, [r7, #16]
 8000e08:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000e0a:	2300      	movs	r3, #0
 8000e0c:	60fb      	str	r3, [r7, #12]
 8000e0e:	4b4e      	ldr	r3, [pc, #312]	; (8000f48 <MX_GPIO_Init+0x170>)
 8000e10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e12:	4a4d      	ldr	r2, [pc, #308]	; (8000f48 <MX_GPIO_Init+0x170>)
 8000e14:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000e18:	6313      	str	r3, [r2, #48]	; 0x30
 8000e1a:	4b4b      	ldr	r3, [pc, #300]	; (8000f48 <MX_GPIO_Init+0x170>)
 8000e1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e1e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000e22:	60fb      	str	r3, [r7, #12]
 8000e24:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e26:	2300      	movs	r3, #0
 8000e28:	60bb      	str	r3, [r7, #8]
 8000e2a:	4b47      	ldr	r3, [pc, #284]	; (8000f48 <MX_GPIO_Init+0x170>)
 8000e2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e2e:	4a46      	ldr	r2, [pc, #280]	; (8000f48 <MX_GPIO_Init+0x170>)
 8000e30:	f043 0301 	orr.w	r3, r3, #1
 8000e34:	6313      	str	r3, [r2, #48]	; 0x30
 8000e36:	4b44      	ldr	r3, [pc, #272]	; (8000f48 <MX_GPIO_Init+0x170>)
 8000e38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e3a:	f003 0301 	and.w	r3, r3, #1
 8000e3e:	60bb      	str	r3, [r7, #8]
 8000e40:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e42:	2300      	movs	r3, #0
 8000e44:	607b      	str	r3, [r7, #4]
 8000e46:	4b40      	ldr	r3, [pc, #256]	; (8000f48 <MX_GPIO_Init+0x170>)
 8000e48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e4a:	4a3f      	ldr	r2, [pc, #252]	; (8000f48 <MX_GPIO_Init+0x170>)
 8000e4c:	f043 0302 	orr.w	r3, r3, #2
 8000e50:	6313      	str	r3, [r2, #48]	; 0x30
 8000e52:	4b3d      	ldr	r3, [pc, #244]	; (8000f48 <MX_GPIO_Init+0x170>)
 8000e54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e56:	f003 0302 	and.w	r3, r3, #2
 8000e5a:	607b      	str	r3, [r7, #4]
 8000e5c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, LED_Read_Pin|LED_Step_Pin, GPIO_PIN_RESET);
 8000e5e:	2200      	movs	r2, #0
 8000e60:	210c      	movs	r1, #12
 8000e62:	483a      	ldr	r0, [pc, #232]	; (8000f4c <MX_GPIO_Init+0x174>)
 8000e64:	f005 fae6 	bl	8006434 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LD2_Pin|DIR1_Pin|DIR2_Pin, GPIO_PIN_RESET);
 8000e68:	2200      	movs	r2, #0
 8000e6a:	f44f 7148 	mov.w	r1, #800	; 0x320
 8000e6e:	4838      	ldr	r0, [pc, #224]	; (8000f50 <MX_GPIO_Init+0x178>)
 8000e70:	f005 fae0 	bl	8006434 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, TOF_PWR_EN_C_Pin|TOF_LPn_C_Pin, GPIO_PIN_SET);
 8000e74:	2201      	movs	r2, #1
 8000e76:	2111      	movs	r1, #17
 8000e78:	4836      	ldr	r0, [pc, #216]	; (8000f54 <MX_GPIO_Init+0x17c>)
 8000e7a:	f005 fadb 	bl	8006434 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(TOF_I2C_RST_C_GPIO_Port, TOF_I2C_RST_C_Pin, GPIO_PIN_RESET);
 8000e7e:	2200      	movs	r2, #0
 8000e80:	2108      	movs	r1, #8
 8000e82:	4834      	ldr	r0, [pc, #208]	; (8000f54 <MX_GPIO_Init+0x17c>)
 8000e84:	f005 fad6 	bl	8006434 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PCPin PCPin */
  GPIO_InitStruct.Pin = LED_Read_Pin|LED_Step_Pin;
 8000e88:	230c      	movs	r3, #12
 8000e8a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e8c:	2301      	movs	r3, #1
 8000e8e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e90:	2300      	movs	r3, #0
 8000e92:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e94:	2300      	movs	r3, #0
 8000e96:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000e98:	f107 0314 	add.w	r3, r7, #20
 8000e9c:	4619      	mov	r1, r3
 8000e9e:	482b      	ldr	r0, [pc, #172]	; (8000f4c <MX_GPIO_Init+0x174>)
 8000ea0:	f005 f840 	bl	8005f24 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = TOF_INT_C_Pin;
 8000ea4:	2310      	movs	r3, #16
 8000ea6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000ea8:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000eac:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000eae:	2300      	movs	r3, #0
 8000eb0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(TOF_INT_C_GPIO_Port, &GPIO_InitStruct);
 8000eb2:	f107 0314 	add.w	r3, r7, #20
 8000eb6:	4619      	mov	r1, r3
 8000eb8:	4825      	ldr	r0, [pc, #148]	; (8000f50 <MX_GPIO_Init+0x178>)
 8000eba:	f005 f833 	bl	8005f24 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = LD2_Pin|DIR1_Pin|DIR2_Pin;
 8000ebe:	f44f 7348 	mov.w	r3, #800	; 0x320
 8000ec2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ec4:	2301      	movs	r3, #1
 8000ec6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ec8:	2300      	movs	r3, #0
 8000eca:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ecc:	2300      	movs	r3, #0
 8000ece:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ed0:	f107 0314 	add.w	r3, r7, #20
 8000ed4:	4619      	mov	r1, r3
 8000ed6:	481e      	ldr	r0, [pc, #120]	; (8000f50 <MX_GPIO_Init+0x178>)
 8000ed8:	f005 f824 	bl	8005f24 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = TOF_PWR_EN_C_Pin;
 8000edc:	2301      	movs	r3, #1
 8000ede:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ee0:	2301      	movs	r3, #1
 8000ee2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ee4:	2300      	movs	r3, #0
 8000ee6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ee8:	2300      	movs	r3, #0
 8000eea:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(TOF_PWR_EN_C_GPIO_Port, &GPIO_InitStruct);
 8000eec:	f107 0314 	add.w	r3, r7, #20
 8000ef0:	4619      	mov	r1, r3
 8000ef2:	4818      	ldr	r0, [pc, #96]	; (8000f54 <MX_GPIO_Init+0x17c>)
 8000ef4:	f005 f816 	bl	8005f24 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = TOF_I2C_RST_C_Pin;
 8000ef8:	2308      	movs	r3, #8
 8000efa:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000efc:	2301      	movs	r3, #1
 8000efe:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000f00:	2302      	movs	r3, #2
 8000f02:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f04:	2300      	movs	r3, #0
 8000f06:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(TOF_I2C_RST_C_GPIO_Port, &GPIO_InitStruct);
 8000f08:	f107 0314 	add.w	r3, r7, #20
 8000f0c:	4619      	mov	r1, r3
 8000f0e:	4811      	ldr	r0, [pc, #68]	; (8000f54 <MX_GPIO_Init+0x17c>)
 8000f10:	f005 f808 	bl	8005f24 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = TOF_LPn_C_Pin;
 8000f14:	2310      	movs	r3, #16
 8000f16:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f18:	2301      	movs	r3, #1
 8000f1a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000f1c:	2301      	movs	r3, #1
 8000f1e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f20:	2300      	movs	r3, #0
 8000f22:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(TOF_LPn_C_GPIO_Port, &GPIO_InitStruct);
 8000f24:	f107 0314 	add.w	r3, r7, #20
 8000f28:	4619      	mov	r1, r3
 8000f2a:	480a      	ldr	r0, [pc, #40]	; (8000f54 <MX_GPIO_Init+0x17c>)
 8000f2c:	f004 fffa 	bl	8005f24 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI4_IRQn, 0, 0);
 8000f30:	2200      	movs	r2, #0
 8000f32:	2100      	movs	r1, #0
 8000f34:	200a      	movs	r0, #10
 8000f36:	f004 ff90 	bl	8005e5a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 8000f3a:	200a      	movs	r0, #10
 8000f3c:	f004 ffa9 	bl	8005e92 <HAL_NVIC_EnableIRQ>

}
 8000f40:	bf00      	nop
 8000f42:	3728      	adds	r7, #40	; 0x28
 8000f44:	46bd      	mov	sp, r7
 8000f46:	bd80      	pop	{r7, pc}
 8000f48:	40023800 	.word	0x40023800
 8000f4c:	40020800 	.word	0x40020800
 8000f50:	40020000 	.word	0x40020000
 8000f54:	40020400 	.word	0x40020400

08000f58 <max.0>:
  //uint8_t dimMatrix = 8;

  int index;
  long distance[4]={0,0,0,0};
  int max(long x[],int k)
  {
 8000f58:	b480      	push	{r7}
 8000f5a:	b089      	sub	sp, #36	; 0x24
 8000f5c:	af00      	add	r7, sp, #0
 8000f5e:	60f8      	str	r0, [r7, #12]
 8000f60:	60b9      	str	r1, [r7, #8]
 8000f62:	f8c7 c004 	str.w	ip, [r7, #4]
  	int i;
  	int index;
  	long sx=x[0]+x[1];
 8000f66:	68fb      	ldr	r3, [r7, #12]
 8000f68:	681a      	ldr	r2, [r3, #0]
 8000f6a:	68fb      	ldr	r3, [r7, #12]
 8000f6c:	3304      	adds	r3, #4
 8000f6e:	681b      	ldr	r3, [r3, #0]
 8000f70:	4413      	add	r3, r2
 8000f72:	61bb      	str	r3, [r7, #24]
  	long ctr=x[1]+x[2];
 8000f74:	68fb      	ldr	r3, [r7, #12]
 8000f76:	3304      	adds	r3, #4
 8000f78:	681a      	ldr	r2, [r3, #0]
 8000f7a:	68fb      	ldr	r3, [r7, #12]
 8000f7c:	3308      	adds	r3, #8
 8000f7e:	681b      	ldr	r3, [r3, #0]
 8000f80:	4413      	add	r3, r2
 8000f82:	617b      	str	r3, [r7, #20]
  	long dx=x[2]+x[3];
 8000f84:	68fb      	ldr	r3, [r7, #12]
 8000f86:	3308      	adds	r3, #8
 8000f88:	681a      	ldr	r2, [r3, #0]
 8000f8a:	68fb      	ldr	r3, [r7, #12]
 8000f8c:	330c      	adds	r3, #12
 8000f8e:	681b      	ldr	r3, [r3, #0]
 8000f90:	4413      	add	r3, r2
 8000f92:	613b      	str	r3, [r7, #16]
  	if ((dx>ctr)&(dx>sx)){
 8000f94:	697a      	ldr	r2, [r7, #20]
 8000f96:	69bb      	ldr	r3, [r7, #24]
 8000f98:	4293      	cmp	r3, r2
 8000f9a:	bfb8      	it	lt
 8000f9c:	4613      	movlt	r3, r2
 8000f9e:	693a      	ldr	r2, [r7, #16]
 8000fa0:	429a      	cmp	r2, r3
 8000fa2:	dd02      	ble.n	8000faa <max.0+0x52>
  		index=2;
 8000fa4:	2302      	movs	r3, #2
 8000fa6:	61fb      	str	r3, [r7, #28]
 8000fa8:	e014      	b.n	8000fd4 <max.0+0x7c>
  	  	} else if((sx>ctr)&(sx>dx)){
 8000faa:	697a      	ldr	r2, [r7, #20]
 8000fac:	693b      	ldr	r3, [r7, #16]
 8000fae:	4293      	cmp	r3, r2
 8000fb0:	bfb8      	it	lt
 8000fb2:	4613      	movlt	r3, r2
 8000fb4:	69ba      	ldr	r2, [r7, #24]
 8000fb6:	429a      	cmp	r2, r3
 8000fb8:	dd02      	ble.n	8000fc0 <max.0+0x68>
  	  		index=0;
 8000fba:	2300      	movs	r3, #0
 8000fbc:	61fb      	str	r3, [r7, #28]
 8000fbe:	e009      	b.n	8000fd4 <max.0+0x7c>
  	  	} else if ((ctr>dx)&(ctr>sx)){
 8000fc0:	693a      	ldr	r2, [r7, #16]
 8000fc2:	69bb      	ldr	r3, [r7, #24]
 8000fc4:	4293      	cmp	r3, r2
 8000fc6:	bfb8      	it	lt
 8000fc8:	4613      	movlt	r3, r2
 8000fca:	697a      	ldr	r2, [r7, #20]
 8000fcc:	429a      	cmp	r2, r3
 8000fce:	dd01      	ble.n	8000fd4 <max.0+0x7c>
  	  		index=1;
 8000fd0:	2301      	movs	r3, #1
 8000fd2:	61fb      	str	r3, [r7, #28]
  	  	}
  	return(index);
 8000fd4:	69fb      	ldr	r3, [r7, #28]
  }
 8000fd6:	4618      	mov	r0, r3
 8000fd8:	3724      	adds	r7, #36	; 0x24
 8000fda:	46bd      	mov	sp, r7
 8000fdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fe0:	4770      	bx	lr
	...

08000fe4 <main>:
{
 8000fe4:	b590      	push	{r4, r7, lr}
 8000fe6:	b089      	sub	sp, #36	; 0x24
 8000fe8:	af00      	add	r7, sp, #0
int main(void)
 8000fea:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000fee:	613b      	str	r3, [r7, #16]
  HAL_Init();
 8000ff0:	f004 fdc2 	bl	8005b78 <HAL_Init>
  SystemClock_Config();
 8000ff4:	f000 f9a6 	bl	8001344 <SystemClock_Config>
  MX_GPIO_Init();
 8000ff8:	f7ff feee 	bl	8000dd8 <MX_GPIO_Init>
  MX_TIM2_Init();
 8000ffc:	f000 fcac 	bl	8001958 <MX_TIM2_Init>
  MX_TIM3_Init();
 8001000:	f000 fd02 	bl	8001a08 <MX_TIM3_Init>
  MX_TOF_Init();
 8001004:	f008 fd5c 	bl	8009ac0 <MX_TOF_Init>
  __HAL_TIM_SET_COMPARE(&htim2,TIM_CHANNEL_1, __HAL_TIM_GET_AUTORELOAD(&htim2)*0.5);
 8001008:	4b23      	ldr	r3, [pc, #140]	; (8001098 <main+0xb4>)
 800100a:	681b      	ldr	r3, [r3, #0]
 800100c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800100e:	4618      	mov	r0, r3
 8001010:	f7ff fa90 	bl	8000534 <__aeabi_ui2d>
 8001014:	f04f 0200 	mov.w	r2, #0
 8001018:	4b20      	ldr	r3, [pc, #128]	; (800109c <main+0xb8>)
 800101a:	f7ff fb05 	bl	8000628 <__aeabi_dmul>
 800101e:	4602      	mov	r2, r0
 8001020:	460b      	mov	r3, r1
 8001022:	491d      	ldr	r1, [pc, #116]	; (8001098 <main+0xb4>)
 8001024:	680c      	ldr	r4, [r1, #0]
 8001026:	4610      	mov	r0, r2
 8001028:	4619      	mov	r1, r3
 800102a:	f7ff fd37 	bl	8000a9c <__aeabi_d2uiz>
 800102e:	4603      	mov	r3, r0
 8001030:	6363      	str	r3, [r4, #52]	; 0x34
    htim2.Instance->EGR=TIM_EGR_UG;
 8001032:	4b19      	ldr	r3, [pc, #100]	; (8001098 <main+0xb4>)
 8001034:	681b      	ldr	r3, [r3, #0]
 8001036:	2201      	movs	r2, #1
 8001038:	615a      	str	r2, [r3, #20]
  calibration_data=VL53L5A1_RANGING_SENSOR_XTalkCalibration(VL53L5A1_DEV_CENTER, 0.8, 600);
 800103a:	f44f 7216 	mov.w	r2, #600	; 0x258
 800103e:	2100      	movs	r1, #0
 8001040:	2001      	movs	r0, #1
 8001042:	f000 fedd 	bl	8001e00 <VL53L5A1_RANGING_SENSOR_XTalkCalibration>
 8001046:	61f8      	str	r0, [r7, #28]
  uint8_t dimMatrix = 4;
 8001048:	2304      	movs	r3, #4
 800104a:	76fb      	strb	r3, [r7, #27]
  long distance[4]={0,0,0,0};
 800104c:	463b      	mov	r3, r7
 800104e:	2200      	movs	r2, #0
 8001050:	601a      	str	r2, [r3, #0]
 8001052:	605a      	str	r2, [r3, #4]
 8001054:	609a      	str	r2, [r3, #8]
 8001056:	60da      	str	r2, [r3, #12]
  {
    /* USER CODE END WHILE */

  //MX_TOF_Process();
    /* USER CODE BEGIN 3 */
  while(HAL_TIM_Base_GetState(&htim3)==HAL_TIM_STATE_BUSY)
 8001058:	bf00      	nop
 800105a:	4811      	ldr	r0, [pc, #68]	; (80010a0 <main+0xbc>)
 800105c:	f007 fc9e 	bl	800899c <HAL_TIM_Base_GetState>
 8001060:	4603      	mov	r3, r0
 8001062:	2b02      	cmp	r3, #2
 8001064:	d0f9      	beq.n	800105a <main+0x76>
  	  {

  	  	  }

TOF_Read_Distances( dimMatrix, distance);
 8001066:	7efb      	ldrb	r3, [r7, #27]
 8001068:	463a      	mov	r2, r7
 800106a:	4611      	mov	r1, r2
 800106c:	4618      	mov	r0, r3
 800106e:	f008 fddf 	bl	8009c30 <TOF_Read_Distances>
	 {
	      for (int j =(4 - 1); j >= 0; j --)
	         {printf("dist=%d\r\n", distance[j]);
	        		   }
	        }*/
  index=max(distance, 4);
 8001072:	463b      	mov	r3, r7
 8001074:	f107 0210 	add.w	r2, r7, #16
 8001078:	4694      	mov	ip, r2
 800107a:	2104      	movs	r1, #4
 800107c:	4618      	mov	r0, r3
 800107e:	f7ff ff6b 	bl	8000f58 <max.0>
 8001082:	6178      	str	r0, [r7, #20]
  check(index, distance);
 8001084:	463b      	mov	r3, r7
 8001086:	f107 0210 	add.w	r2, r7, #16
 800108a:	4694      	mov	ip, r2
 800108c:	4619      	mov	r1, r3
 800108e:	6978      	ldr	r0, [r7, #20]
 8001090:	f000 f8ce 	bl	8001230 <check.1>
  {
 8001094:	e7e0      	b.n	8001058 <main+0x74>
 8001096:	bf00      	nop
 8001098:	20000124 	.word	0x20000124
 800109c:	3fe00000 	.word	0x3fe00000
 80010a0:	2000016c 	.word	0x2000016c

080010a4 <forward.4>:
  {
 80010a4:	b580      	push	{r7, lr}
 80010a6:	b082      	sub	sp, #8
 80010a8:	af00      	add	r7, sp, #0
 80010aa:	f8c7 c004 	str.w	ip, [r7, #4]
	  printf("forward\r\n");
 80010ae:	480d      	ldr	r0, [pc, #52]	; (80010e4 <forward.4+0x40>)
 80010b0:	f009 f818 	bl	800a0e4 <puts>
  	HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
 80010b4:	2100      	movs	r1, #0
 80010b6:	480c      	ldr	r0, [pc, #48]	; (80010e8 <forward.4+0x44>)
 80010b8:	f007 f904 	bl	80082c4 <HAL_TIM_PWM_Start>
  	HAL_TIM_Base_Start_IT(&htim3);
 80010bc:	480b      	ldr	r0, [pc, #44]	; (80010ec <forward.4+0x48>)
 80010be:	f007 f841 	bl	8008144 <HAL_TIM_Base_Start_IT>
  	HAL_GPIO_WritePin(DIR1_GPIO_Port, DIR1_Pin, RESET );
 80010c2:	2200      	movs	r2, #0
 80010c4:	f44f 7180 	mov.w	r1, #256	; 0x100
 80010c8:	4809      	ldr	r0, [pc, #36]	; (80010f0 <forward.4+0x4c>)
 80010ca:	f005 f9b3 	bl	8006434 <HAL_GPIO_WritePin>
  	HAL_GPIO_WritePin(DIR2_GPIO_Port, DIR2_Pin, SET ); //sx
 80010ce:	2201      	movs	r2, #1
 80010d0:	f44f 7100 	mov.w	r1, #512	; 0x200
 80010d4:	4806      	ldr	r0, [pc, #24]	; (80010f0 <forward.4+0x4c>)
 80010d6:	f005 f9ad 	bl	8006434 <HAL_GPIO_WritePin>
  }
 80010da:	bf00      	nop
 80010dc:	3708      	adds	r7, #8
 80010de:	46bd      	mov	sp, r7
 80010e0:	bd80      	pop	{r7, pc}
 80010e2:	bf00      	nop
 80010e4:	0800ade8 	.word	0x0800ade8
 80010e8:	20000124 	.word	0x20000124
 80010ec:	2000016c 	.word	0x2000016c
 80010f0:	40020000 	.word	0x40020000

080010f4 <spin.2>:
  {	__HAL_TIM_SET_AUTORELOAD(&htim3,2548);//leva il diviso 100
 80010f4:	b580      	push	{r7, lr}
 80010f6:	b082      	sub	sp, #8
 80010f8:	af00      	add	r7, sp, #0
 80010fa:	f8c7 c004 	str.w	ip, [r7, #4]
 80010fe:	4b13      	ldr	r3, [pc, #76]	; (800114c <spin.2+0x58>)
 8001100:	681b      	ldr	r3, [r3, #0]
 8001102:	f640 12f4 	movw	r2, #2548	; 0x9f4
 8001106:	62da      	str	r2, [r3, #44]	; 0x2c
 8001108:	4b10      	ldr	r3, [pc, #64]	; (800114c <spin.2+0x58>)
 800110a:	f640 12f4 	movw	r2, #2548	; 0x9f4
 800110e:	60da      	str	r2, [r3, #12]
  	htim3.Instance->EGR=TIM_EGR_UG ;
 8001110:	4b0e      	ldr	r3, [pc, #56]	; (800114c <spin.2+0x58>)
 8001112:	681b      	ldr	r3, [r3, #0]
 8001114:	2201      	movs	r2, #1
 8001116:	615a      	str	r2, [r3, #20]
  	HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
 8001118:	2100      	movs	r1, #0
 800111a:	480d      	ldr	r0, [pc, #52]	; (8001150 <spin.2+0x5c>)
 800111c:	f007 f8d2 	bl	80082c4 <HAL_TIM_PWM_Start>
  	HAL_TIM_Base_Start_IT(&htim3);
 8001120:	480a      	ldr	r0, [pc, #40]	; (800114c <spin.2+0x58>)
 8001122:	f007 f80f 	bl	8008144 <HAL_TIM_Base_Start_IT>
  	HAL_GPIO_WritePin(DIR1_GPIO_Port, DIR1_Pin, SET );
 8001126:	2201      	movs	r2, #1
 8001128:	f44f 7180 	mov.w	r1, #256	; 0x100
 800112c:	4809      	ldr	r0, [pc, #36]	; (8001154 <spin.2+0x60>)
 800112e:	f005 f981 	bl	8006434 <HAL_GPIO_WritePin>
  	HAL_GPIO_WritePin(DIR2_GPIO_Port, DIR2_Pin, SET );
 8001132:	2201      	movs	r2, #1
 8001134:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001138:	4806      	ldr	r0, [pc, #24]	; (8001154 <spin.2+0x60>)
 800113a:	f005 f97b 	bl	8006434 <HAL_GPIO_WritePin>
  	printf("spin\r\n");
 800113e:	4806      	ldr	r0, [pc, #24]	; (8001158 <spin.2+0x64>)
 8001140:	f008 ffd0 	bl	800a0e4 <puts>
  	}
 8001144:	bf00      	nop
 8001146:	3708      	adds	r7, #8
 8001148:	46bd      	mov	sp, r7
 800114a:	bd80      	pop	{r7, pc}
 800114c:	2000016c 	.word	0x2000016c
 8001150:	20000124 	.word	0x20000124
 8001154:	40020000 	.word	0x40020000
 8001158:	0800adf4 	.word	0x0800adf4

0800115c <goRight.5>:
  {
 800115c:	b580      	push	{r7, lr}
 800115e:	b082      	sub	sp, #8
 8001160:	af00      	add	r7, sp, #0
 8001162:	f8c7 c004 	str.w	ip, [r7, #4]
  	__HAL_TIM_SET_AUTORELOAD(&htim3,500);//leva il diviso 100
 8001166:	4b13      	ldr	r3, [pc, #76]	; (80011b4 <goRight.5+0x58>)
 8001168:	681b      	ldr	r3, [r3, #0]
 800116a:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 800116e:	62da      	str	r2, [r3, #44]	; 0x2c
 8001170:	4b10      	ldr	r3, [pc, #64]	; (80011b4 <goRight.5+0x58>)
 8001172:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8001176:	60da      	str	r2, [r3, #12]
  	htim3.Instance->EGR=TIM_EGR_UG ;
 8001178:	4b0e      	ldr	r3, [pc, #56]	; (80011b4 <goRight.5+0x58>)
 800117a:	681b      	ldr	r3, [r3, #0]
 800117c:	2201      	movs	r2, #1
 800117e:	615a      	str	r2, [r3, #20]
  	HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
 8001180:	2100      	movs	r1, #0
 8001182:	480d      	ldr	r0, [pc, #52]	; (80011b8 <goRight.5+0x5c>)
 8001184:	f007 f89e 	bl	80082c4 <HAL_TIM_PWM_Start>
  	HAL_TIM_Base_Start_IT(&htim3);
 8001188:	480a      	ldr	r0, [pc, #40]	; (80011b4 <goRight.5+0x58>)
 800118a:	f006 ffdb 	bl	8008144 <HAL_TIM_Base_Start_IT>
  	printf("right\r\n");
 800118e:	480b      	ldr	r0, [pc, #44]	; (80011bc <goRight.5+0x60>)
 8001190:	f008 ffa8 	bl	800a0e4 <puts>
  	HAL_GPIO_WritePin(DIR1_GPIO_Port, DIR1_Pin, SET );
 8001194:	2201      	movs	r2, #1
 8001196:	f44f 7180 	mov.w	r1, #256	; 0x100
 800119a:	4809      	ldr	r0, [pc, #36]	; (80011c0 <goRight.5+0x64>)
 800119c:	f005 f94a 	bl	8006434 <HAL_GPIO_WritePin>
  	HAL_GPIO_WritePin(DIR2_GPIO_Port, DIR2_Pin, SET );
 80011a0:	2201      	movs	r2, #1
 80011a2:	f44f 7100 	mov.w	r1, #512	; 0x200
 80011a6:	4806      	ldr	r0, [pc, #24]	; (80011c0 <goRight.5+0x64>)
 80011a8:	f005 f944 	bl	8006434 <HAL_GPIO_WritePin>
  	}
 80011ac:	bf00      	nop
 80011ae:	3708      	adds	r7, #8
 80011b0:	46bd      	mov	sp, r7
 80011b2:	bd80      	pop	{r7, pc}
 80011b4:	2000016c 	.word	0x2000016c
 80011b8:	20000124 	.word	0x20000124
 80011bc:	0800adfc 	.word	0x0800adfc
 80011c0:	40020000 	.word	0x40020000

080011c4 <goLeft.3>:
  {
 80011c4:	b580      	push	{r7, lr}
 80011c6:	b082      	sub	sp, #8
 80011c8:	af00      	add	r7, sp, #0
 80011ca:	f8c7 c004 	str.w	ip, [r7, #4]
  	__HAL_TIM_SET_AUTORELOAD(&htim3,500);//leva il diviso 100
 80011ce:	4b13      	ldr	r3, [pc, #76]	; (800121c <goLeft.3+0x58>)
 80011d0:	681b      	ldr	r3, [r3, #0]
 80011d2:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 80011d6:	62da      	str	r2, [r3, #44]	; 0x2c
 80011d8:	4b10      	ldr	r3, [pc, #64]	; (800121c <goLeft.3+0x58>)
 80011da:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 80011de:	60da      	str	r2, [r3, #12]
  	htim3.Instance->EGR=TIM_EGR_UG ;
 80011e0:	4b0e      	ldr	r3, [pc, #56]	; (800121c <goLeft.3+0x58>)
 80011e2:	681b      	ldr	r3, [r3, #0]
 80011e4:	2201      	movs	r2, #1
 80011e6:	615a      	str	r2, [r3, #20]
  	HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
 80011e8:	2100      	movs	r1, #0
 80011ea:	480d      	ldr	r0, [pc, #52]	; (8001220 <goLeft.3+0x5c>)
 80011ec:	f007 f86a 	bl	80082c4 <HAL_TIM_PWM_Start>
  	HAL_TIM_Base_Start_IT(&htim3);
 80011f0:	480a      	ldr	r0, [pc, #40]	; (800121c <goLeft.3+0x58>)
 80011f2:	f006 ffa7 	bl	8008144 <HAL_TIM_Base_Start_IT>
  	HAL_GPIO_WritePin(DIR1_GPIO_Port, DIR1_Pin, RESET );
 80011f6:	2200      	movs	r2, #0
 80011f8:	f44f 7180 	mov.w	r1, #256	; 0x100
 80011fc:	4809      	ldr	r0, [pc, #36]	; (8001224 <goLeft.3+0x60>)
 80011fe:	f005 f919 	bl	8006434 <HAL_GPIO_WritePin>
  	HAL_GPIO_WritePin(DIR2_GPIO_Port, DIR2_Pin, RESET );
 8001202:	2200      	movs	r2, #0
 8001204:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001208:	4806      	ldr	r0, [pc, #24]	; (8001224 <goLeft.3+0x60>)
 800120a:	f005 f913 	bl	8006434 <HAL_GPIO_WritePin>
  	printf("left\r\n");
 800120e:	4806      	ldr	r0, [pc, #24]	; (8001228 <goLeft.3+0x64>)
 8001210:	f008 ff68 	bl	800a0e4 <puts>
  	}
 8001214:	bf00      	nop
 8001216:	3708      	adds	r7, #8
 8001218:	46bd      	mov	sp, r7
 800121a:	bd80      	pop	{r7, pc}
 800121c:	2000016c 	.word	0x2000016c
 8001220:	20000124 	.word	0x20000124
 8001224:	40020000 	.word	0x40020000
 8001228:	0800ae04 	.word	0x0800ae04
 800122c:	00000000 	.word	0x00000000

08001230 <check.1>:
  {
 8001230:	b590      	push	{r4, r7, lr}
 8001232:	b087      	sub	sp, #28
 8001234:	af00      	add	r7, sp, #0
 8001236:	60f8      	str	r0, [r7, #12]
 8001238:	60b9      	str	r1, [r7, #8]
 800123a:	4664      	mov	r4, ip
 800123c:	f8c7 c004 	str.w	ip, [r7, #4]
	  HAL_GPIO_WritePin(LED_Read_GPIO_Port, LED_Read_Pin, RESET);
 8001240:	2200      	movs	r2, #0
 8001242:	2104      	movs	r1, #4
 8001244:	483c      	ldr	r0, [pc, #240]	; (8001338 <check.1+0x108>)
 8001246:	f005 f8f5 	bl	8006434 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(LED_Step_GPIO_Port, LED_Step_Pin, SET);
 800124a:	2201      	movs	r2, #1
 800124c:	2108      	movs	r1, #8
 800124e:	483a      	ldr	r0, [pc, #232]	; (8001338 <check.1+0x108>)
 8001250:	f005 f8f0 	bl	8006434 <HAL_GPIO_WritePin>
	  if ( distance[1]<200 & distance[2]<200)
 8001254:	68bb      	ldr	r3, [r7, #8]
 8001256:	3304      	adds	r3, #4
 8001258:	681b      	ldr	r3, [r3, #0]
 800125a:	2bc7      	cmp	r3, #199	; 0xc7
 800125c:	bfd4      	ite	le
 800125e:	2301      	movle	r3, #1
 8001260:	2300      	movgt	r3, #0
 8001262:	b2da      	uxtb	r2, r3
 8001264:	68bb      	ldr	r3, [r7, #8]
 8001266:	3308      	adds	r3, #8
 8001268:	681b      	ldr	r3, [r3, #0]
 800126a:	2bc7      	cmp	r3, #199	; 0xc7
 800126c:	bfd4      	ite	le
 800126e:	2301      	movle	r3, #1
 8001270:	2300      	movgt	r3, #0
 8001272:	b2db      	uxtb	r3, r3
 8001274:	4013      	ands	r3, r2
 8001276:	b2db      	uxtb	r3, r3
 8001278:	2b00      	cmp	r3, #0
 800127a:	d003      	beq.n	8001284 <check.1+0x54>
		  spin();
 800127c:	46a4      	mov	ip, r4
 800127e:	f7ff ff39 	bl	80010f4 <spin.2>
  }
 8001282:	e04b      	b.n	800131c <check.1+0xec>
			 int n=(((distance[2]+distance[1])/2-200)/(10*3.14*6.5))*2038;
 8001284:	68bb      	ldr	r3, [r7, #8]
 8001286:	3308      	adds	r3, #8
 8001288:	681a      	ldr	r2, [r3, #0]
 800128a:	68bb      	ldr	r3, [r7, #8]
 800128c:	3304      	adds	r3, #4
 800128e:	681b      	ldr	r3, [r3, #0]
 8001290:	4413      	add	r3, r2
 8001292:	0fda      	lsrs	r2, r3, #31
 8001294:	4413      	add	r3, r2
 8001296:	105b      	asrs	r3, r3, #1
 8001298:	3bc8      	subs	r3, #200	; 0xc8
 800129a:	4618      	mov	r0, r3
 800129c:	f7ff f95a 	bl	8000554 <__aeabi_i2d>
 80012a0:	a321      	add	r3, pc, #132	; (adr r3, 8001328 <check.1+0xf8>)
 80012a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80012a6:	f7ff fae9 	bl	800087c <__aeabi_ddiv>
 80012aa:	4602      	mov	r2, r0
 80012ac:	460b      	mov	r3, r1
 80012ae:	4610      	mov	r0, r2
 80012b0:	4619      	mov	r1, r3
 80012b2:	a31f      	add	r3, pc, #124	; (adr r3, 8001330 <check.1+0x100>)
 80012b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80012b8:	f7ff f9b6 	bl	8000628 <__aeabi_dmul>
 80012bc:	4602      	mov	r2, r0
 80012be:	460b      	mov	r3, r1
 80012c0:	4610      	mov	r0, r2
 80012c2:	4619      	mov	r1, r3
 80012c4:	f7ff fbc2 	bl	8000a4c <__aeabi_d2iz>
 80012c8:	4603      	mov	r3, r0
 80012ca:	617b      	str	r3, [r7, #20]
			 		  	  switch(index)
 80012cc:	68fb      	ldr	r3, [r7, #12]
 80012ce:	2b02      	cmp	r3, #2
 80012d0:	d020      	beq.n	8001314 <check.1+0xe4>
 80012d2:	68fb      	ldr	r3, [r7, #12]
 80012d4:	2b02      	cmp	r3, #2
 80012d6:	dc21      	bgt.n	800131c <check.1+0xec>
 80012d8:	68fb      	ldr	r3, [r7, #12]
 80012da:	2b00      	cmp	r3, #0
 80012dc:	d003      	beq.n	80012e6 <check.1+0xb6>
 80012de:	68fb      	ldr	r3, [r7, #12]
 80012e0:	2b01      	cmp	r3, #1
 80012e2:	d004      	beq.n	80012ee <check.1+0xbe>
  }
 80012e4:	e01a      	b.n	800131c <check.1+0xec>
			 		  	  		  goLeft();
 80012e6:	46a4      	mov	ip, r4
 80012e8:	f7ff ff6c 	bl	80011c4 <goLeft.3>
			 		  	  		  break;
 80012ec:	e016      	b.n	800131c <check.1+0xec>
			 		  	  		__HAL_TIM_SET_AUTORELOAD(&htim3,n); //set n of steps for the position control of stepper
 80012ee:	4b13      	ldr	r3, [pc, #76]	; (800133c <check.1+0x10c>)
 80012f0:	681b      	ldr	r3, [r3, #0]
 80012f2:	697a      	ldr	r2, [r7, #20]
 80012f4:	62da      	str	r2, [r3, #44]	; 0x2c
 80012f6:	697b      	ldr	r3, [r7, #20]
 80012f8:	4a10      	ldr	r2, [pc, #64]	; (800133c <check.1+0x10c>)
 80012fa:	60d3      	str	r3, [r2, #12]
			 		  	  		printf("n=%d\r\n", n);
 80012fc:	6979      	ldr	r1, [r7, #20]
 80012fe:	4810      	ldr	r0, [pc, #64]	; (8001340 <check.1+0x110>)
 8001300:	f008 fe8a 	bl	800a018 <iprintf>
			 		  	  		htim3.Instance->EGR=TIM_EGR_UG ;
 8001304:	4b0d      	ldr	r3, [pc, #52]	; (800133c <check.1+0x10c>)
 8001306:	681b      	ldr	r3, [r3, #0]
 8001308:	2201      	movs	r2, #1
 800130a:	615a      	str	r2, [r3, #20]
			 		  	  		forward();
 800130c:	46a4      	mov	ip, r4
 800130e:	f7ff fec9 	bl	80010a4 <forward.4>
			 		  	  		  break;
 8001312:	e003      	b.n	800131c <check.1+0xec>
			 		  	  		  goRight();
 8001314:	46a4      	mov	ip, r4
 8001316:	f7ff ff21 	bl	800115c <goRight.5>
			 		  	  		  break;
 800131a:	bf00      	nop
  }
 800131c:	bf00      	nop
 800131e:	371c      	adds	r7, #28
 8001320:	46bd      	mov	sp, r7
 8001322:	bd90      	pop	{r4, r7, pc}
 8001324:	f3af 8000 	nop.w
 8001328:	33333334 	.word	0x33333334
 800132c:	40698333 	.word	0x40698333
 8001330:	00000000 	.word	0x00000000
 8001334:	409fd800 	.word	0x409fd800
 8001338:	40020800 	.word	0x40020800
 800133c:	2000016c 	.word	0x2000016c
 8001340:	0800ae0c 	.word	0x0800ae0c

08001344 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001344:	b580      	push	{r7, lr}
 8001346:	b094      	sub	sp, #80	; 0x50
 8001348:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800134a:	f107 031c 	add.w	r3, r7, #28
 800134e:	2234      	movs	r2, #52	; 0x34
 8001350:	2100      	movs	r1, #0
 8001352:	4618      	mov	r0, r3
 8001354:	f008 ffa6 	bl	800a2a4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001358:	f107 0308 	add.w	r3, r7, #8
 800135c:	2200      	movs	r2, #0
 800135e:	601a      	str	r2, [r3, #0]
 8001360:	605a      	str	r2, [r3, #4]
 8001362:	609a      	str	r2, [r3, #8]
 8001364:	60da      	str	r2, [r3, #12]
 8001366:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001368:	2300      	movs	r3, #0
 800136a:	607b      	str	r3, [r7, #4]
 800136c:	4b2a      	ldr	r3, [pc, #168]	; (8001418 <SystemClock_Config+0xd4>)
 800136e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001370:	4a29      	ldr	r2, [pc, #164]	; (8001418 <SystemClock_Config+0xd4>)
 8001372:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001376:	6413      	str	r3, [r2, #64]	; 0x40
 8001378:	4b27      	ldr	r3, [pc, #156]	; (8001418 <SystemClock_Config+0xd4>)
 800137a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800137c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001380:	607b      	str	r3, [r7, #4]
 8001382:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8001384:	2300      	movs	r3, #0
 8001386:	603b      	str	r3, [r7, #0]
 8001388:	4b24      	ldr	r3, [pc, #144]	; (800141c <SystemClock_Config+0xd8>)
 800138a:	681b      	ldr	r3, [r3, #0]
 800138c:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8001390:	4a22      	ldr	r2, [pc, #136]	; (800141c <SystemClock_Config+0xd8>)
 8001392:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001396:	6013      	str	r3, [r2, #0]
 8001398:	4b20      	ldr	r3, [pc, #128]	; (800141c <SystemClock_Config+0xd8>)
 800139a:	681b      	ldr	r3, [r3, #0]
 800139c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80013a0:	603b      	str	r3, [r7, #0]
 80013a2:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80013a4:	2302      	movs	r3, #2
 80013a6:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80013a8:	2301      	movs	r3, #1
 80013aa:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80013ac:	2310      	movs	r3, #16
 80013ae:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80013b0:	2302      	movs	r3, #2
 80013b2:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80013b4:	2300      	movs	r3, #0
 80013b6:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 16;
 80013b8:	2310      	movs	r3, #16
 80013ba:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 336;
 80013bc:	f44f 73a8 	mov.w	r3, #336	; 0x150
 80013c0:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 80013c2:	2304      	movs	r3, #4
 80013c4:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 80013c6:	2302      	movs	r3, #2
 80013c8:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 80013ca:	2302      	movs	r3, #2
 80013cc:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80013ce:	f107 031c 	add.w	r3, r7, #28
 80013d2:	4618      	mov	r0, r3
 80013d4:	f006 fbc8 	bl	8007b68 <HAL_RCC_OscConfig>
 80013d8:	4603      	mov	r3, r0
 80013da:	2b00      	cmp	r3, #0
 80013dc:	d001      	beq.n	80013e2 <SystemClock_Config+0x9e>
  {
    Error_Handler();
 80013de:	f000 f81f 	bl	8001420 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80013e2:	230f      	movs	r3, #15
 80013e4:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80013e6:	2302      	movs	r3, #2
 80013e8:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80013ea:	2300      	movs	r3, #0
 80013ec:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80013ee:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80013f2:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80013f4:	2300      	movs	r3, #0
 80013f6:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80013f8:	f107 0308 	add.w	r3, r7, #8
 80013fc:	2102      	movs	r1, #2
 80013fe:	4618      	mov	r0, r3
 8001400:	f006 f868 	bl	80074d4 <HAL_RCC_ClockConfig>
 8001404:	4603      	mov	r3, r0
 8001406:	2b00      	cmp	r3, #0
 8001408:	d001      	beq.n	800140e <SystemClock_Config+0xca>
  {
    Error_Handler();
 800140a:	f000 f809 	bl	8001420 <Error_Handler>
  }
}
 800140e:	bf00      	nop
 8001410:	3750      	adds	r7, #80	; 0x50
 8001412:	46bd      	mov	sp, r7
 8001414:	bd80      	pop	{r7, pc}
 8001416:	bf00      	nop
 8001418:	40023800 	.word	0x40023800
 800141c:	40007000 	.word	0x40007000

08001420 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001420:	b480      	push	{r7}
 8001422:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001424:	b672      	cpsid	i
}
 8001426:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001428:	e7fe      	b.n	8001428 <Error_Handler+0x8>
	...

0800142c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800142c:	b580      	push	{r7, lr}
 800142e:	b082      	sub	sp, #8
 8001430:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001432:	2300      	movs	r3, #0
 8001434:	607b      	str	r3, [r7, #4]
 8001436:	4b10      	ldr	r3, [pc, #64]	; (8001478 <HAL_MspInit+0x4c>)
 8001438:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800143a:	4a0f      	ldr	r2, [pc, #60]	; (8001478 <HAL_MspInit+0x4c>)
 800143c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001440:	6453      	str	r3, [r2, #68]	; 0x44
 8001442:	4b0d      	ldr	r3, [pc, #52]	; (8001478 <HAL_MspInit+0x4c>)
 8001444:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001446:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800144a:	607b      	str	r3, [r7, #4]
 800144c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800144e:	2300      	movs	r3, #0
 8001450:	603b      	str	r3, [r7, #0]
 8001452:	4b09      	ldr	r3, [pc, #36]	; (8001478 <HAL_MspInit+0x4c>)
 8001454:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001456:	4a08      	ldr	r2, [pc, #32]	; (8001478 <HAL_MspInit+0x4c>)
 8001458:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800145c:	6413      	str	r3, [r2, #64]	; 0x40
 800145e:	4b06      	ldr	r3, [pc, #24]	; (8001478 <HAL_MspInit+0x4c>)
 8001460:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001462:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001466:	603b      	str	r3, [r7, #0]
 8001468:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 800146a:	2007      	movs	r0, #7
 800146c:	f004 fcea 	bl	8005e44 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001470:	bf00      	nop
 8001472:	3708      	adds	r7, #8
 8001474:	46bd      	mov	sp, r7
 8001476:	bd80      	pop	{r7, pc}
 8001478:	40023800 	.word	0x40023800

0800147c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800147c:	b480      	push	{r7}
 800147e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001480:	e7fe      	b.n	8001480 <NMI_Handler+0x4>

08001482 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001482:	b480      	push	{r7}
 8001484:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001486:	e7fe      	b.n	8001486 <HardFault_Handler+0x4>

08001488 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001488:	b480      	push	{r7}
 800148a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800148c:	e7fe      	b.n	800148c <MemManage_Handler+0x4>

0800148e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800148e:	b480      	push	{r7}
 8001490:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001492:	e7fe      	b.n	8001492 <BusFault_Handler+0x4>

08001494 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001494:	b480      	push	{r7}
 8001496:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001498:	e7fe      	b.n	8001498 <UsageFault_Handler+0x4>

0800149a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800149a:	b480      	push	{r7}
 800149c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800149e:	bf00      	nop
 80014a0:	46bd      	mov	sp, r7
 80014a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014a6:	4770      	bx	lr

080014a8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80014a8:	b480      	push	{r7}
 80014aa:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80014ac:	bf00      	nop
 80014ae:	46bd      	mov	sp, r7
 80014b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014b4:	4770      	bx	lr

080014b6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80014b6:	b480      	push	{r7}
 80014b8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80014ba:	bf00      	nop
 80014bc:	46bd      	mov	sp, r7
 80014be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014c2:	4770      	bx	lr

080014c4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80014c4:	b580      	push	{r7, lr}
 80014c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80014c8:	f004 fba8 	bl	8005c1c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80014cc:	bf00      	nop
 80014ce:	bd80      	pop	{r7, pc}

080014d0 <EXTI4_IRQHandler>:

/**
  * @brief This function handles EXTI line 4 interrupt.
  */
void EXTI4_IRQHandler(void)
{
 80014d0:	b580      	push	{r7, lr}
 80014d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_IRQn 0 */

  /* USER CODE END EXTI4_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(TOF_INT_C_Pin);
 80014d4:	2010      	movs	r0, #16
 80014d6:	f004 ffc7 	bl	8006468 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_IRQn 1 */

  /* USER CODE END EXTI4_IRQn 1 */
}
 80014da:	bf00      	nop
 80014dc:	bd80      	pop	{r7, pc}
	...

080014e0 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 80014e0:	b580      	push	{r7, lr}
 80014e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 80014e4:	4802      	ldr	r0, [pc, #8]	; (80014f0 <TIM3_IRQHandler+0x10>)
 80014e6:	f007 f825 	bl	8008534 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 80014ea:	bf00      	nop
 80014ec:	bd80      	pop	{r7, pc}
 80014ee:	bf00      	nop
 80014f0:	2000016c 	.word	0x2000016c

080014f4 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 1 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 80014f4:	b580      	push	{r7, lr}
 80014f6:	b082      	sub	sp, #8
 80014f8:	af00      	add	r7, sp, #0
 80014fa:	6078      	str	r0, [r7, #4]

 	if(htim->Instance==TIM3){
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	681b      	ldr	r3, [r3, #0]
 8001500:	4a07      	ldr	r2, [pc, #28]	; (8001520 <HAL_TIM_PeriodElapsedCallback+0x2c>)
 8001502:	4293      	cmp	r3, r2
 8001504:	d107      	bne.n	8001516 <HAL_TIM_PeriodElapsedCallback+0x22>
 		//HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 		 HAL_TIM_PWM_Stop(&htim2, TIM_CHANNEL_1);
 8001506:	2100      	movs	r1, #0
 8001508:	4806      	ldr	r0, [pc, #24]	; (8001524 <HAL_TIM_PeriodElapsedCallback+0x30>)
 800150a:	f006 ffa3 	bl	8008454 <HAL_TIM_PWM_Stop>
 		 htim3.State=HAL_TIM_STATE_READY ;
 800150e:	4b06      	ldr	r3, [pc, #24]	; (8001528 <HAL_TIM_PeriodElapsedCallback+0x34>)
 8001510:	2201      	movs	r2, #1
 8001512:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  	}
 }
 8001516:	bf00      	nop
 8001518:	3708      	adds	r7, #8
 800151a:	46bd      	mov	sp, r7
 800151c:	bd80      	pop	{r7, pc}
 800151e:	bf00      	nop
 8001520:	40000400 	.word	0x40000400
 8001524:	20000124 	.word	0x20000124
 8001528:	2000016c 	.word	0x2000016c

0800152c <BSP_I2C1_Init>:
/**
  * @brief  Initialize I2C HAL
  * @retval BSP status
  */
int32_t BSP_I2C1_Init(void)
{
 800152c:	b580      	push	{r7, lr}
 800152e:	b082      	sub	sp, #8
 8001530:	af00      	add	r7, sp, #0

  int32_t ret = BSP_ERROR_NONE;
 8001532:	2300      	movs	r3, #0
 8001534:	607b      	str	r3, [r7, #4]

  hi2c1.Instance  = I2C1;
 8001536:	4b13      	ldr	r3, [pc, #76]	; (8001584 <BSP_I2C1_Init+0x58>)
 8001538:	4a13      	ldr	r2, [pc, #76]	; (8001588 <BSP_I2C1_Init+0x5c>)
 800153a:	601a      	str	r2, [r3, #0]

  if(I2C1InitCounter++ == 0)
 800153c:	4b13      	ldr	r3, [pc, #76]	; (800158c <BSP_I2C1_Init+0x60>)
 800153e:	681b      	ldr	r3, [r3, #0]
 8001540:	1c5a      	adds	r2, r3, #1
 8001542:	4912      	ldr	r1, [pc, #72]	; (800158c <BSP_I2C1_Init+0x60>)
 8001544:	600a      	str	r2, [r1, #0]
 8001546:	2b00      	cmp	r3, #0
 8001548:	d117      	bne.n	800157a <BSP_I2C1_Init+0x4e>
  {
    if (HAL_I2C_GetState(&hi2c1) == HAL_I2C_STATE_RESET)
 800154a:	480e      	ldr	r0, [pc, #56]	; (8001584 <BSP_I2C1_Init+0x58>)
 800154c:	f005 fc4c 	bl	8006de8 <HAL_I2C_GetState>
 8001550:	4603      	mov	r3, r0
 8001552:	2b00      	cmp	r3, #0
 8001554:	d111      	bne.n	800157a <BSP_I2C1_Init+0x4e>
    {
    #if (USE_HAL_I2C_REGISTER_CALLBACKS == 0U)
      /* Init the I2C Msp */
      I2C1_MspInit(&hi2c1);
 8001556:	480b      	ldr	r0, [pc, #44]	; (8001584 <BSP_I2C1_Init+0x58>)
 8001558:	f000 f8e2 	bl	8001720 <I2C1_MspInit>
        {
          return BSP_ERROR_MSP_FAILURE;
        }
      }
    #endif
      if(ret == BSP_ERROR_NONE)
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	2b00      	cmp	r3, #0
 8001560:	d10b      	bne.n	800157a <BSP_I2C1_Init+0x4e>
      {
        /* Init the I2C */
        if(MX_I2C1_Init(&hi2c1) != HAL_OK)
 8001562:	4808      	ldr	r0, [pc, #32]	; (8001584 <BSP_I2C1_Init+0x58>)
 8001564:	f000 f8a8 	bl	80016b8 <MX_I2C1_Init>
 8001568:	4603      	mov	r3, r0
 800156a:	2b00      	cmp	r3, #0
 800156c:	d003      	beq.n	8001576 <BSP_I2C1_Init+0x4a>
        {
          ret = BSP_ERROR_BUS_FAILURE;
 800156e:	f06f 0307 	mvn.w	r3, #7
 8001572:	607b      	str	r3, [r7, #4]
 8001574:	e001      	b.n	800157a <BSP_I2C1_Init+0x4e>
        }
        else
        {
          ret = BSP_ERROR_NONE;
 8001576:	2300      	movs	r3, #0
 8001578:	607b      	str	r3, [r7, #4]
        }
      }
    }
  }
  return ret;
 800157a:	687b      	ldr	r3, [r7, #4]
}
 800157c:	4618      	mov	r0, r3
 800157e:	3708      	adds	r7, #8
 8001580:	46bd      	mov	sp, r7
 8001582:	bd80      	pop	{r7, pc}
 8001584:	200000c8 	.word	0x200000c8
 8001588:	40005400 	.word	0x40005400
 800158c:	2000011c 	.word	0x2000011c

08001590 <BSP_I2C1_DeInit>:
/**
  * @brief  DeInitialize I2C HAL.
  * @retval BSP status
  */
int32_t BSP_I2C1_DeInit(void)
{
 8001590:	b580      	push	{r7, lr}
 8001592:	b082      	sub	sp, #8
 8001594:	af00      	add	r7, sp, #0
  int32_t ret = BSP_ERROR_NONE;
 8001596:	2300      	movs	r3, #0
 8001598:	607b      	str	r3, [r7, #4]

  if (I2C1InitCounter > 0)
 800159a:	4b0f      	ldr	r3, [pc, #60]	; (80015d8 <BSP_I2C1_DeInit+0x48>)
 800159c:	681b      	ldr	r3, [r3, #0]
 800159e:	2b00      	cmp	r3, #0
 80015a0:	d014      	beq.n	80015cc <BSP_I2C1_DeInit+0x3c>
  {
    if (--I2C1InitCounter == 0)
 80015a2:	4b0d      	ldr	r3, [pc, #52]	; (80015d8 <BSP_I2C1_DeInit+0x48>)
 80015a4:	681b      	ldr	r3, [r3, #0]
 80015a6:	3b01      	subs	r3, #1
 80015a8:	4a0b      	ldr	r2, [pc, #44]	; (80015d8 <BSP_I2C1_DeInit+0x48>)
 80015aa:	6013      	str	r3, [r2, #0]
 80015ac:	4b0a      	ldr	r3, [pc, #40]	; (80015d8 <BSP_I2C1_DeInit+0x48>)
 80015ae:	681b      	ldr	r3, [r3, #0]
 80015b0:	2b00      	cmp	r3, #0
 80015b2:	d10b      	bne.n	80015cc <BSP_I2C1_DeInit+0x3c>
    {
  #if (USE_HAL_I2C_REGISTER_CALLBACKS == 0U)
      /* DeInit the I2C */
      I2C1_MspDeInit(&hi2c1);
 80015b4:	4809      	ldr	r0, [pc, #36]	; (80015dc <BSP_I2C1_DeInit+0x4c>)
 80015b6:	f000 f8fd 	bl	80017b4 <I2C1_MspDeInit>
  #endif
      /* DeInit the I2C */
      if (HAL_I2C_DeInit(&hi2c1) != HAL_OK)
 80015ba:	4808      	ldr	r0, [pc, #32]	; (80015dc <BSP_I2C1_DeInit+0x4c>)
 80015bc:	f005 f8b0 	bl	8006720 <HAL_I2C_DeInit>
 80015c0:	4603      	mov	r3, r0
 80015c2:	2b00      	cmp	r3, #0
 80015c4:	d002      	beq.n	80015cc <BSP_I2C1_DeInit+0x3c>
      {
        ret = BSP_ERROR_BUS_FAILURE;
 80015c6:	f06f 0307 	mvn.w	r3, #7
 80015ca:	607b      	str	r3, [r7, #4]
      }
    }
  }
  return ret;
 80015cc:	687b      	ldr	r3, [r7, #4]
}
 80015ce:	4618      	mov	r0, r3
 80015d0:	3708      	adds	r7, #8
 80015d2:	46bd      	mov	sp, r7
 80015d4:	bd80      	pop	{r7, pc}
 80015d6:	bf00      	nop
 80015d8:	2000011c 	.word	0x2000011c
 80015dc:	200000c8 	.word	0x200000c8

080015e0 <BSP_I2C1_WriteReg16>:
  * @param  pData  Pointer to data buffer to write
  * @param  Length Data Length
  * @retval BSP statu
  */
int32_t BSP_I2C1_WriteReg16(uint16_t DevAddr, uint16_t Reg, uint8_t *pData, uint16_t Length)
{
 80015e0:	b580      	push	{r7, lr}
 80015e2:	b08a      	sub	sp, #40	; 0x28
 80015e4:	af04      	add	r7, sp, #16
 80015e6:	60ba      	str	r2, [r7, #8]
 80015e8:	461a      	mov	r2, r3
 80015ea:	4603      	mov	r3, r0
 80015ec:	81fb      	strh	r3, [r7, #14]
 80015ee:	460b      	mov	r3, r1
 80015f0:	81bb      	strh	r3, [r7, #12]
 80015f2:	4613      	mov	r3, r2
 80015f4:	80fb      	strh	r3, [r7, #6]
  int32_t ret = BSP_ERROR_NONE;
 80015f6:	2300      	movs	r3, #0
 80015f8:	617b      	str	r3, [r7, #20]

  if (HAL_I2C_Mem_Write(&hi2c1, DevAddr, Reg, I2C_MEMADD_SIZE_16BIT, pData, Length, BUS_I2C1_POLL_TIMEOUT) != HAL_OK)
 80015fa:	89ba      	ldrh	r2, [r7, #12]
 80015fc:	89f9      	ldrh	r1, [r7, #14]
 80015fe:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001602:	9302      	str	r3, [sp, #8]
 8001604:	88fb      	ldrh	r3, [r7, #6]
 8001606:	9301      	str	r3, [sp, #4]
 8001608:	68bb      	ldr	r3, [r7, #8]
 800160a:	9300      	str	r3, [sp, #0]
 800160c:	2310      	movs	r3, #16
 800160e:	480c      	ldr	r0, [pc, #48]	; (8001640 <BSP_I2C1_WriteReg16+0x60>)
 8001610:	f005 f8ca 	bl	80067a8 <HAL_I2C_Mem_Write>
 8001614:	4603      	mov	r3, r0
 8001616:	2b00      	cmp	r3, #0
 8001618:	d00c      	beq.n	8001634 <BSP_I2C1_WriteReg16+0x54>
  {
    if (HAL_I2C_GetError(&hi2c1) == HAL_I2C_ERROR_AF)
 800161a:	4809      	ldr	r0, [pc, #36]	; (8001640 <BSP_I2C1_WriteReg16+0x60>)
 800161c:	f005 fbf2 	bl	8006e04 <HAL_I2C_GetError>
 8001620:	4603      	mov	r3, r0
 8001622:	2b04      	cmp	r3, #4
 8001624:	d103      	bne.n	800162e <BSP_I2C1_WriteReg16+0x4e>
    {
      ret = BSP_ERROR_BUS_ACKNOWLEDGE_FAILURE;
 8001626:	f06f 0365 	mvn.w	r3, #101	; 0x65
 800162a:	617b      	str	r3, [r7, #20]
 800162c:	e002      	b.n	8001634 <BSP_I2C1_WriteReg16+0x54>
    }
    else
    {
      ret =  BSP_ERROR_PERIPH_FAILURE;
 800162e:	f06f 0303 	mvn.w	r3, #3
 8001632:	617b      	str	r3, [r7, #20]
    }
  }
  return ret;
 8001634:	697b      	ldr	r3, [r7, #20]
}
 8001636:	4618      	mov	r0, r3
 8001638:	3718      	adds	r7, #24
 800163a:	46bd      	mov	sp, r7
 800163c:	bd80      	pop	{r7, pc}
 800163e:	bf00      	nop
 8001640:	200000c8 	.word	0x200000c8

08001644 <BSP_I2C1_ReadReg16>:
  * @param  Reg: The target register address to read
  * @param  Length Data Length
  * @retval BSP status
  */
int32_t  BSP_I2C1_ReadReg16(uint16_t DevAddr, uint16_t Reg, uint8_t *pData, uint16_t Length)
{
 8001644:	b580      	push	{r7, lr}
 8001646:	b08a      	sub	sp, #40	; 0x28
 8001648:	af04      	add	r7, sp, #16
 800164a:	60ba      	str	r2, [r7, #8]
 800164c:	461a      	mov	r2, r3
 800164e:	4603      	mov	r3, r0
 8001650:	81fb      	strh	r3, [r7, #14]
 8001652:	460b      	mov	r3, r1
 8001654:	81bb      	strh	r3, [r7, #12]
 8001656:	4613      	mov	r3, r2
 8001658:	80fb      	strh	r3, [r7, #6]
  int32_t ret = BSP_ERROR_NONE;
 800165a:	2300      	movs	r3, #0
 800165c:	617b      	str	r3, [r7, #20]

  if (HAL_I2C_Mem_Read(&hi2c1, DevAddr, Reg, I2C_MEMADD_SIZE_16BIT, pData, Length, BUS_I2C1_POLL_TIMEOUT) != HAL_OK)
 800165e:	89ba      	ldrh	r2, [r7, #12]
 8001660:	89f9      	ldrh	r1, [r7, #14]
 8001662:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001666:	9302      	str	r3, [sp, #8]
 8001668:	88fb      	ldrh	r3, [r7, #6]
 800166a:	9301      	str	r3, [sp, #4]
 800166c:	68bb      	ldr	r3, [r7, #8]
 800166e:	9300      	str	r3, [sp, #0]
 8001670:	2310      	movs	r3, #16
 8001672:	480c      	ldr	r0, [pc, #48]	; (80016a4 <BSP_I2C1_ReadReg16+0x60>)
 8001674:	f005 f992 	bl	800699c <HAL_I2C_Mem_Read>
 8001678:	4603      	mov	r3, r0
 800167a:	2b00      	cmp	r3, #0
 800167c:	d00c      	beq.n	8001698 <BSP_I2C1_ReadReg16+0x54>
  {
    if (HAL_I2C_GetError(&hi2c1) != HAL_I2C_ERROR_AF)
 800167e:	4809      	ldr	r0, [pc, #36]	; (80016a4 <BSP_I2C1_ReadReg16+0x60>)
 8001680:	f005 fbc0 	bl	8006e04 <HAL_I2C_GetError>
 8001684:	4603      	mov	r3, r0
 8001686:	2b04      	cmp	r3, #4
 8001688:	d003      	beq.n	8001692 <BSP_I2C1_ReadReg16+0x4e>
    {
      ret =  BSP_ERROR_BUS_ACKNOWLEDGE_FAILURE;
 800168a:	f06f 0365 	mvn.w	r3, #101	; 0x65
 800168e:	617b      	str	r3, [r7, #20]
 8001690:	e002      	b.n	8001698 <BSP_I2C1_ReadReg16+0x54>
    }
    else
    {
      ret =  BSP_ERROR_PERIPH_FAILURE;
 8001692:	f06f 0303 	mvn.w	r3, #3
 8001696:	617b      	str	r3, [r7, #20]
    }
  }
  return ret;
 8001698:	697b      	ldr	r3, [r7, #20]
}
 800169a:	4618      	mov	r0, r3
 800169c:	3718      	adds	r7, #24
 800169e:	46bd      	mov	sp, r7
 80016a0:	bd80      	pop	{r7, pc}
 80016a2:	bf00      	nop
 80016a4:	200000c8 	.word	0x200000c8

080016a8 <BSP_GetTick>:

/**
  * @brief  Return system tick in ms
  * @retval Current HAL time base time stamp
  */
int32_t BSP_GetTick(void) {
 80016a8:	b580      	push	{r7, lr}
 80016aa:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 80016ac:	f004 faca 	bl	8005c44 <HAL_GetTick>
 80016b0:	4603      	mov	r3, r0
}
 80016b2:	4618      	mov	r0, r3
 80016b4:	bd80      	pop	{r7, pc}
	...

080016b8 <MX_I2C1_Init>:

/* I2C1 init function */

__weak HAL_StatusTypeDef MX_I2C1_Init(I2C_HandleTypeDef* hi2c)
{
 80016b8:	b580      	push	{r7, lr}
 80016ba:	b084      	sub	sp, #16
 80016bc:	af00      	add	r7, sp, #0
 80016be:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;
 80016c0:	2300      	movs	r3, #0
 80016c2:	73fb      	strb	r3, [r7, #15]

  hi2c->Instance = I2C1;
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	4a14      	ldr	r2, [pc, #80]	; (8001718 <MX_I2C1_Init+0x60>)
 80016c8:	601a      	str	r2, [r3, #0]
  hi2c->Init.ClockSpeed = 400000;
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	4a13      	ldr	r2, [pc, #76]	; (800171c <MX_I2C1_Init+0x64>)
 80016ce:	605a      	str	r2, [r3, #4]
  hi2c->Init.DutyCycle = I2C_DUTYCYCLE_2;
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	2200      	movs	r2, #0
 80016d4:	609a      	str	r2, [r3, #8]
  hi2c->Init.OwnAddress1 = 0;
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	2200      	movs	r2, #0
 80016da:	60da      	str	r2, [r3, #12]
  hi2c->Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80016e2:	611a      	str	r2, [r3, #16]
  hi2c->Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	2200      	movs	r2, #0
 80016e8:	615a      	str	r2, [r3, #20]
  hi2c->Init.OwnAddress2 = 0;
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	2200      	movs	r2, #0
 80016ee:	619a      	str	r2, [r3, #24]
  hi2c->Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	2200      	movs	r2, #0
 80016f4:	61da      	str	r2, [r3, #28]
  hi2c->Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	2200      	movs	r2, #0
 80016fa:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(hi2c) != HAL_OK)
 80016fc:	6878      	ldr	r0, [r7, #4]
 80016fe:	f004 fecb 	bl	8006498 <HAL_I2C_Init>
 8001702:	4603      	mov	r3, r0
 8001704:	2b00      	cmp	r3, #0
 8001706:	d001      	beq.n	800170c <MX_I2C1_Init+0x54>
  {
    ret = HAL_ERROR;
 8001708:	2301      	movs	r3, #1
 800170a:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 800170c:	7bfb      	ldrb	r3, [r7, #15]
}
 800170e:	4618      	mov	r0, r3
 8001710:	3710      	adds	r7, #16
 8001712:	46bd      	mov	sp, r7
 8001714:	bd80      	pop	{r7, pc}
 8001716:	bf00      	nop
 8001718:	40005400 	.word	0x40005400
 800171c:	00061a80 	.word	0x00061a80

08001720 <I2C1_MspInit>:

static void I2C1_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8001720:	b580      	push	{r7, lr}
 8001722:	b08a      	sub	sp, #40	; 0x28
 8001724:	af00      	add	r7, sp, #0
 8001726:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct;
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001728:	2300      	movs	r3, #0
 800172a:	613b      	str	r3, [r7, #16]
 800172c:	4b1f      	ldr	r3, [pc, #124]	; (80017ac <I2C1_MspInit+0x8c>)
 800172e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001730:	4a1e      	ldr	r2, [pc, #120]	; (80017ac <I2C1_MspInit+0x8c>)
 8001732:	f043 0302 	orr.w	r3, r3, #2
 8001736:	6313      	str	r3, [r2, #48]	; 0x30
 8001738:	4b1c      	ldr	r3, [pc, #112]	; (80017ac <I2C1_MspInit+0x8c>)
 800173a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800173c:	f003 0302 	and.w	r3, r3, #2
 8001740:	613b      	str	r3, [r7, #16]
 8001742:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = BUS_I2C1_SCL_GPIO_PIN;
 8001744:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001748:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800174a:	2312      	movs	r3, #18
 800174c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800174e:	2300      	movs	r3, #0
 8001750:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001752:	2303      	movs	r3, #3
 8001754:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = BUS_I2C1_SCL_GPIO_AF;
 8001756:	2304      	movs	r3, #4
 8001758:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(BUS_I2C1_SCL_GPIO_PORT, &GPIO_InitStruct);
 800175a:	f107 0314 	add.w	r3, r7, #20
 800175e:	4619      	mov	r1, r3
 8001760:	4813      	ldr	r0, [pc, #76]	; (80017b0 <I2C1_MspInit+0x90>)
 8001762:	f004 fbdf 	bl	8005f24 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = BUS_I2C1_SDA_GPIO_PIN;
 8001766:	f44f 7300 	mov.w	r3, #512	; 0x200
 800176a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800176c:	2312      	movs	r3, #18
 800176e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001770:	2300      	movs	r3, #0
 8001772:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001774:	2303      	movs	r3, #3
 8001776:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = BUS_I2C1_SDA_GPIO_AF;
 8001778:	2304      	movs	r3, #4
 800177a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(BUS_I2C1_SDA_GPIO_PORT, &GPIO_InitStruct);
 800177c:	f107 0314 	add.w	r3, r7, #20
 8001780:	4619      	mov	r1, r3
 8001782:	480b      	ldr	r0, [pc, #44]	; (80017b0 <I2C1_MspInit+0x90>)
 8001784:	f004 fbce 	bl	8005f24 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001788:	2300      	movs	r3, #0
 800178a:	60fb      	str	r3, [r7, #12]
 800178c:	4b07      	ldr	r3, [pc, #28]	; (80017ac <I2C1_MspInit+0x8c>)
 800178e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001790:	4a06      	ldr	r2, [pc, #24]	; (80017ac <I2C1_MspInit+0x8c>)
 8001792:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001796:	6413      	str	r3, [r2, #64]	; 0x40
 8001798:	4b04      	ldr	r3, [pc, #16]	; (80017ac <I2C1_MspInit+0x8c>)
 800179a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800179c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80017a0:	60fb      	str	r3, [r7, #12]
 80017a2:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
}
 80017a4:	bf00      	nop
 80017a6:	3728      	adds	r7, #40	; 0x28
 80017a8:	46bd      	mov	sp, r7
 80017aa:	bd80      	pop	{r7, pc}
 80017ac:	40023800 	.word	0x40023800
 80017b0:	40020400 	.word	0x40020400

080017b4 <I2C1_MspDeInit>:

static void I2C1_MspDeInit(I2C_HandleTypeDef* i2cHandle)
{
 80017b4:	b580      	push	{r7, lr}
 80017b6:	b082      	sub	sp, #8
 80017b8:	af00      	add	r7, sp, #0
 80017ba:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN I2C1_MspDeInit 0 */

  /* USER CODE END I2C1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_I2C1_CLK_DISABLE();
 80017bc:	4b09      	ldr	r3, [pc, #36]	; (80017e4 <I2C1_MspDeInit+0x30>)
 80017be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017c0:	4a08      	ldr	r2, [pc, #32]	; (80017e4 <I2C1_MspDeInit+0x30>)
 80017c2:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80017c6:	6413      	str	r3, [r2, #64]	; 0x40

    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    HAL_GPIO_DeInit(BUS_I2C1_SCL_GPIO_PORT, BUS_I2C1_SCL_GPIO_PIN);
 80017c8:	f44f 7180 	mov.w	r1, #256	; 0x100
 80017cc:	4806      	ldr	r0, [pc, #24]	; (80017e8 <I2C1_MspDeInit+0x34>)
 80017ce:	f004 fd3d 	bl	800624c <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(BUS_I2C1_SDA_GPIO_PORT, BUS_I2C1_SDA_GPIO_PIN);
 80017d2:	f44f 7100 	mov.w	r1, #512	; 0x200
 80017d6:	4804      	ldr	r0, [pc, #16]	; (80017e8 <I2C1_MspDeInit+0x34>)
 80017d8:	f004 fd38 	bl	800624c <HAL_GPIO_DeInit>

  /* USER CODE BEGIN I2C1_MspDeInit 1 */

  /* USER CODE END I2C1_MspDeInit 1 */
}
 80017dc:	bf00      	nop
 80017de:	3708      	adds	r7, #8
 80017e0:	46bd      	mov	sp, r7
 80017e2:	bd80      	pop	{r7, pc}
 80017e4:	40023800 	.word	0x40023800
 80017e8:	40020400 	.word	0x40020400

080017ec <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80017ec:	b580      	push	{r7, lr}
 80017ee:	b086      	sub	sp, #24
 80017f0:	af00      	add	r7, sp, #0
 80017f2:	60f8      	str	r0, [r7, #12]
 80017f4:	60b9      	str	r1, [r7, #8]
 80017f6:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80017f8:	2300      	movs	r3, #0
 80017fa:	617b      	str	r3, [r7, #20]
 80017fc:	e00a      	b.n	8001814 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80017fe:	f3af 8000 	nop.w
 8001802:	4601      	mov	r1, r0
 8001804:	68bb      	ldr	r3, [r7, #8]
 8001806:	1c5a      	adds	r2, r3, #1
 8001808:	60ba      	str	r2, [r7, #8]
 800180a:	b2ca      	uxtb	r2, r1
 800180c:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800180e:	697b      	ldr	r3, [r7, #20]
 8001810:	3301      	adds	r3, #1
 8001812:	617b      	str	r3, [r7, #20]
 8001814:	697a      	ldr	r2, [r7, #20]
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	429a      	cmp	r2, r3
 800181a:	dbf0      	blt.n	80017fe <_read+0x12>
  }

  return len;
 800181c:	687b      	ldr	r3, [r7, #4]
}
 800181e:	4618      	mov	r0, r3
 8001820:	3718      	adds	r7, #24
 8001822:	46bd      	mov	sp, r7
 8001824:	bd80      	pop	{r7, pc}

08001826 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001826:	b580      	push	{r7, lr}
 8001828:	b086      	sub	sp, #24
 800182a:	af00      	add	r7, sp, #0
 800182c:	60f8      	str	r0, [r7, #12]
 800182e:	60b9      	str	r1, [r7, #8]
 8001830:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001832:	2300      	movs	r3, #0
 8001834:	617b      	str	r3, [r7, #20]
 8001836:	e009      	b.n	800184c <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001838:	68bb      	ldr	r3, [r7, #8]
 800183a:	1c5a      	adds	r2, r3, #1
 800183c:	60ba      	str	r2, [r7, #8]
 800183e:	781b      	ldrb	r3, [r3, #0]
 8001840:	4618      	mov	r0, r3
 8001842:	f004 f935 	bl	8005ab0 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001846:	697b      	ldr	r3, [r7, #20]
 8001848:	3301      	adds	r3, #1
 800184a:	617b      	str	r3, [r7, #20]
 800184c:	697a      	ldr	r2, [r7, #20]
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	429a      	cmp	r2, r3
 8001852:	dbf1      	blt.n	8001838 <_write+0x12>
  }
  return len;
 8001854:	687b      	ldr	r3, [r7, #4]
}
 8001856:	4618      	mov	r0, r3
 8001858:	3718      	adds	r7, #24
 800185a:	46bd      	mov	sp, r7
 800185c:	bd80      	pop	{r7, pc}

0800185e <_close>:

int _close(int file)
{
 800185e:	b480      	push	{r7}
 8001860:	b083      	sub	sp, #12
 8001862:	af00      	add	r7, sp, #0
 8001864:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001866:	f04f 33ff 	mov.w	r3, #4294967295
}
 800186a:	4618      	mov	r0, r3
 800186c:	370c      	adds	r7, #12
 800186e:	46bd      	mov	sp, r7
 8001870:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001874:	4770      	bx	lr

08001876 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001876:	b480      	push	{r7}
 8001878:	b083      	sub	sp, #12
 800187a:	af00      	add	r7, sp, #0
 800187c:	6078      	str	r0, [r7, #4]
 800187e:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001880:	683b      	ldr	r3, [r7, #0]
 8001882:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001886:	605a      	str	r2, [r3, #4]
  return 0;
 8001888:	2300      	movs	r3, #0
}
 800188a:	4618      	mov	r0, r3
 800188c:	370c      	adds	r7, #12
 800188e:	46bd      	mov	sp, r7
 8001890:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001894:	4770      	bx	lr

08001896 <_isatty>:

int _isatty(int file)
{
 8001896:	b480      	push	{r7}
 8001898:	b083      	sub	sp, #12
 800189a:	af00      	add	r7, sp, #0
 800189c:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800189e:	2301      	movs	r3, #1
}
 80018a0:	4618      	mov	r0, r3
 80018a2:	370c      	adds	r7, #12
 80018a4:	46bd      	mov	sp, r7
 80018a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018aa:	4770      	bx	lr

080018ac <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80018ac:	b480      	push	{r7}
 80018ae:	b085      	sub	sp, #20
 80018b0:	af00      	add	r7, sp, #0
 80018b2:	60f8      	str	r0, [r7, #12]
 80018b4:	60b9      	str	r1, [r7, #8]
 80018b6:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80018b8:	2300      	movs	r3, #0
}
 80018ba:	4618      	mov	r0, r3
 80018bc:	3714      	adds	r7, #20
 80018be:	46bd      	mov	sp, r7
 80018c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018c4:	4770      	bx	lr
	...

080018c8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80018c8:	b580      	push	{r7, lr}
 80018ca:	b086      	sub	sp, #24
 80018cc:	af00      	add	r7, sp, #0
 80018ce:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80018d0:	4a14      	ldr	r2, [pc, #80]	; (8001924 <_sbrk+0x5c>)
 80018d2:	4b15      	ldr	r3, [pc, #84]	; (8001928 <_sbrk+0x60>)
 80018d4:	1ad3      	subs	r3, r2, r3
 80018d6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80018d8:	697b      	ldr	r3, [r7, #20]
 80018da:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80018dc:	4b13      	ldr	r3, [pc, #76]	; (800192c <_sbrk+0x64>)
 80018de:	681b      	ldr	r3, [r3, #0]
 80018e0:	2b00      	cmp	r3, #0
 80018e2:	d102      	bne.n	80018ea <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80018e4:	4b11      	ldr	r3, [pc, #68]	; (800192c <_sbrk+0x64>)
 80018e6:	4a12      	ldr	r2, [pc, #72]	; (8001930 <_sbrk+0x68>)
 80018e8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80018ea:	4b10      	ldr	r3, [pc, #64]	; (800192c <_sbrk+0x64>)
 80018ec:	681a      	ldr	r2, [r3, #0]
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	4413      	add	r3, r2
 80018f2:	693a      	ldr	r2, [r7, #16]
 80018f4:	429a      	cmp	r2, r3
 80018f6:	d207      	bcs.n	8001908 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80018f8:	f008 fd22 	bl	800a340 <__errno>
 80018fc:	4603      	mov	r3, r0
 80018fe:	220c      	movs	r2, #12
 8001900:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001902:	f04f 33ff 	mov.w	r3, #4294967295
 8001906:	e009      	b.n	800191c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001908:	4b08      	ldr	r3, [pc, #32]	; (800192c <_sbrk+0x64>)
 800190a:	681b      	ldr	r3, [r3, #0]
 800190c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800190e:	4b07      	ldr	r3, [pc, #28]	; (800192c <_sbrk+0x64>)
 8001910:	681a      	ldr	r2, [r3, #0]
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	4413      	add	r3, r2
 8001916:	4a05      	ldr	r2, [pc, #20]	; (800192c <_sbrk+0x64>)
 8001918:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800191a:	68fb      	ldr	r3, [r7, #12]
}
 800191c:	4618      	mov	r0, r3
 800191e:	3718      	adds	r7, #24
 8001920:	46bd      	mov	sp, r7
 8001922:	bd80      	pop	{r7, pc}
 8001924:	20020000 	.word	0x20020000
 8001928:	00000400 	.word	0x00000400
 800192c:	20000120 	.word	0x20000120
 8001930:	20002b68 	.word	0x20002b68

08001934 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001934:	b480      	push	{r7}
 8001936:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001938:	4b06      	ldr	r3, [pc, #24]	; (8001954 <SystemInit+0x20>)
 800193a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800193e:	4a05      	ldr	r2, [pc, #20]	; (8001954 <SystemInit+0x20>)
 8001940:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001944:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001948:	bf00      	nop
 800194a:	46bd      	mov	sp, r7
 800194c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001950:	4770      	bx	lr
 8001952:	bf00      	nop
 8001954:	e000ed00 	.word	0xe000ed00

08001958 <MX_TIM2_Init>:
TIM_HandleTypeDef htim2;
TIM_HandleTypeDef htim3;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8001958:	b580      	push	{r7, lr}
 800195a:	b08a      	sub	sp, #40	; 0x28
 800195c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800195e:	f107 0320 	add.w	r3, r7, #32
 8001962:	2200      	movs	r2, #0
 8001964:	601a      	str	r2, [r3, #0]
 8001966:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001968:	1d3b      	adds	r3, r7, #4
 800196a:	2200      	movs	r2, #0
 800196c:	601a      	str	r2, [r3, #0]
 800196e:	605a      	str	r2, [r3, #4]
 8001970:	609a      	str	r2, [r3, #8]
 8001972:	60da      	str	r2, [r3, #12]
 8001974:	611a      	str	r2, [r3, #16]
 8001976:	615a      	str	r2, [r3, #20]
 8001978:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800197a:	4b22      	ldr	r3, [pc, #136]	; (8001a04 <MX_TIM2_Init+0xac>)
 800197c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001980:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 83;
 8001982:	4b20      	ldr	r3, [pc, #128]	; (8001a04 <MX_TIM2_Init+0xac>)
 8001984:	2253      	movs	r2, #83	; 0x53
 8001986:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001988:	4b1e      	ldr	r3, [pc, #120]	; (8001a04 <MX_TIM2_Init+0xac>)
 800198a:	2200      	movs	r2, #0
 800198c:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4999;
 800198e:	4b1d      	ldr	r3, [pc, #116]	; (8001a04 <MX_TIM2_Init+0xac>)
 8001990:	f241 3287 	movw	r2, #4999	; 0x1387
 8001994:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001996:	4b1b      	ldr	r3, [pc, #108]	; (8001a04 <MX_TIM2_Init+0xac>)
 8001998:	2200      	movs	r2, #0
 800199a:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800199c:	4b19      	ldr	r3, [pc, #100]	; (8001a04 <MX_TIM2_Init+0xac>)
 800199e:	2200      	movs	r2, #0
 80019a0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 80019a2:	4818      	ldr	r0, [pc, #96]	; (8001a04 <MX_TIM2_Init+0xac>)
 80019a4:	f006 fc3e 	bl	8008224 <HAL_TIM_PWM_Init>
 80019a8:	4603      	mov	r3, r0
 80019aa:	2b00      	cmp	r3, #0
 80019ac:	d001      	beq.n	80019b2 <MX_TIM2_Init+0x5a>
  {
    Error_Handler();
 80019ae:	f7ff fd37 	bl	8001420 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 80019b2:	2320      	movs	r3, #32
 80019b4:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80019b6:	2300      	movs	r3, #0
 80019b8:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80019ba:	f107 0320 	add.w	r3, r7, #32
 80019be:	4619      	mov	r1, r3
 80019c0:	4810      	ldr	r0, [pc, #64]	; (8001a04 <MX_TIM2_Init+0xac>)
 80019c2:	f007 fb7f 	bl	80090c4 <HAL_TIMEx_MasterConfigSynchronization>
 80019c6:	4603      	mov	r3, r0
 80019c8:	2b00      	cmp	r3, #0
 80019ca:	d001      	beq.n	80019d0 <MX_TIM2_Init+0x78>
  {
    Error_Handler();
 80019cc:	f7ff fd28 	bl	8001420 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80019d0:	2360      	movs	r3, #96	; 0x60
 80019d2:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80019d4:	2300      	movs	r3, #0
 80019d6:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80019d8:	2300      	movs	r3, #0
 80019da:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80019dc:	2300      	movs	r3, #0
 80019de:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80019e0:	1d3b      	adds	r3, r7, #4
 80019e2:	2200      	movs	r2, #0
 80019e4:	4619      	mov	r1, r3
 80019e6:	4807      	ldr	r0, [pc, #28]	; (8001a04 <MX_TIM2_Init+0xac>)
 80019e8:	f006 feac 	bl	8008744 <HAL_TIM_PWM_ConfigChannel>
 80019ec:	4603      	mov	r3, r0
 80019ee:	2b00      	cmp	r3, #0
 80019f0:	d001      	beq.n	80019f6 <MX_TIM2_Init+0x9e>
  {
    Error_Handler();
 80019f2:	f7ff fd15 	bl	8001420 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 80019f6:	4803      	ldr	r0, [pc, #12]	; (8001a04 <MX_TIM2_Init+0xac>)
 80019f8:	f000 f89e 	bl	8001b38 <HAL_TIM_MspPostInit>

}
 80019fc:	bf00      	nop
 80019fe:	3728      	adds	r7, #40	; 0x28
 8001a00:	46bd      	mov	sp, r7
 8001a02:	bd80      	pop	{r7, pc}
 8001a04:	20000124 	.word	0x20000124

08001a08 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8001a08:	b580      	push	{r7, lr}
 8001a0a:	b088      	sub	sp, #32
 8001a0c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 8001a0e:	f107 030c 	add.w	r3, r7, #12
 8001a12:	2200      	movs	r2, #0
 8001a14:	601a      	str	r2, [r3, #0]
 8001a16:	605a      	str	r2, [r3, #4]
 8001a18:	609a      	str	r2, [r3, #8]
 8001a1a:	60da      	str	r2, [r3, #12]
 8001a1c:	611a      	str	r2, [r3, #16]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001a1e:	1d3b      	adds	r3, r7, #4
 8001a20:	2200      	movs	r2, #0
 8001a22:	601a      	str	r2, [r3, #0]
 8001a24:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001a26:	4b1e      	ldr	r3, [pc, #120]	; (8001aa0 <MX_TIM3_Init+0x98>)
 8001a28:	4a1e      	ldr	r2, [pc, #120]	; (8001aa4 <MX_TIM3_Init+0x9c>)
 8001a2a:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8001a2c:	4b1c      	ldr	r3, [pc, #112]	; (8001aa0 <MX_TIM3_Init+0x98>)
 8001a2e:	2200      	movs	r2, #0
 8001a30:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001a32:	4b1b      	ldr	r3, [pc, #108]	; (8001aa0 <MX_TIM3_Init+0x98>)
 8001a34:	2200      	movs	r2, #0
 8001a36:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8001a38:	4b19      	ldr	r3, [pc, #100]	; (8001aa0 <MX_TIM3_Init+0x98>)
 8001a3a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001a3e:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001a40:	4b17      	ldr	r3, [pc, #92]	; (8001aa0 <MX_TIM3_Init+0x98>)
 8001a42:	2200      	movs	r2, #0
 8001a44:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001a46:	4b16      	ldr	r3, [pc, #88]	; (8001aa0 <MX_TIM3_Init+0x98>)
 8001a48:	2200      	movs	r2, #0
 8001a4a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001a4c:	4814      	ldr	r0, [pc, #80]	; (8001aa0 <MX_TIM3_Init+0x98>)
 8001a4e:	f006 fb29 	bl	80080a4 <HAL_TIM_Base_Init>
 8001a52:	4603      	mov	r3, r0
 8001a54:	2b00      	cmp	r3, #0
 8001a56:	d001      	beq.n	8001a5c <MX_TIM3_Init+0x54>
  {
    Error_Handler();
 8001a58:	f7ff fce2 	bl	8001420 <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_EXTERNAL1;
 8001a5c:	2307      	movs	r3, #7
 8001a5e:	60fb      	str	r3, [r7, #12]
  sSlaveConfig.InputTrigger = TIM_TS_ITR1;
 8001a60:	2310      	movs	r3, #16
 8001a62:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_SlaveConfigSynchro(&htim3, &sSlaveConfig) != HAL_OK)
 8001a64:	f107 030c 	add.w	r3, r7, #12
 8001a68:	4619      	mov	r1, r3
 8001a6a:	480d      	ldr	r0, [pc, #52]	; (8001aa0 <MX_TIM3_Init+0x98>)
 8001a6c:	f006 ff2c 	bl	80088c8 <HAL_TIM_SlaveConfigSynchro>
 8001a70:	4603      	mov	r3, r0
 8001a72:	2b00      	cmp	r3, #0
 8001a74:	d001      	beq.n	8001a7a <MX_TIM3_Init+0x72>
  {
    Error_Handler();
 8001a76:	f7ff fcd3 	bl	8001420 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001a7a:	2300      	movs	r3, #0
 8001a7c:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001a7e:	2300      	movs	r3, #0
 8001a80:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001a82:	1d3b      	adds	r3, r7, #4
 8001a84:	4619      	mov	r1, r3
 8001a86:	4806      	ldr	r0, [pc, #24]	; (8001aa0 <MX_TIM3_Init+0x98>)
 8001a88:	f007 fb1c 	bl	80090c4 <HAL_TIMEx_MasterConfigSynchronization>
 8001a8c:	4603      	mov	r3, r0
 8001a8e:	2b00      	cmp	r3, #0
 8001a90:	d001      	beq.n	8001a96 <MX_TIM3_Init+0x8e>
  {
    Error_Handler();
 8001a92:	f7ff fcc5 	bl	8001420 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8001a96:	bf00      	nop
 8001a98:	3720      	adds	r7, #32
 8001a9a:	46bd      	mov	sp, r7
 8001a9c:	bd80      	pop	{r7, pc}
 8001a9e:	bf00      	nop
 8001aa0:	2000016c 	.word	0x2000016c
 8001aa4:	40000400 	.word	0x40000400

08001aa8 <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 8001aa8:	b480      	push	{r7}
 8001aaa:	b085      	sub	sp, #20
 8001aac:	af00      	add	r7, sp, #0
 8001aae:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM2)
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	681b      	ldr	r3, [r3, #0]
 8001ab4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001ab8:	d10d      	bne.n	8001ad6 <HAL_TIM_PWM_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001aba:	2300      	movs	r3, #0
 8001abc:	60fb      	str	r3, [r7, #12]
 8001abe:	4b09      	ldr	r3, [pc, #36]	; (8001ae4 <HAL_TIM_PWM_MspInit+0x3c>)
 8001ac0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ac2:	4a08      	ldr	r2, [pc, #32]	; (8001ae4 <HAL_TIM_PWM_MspInit+0x3c>)
 8001ac4:	f043 0301 	orr.w	r3, r3, #1
 8001ac8:	6413      	str	r3, [r2, #64]	; 0x40
 8001aca:	4b06      	ldr	r3, [pc, #24]	; (8001ae4 <HAL_TIM_PWM_MspInit+0x3c>)
 8001acc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ace:	f003 0301 	and.w	r3, r3, #1
 8001ad2:	60fb      	str	r3, [r7, #12]
 8001ad4:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 8001ad6:	bf00      	nop
 8001ad8:	3714      	adds	r7, #20
 8001ada:	46bd      	mov	sp, r7
 8001adc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ae0:	4770      	bx	lr
 8001ae2:	bf00      	nop
 8001ae4:	40023800 	.word	0x40023800

08001ae8 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8001ae8:	b580      	push	{r7, lr}
 8001aea:	b084      	sub	sp, #16
 8001aec:	af00      	add	r7, sp, #0
 8001aee:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM3)
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	681b      	ldr	r3, [r3, #0]
 8001af4:	4a0e      	ldr	r2, [pc, #56]	; (8001b30 <HAL_TIM_Base_MspInit+0x48>)
 8001af6:	4293      	cmp	r3, r2
 8001af8:	d115      	bne.n	8001b26 <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001afa:	2300      	movs	r3, #0
 8001afc:	60fb      	str	r3, [r7, #12]
 8001afe:	4b0d      	ldr	r3, [pc, #52]	; (8001b34 <HAL_TIM_Base_MspInit+0x4c>)
 8001b00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b02:	4a0c      	ldr	r2, [pc, #48]	; (8001b34 <HAL_TIM_Base_MspInit+0x4c>)
 8001b04:	f043 0302 	orr.w	r3, r3, #2
 8001b08:	6413      	str	r3, [r2, #64]	; 0x40
 8001b0a:	4b0a      	ldr	r3, [pc, #40]	; (8001b34 <HAL_TIM_Base_MspInit+0x4c>)
 8001b0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b0e:	f003 0302 	and.w	r3, r3, #2
 8001b12:	60fb      	str	r3, [r7, #12]
 8001b14:	68fb      	ldr	r3, [r7, #12]

    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8001b16:	2200      	movs	r2, #0
 8001b18:	2100      	movs	r1, #0
 8001b1a:	201d      	movs	r0, #29
 8001b1c:	f004 f99d 	bl	8005e5a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8001b20:	201d      	movs	r0, #29
 8001b22:	f004 f9b6 	bl	8005e92 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 8001b26:	bf00      	nop
 8001b28:	3710      	adds	r7, #16
 8001b2a:	46bd      	mov	sp, r7
 8001b2c:	bd80      	pop	{r7, pc}
 8001b2e:	bf00      	nop
 8001b30:	40000400 	.word	0x40000400
 8001b34:	40023800 	.word	0x40023800

08001b38 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8001b38:	b580      	push	{r7, lr}
 8001b3a:	b088      	sub	sp, #32
 8001b3c:	af00      	add	r7, sp, #0
 8001b3e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b40:	f107 030c 	add.w	r3, r7, #12
 8001b44:	2200      	movs	r2, #0
 8001b46:	601a      	str	r2, [r3, #0]
 8001b48:	605a      	str	r2, [r3, #4]
 8001b4a:	609a      	str	r2, [r3, #8]
 8001b4c:	60da      	str	r2, [r3, #12]
 8001b4e:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM2)
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	681b      	ldr	r3, [r3, #0]
 8001b54:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001b58:	d11d      	bne.n	8001b96 <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b5a:	2300      	movs	r3, #0
 8001b5c:	60bb      	str	r3, [r7, #8]
 8001b5e:	4b10      	ldr	r3, [pc, #64]	; (8001ba0 <HAL_TIM_MspPostInit+0x68>)
 8001b60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b62:	4a0f      	ldr	r2, [pc, #60]	; (8001ba0 <HAL_TIM_MspPostInit+0x68>)
 8001b64:	f043 0301 	orr.w	r3, r3, #1
 8001b68:	6313      	str	r3, [r2, #48]	; 0x30
 8001b6a:	4b0d      	ldr	r3, [pc, #52]	; (8001ba0 <HAL_TIM_MspPostInit+0x68>)
 8001b6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b6e:	f003 0301 	and.w	r3, r3, #1
 8001b72:	60bb      	str	r3, [r7, #8]
 8001b74:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PA0-WKUP     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001b76:	2301      	movs	r3, #1
 8001b78:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b7a:	2302      	movs	r3, #2
 8001b7c:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b7e:	2300      	movs	r3, #0
 8001b80:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b82:	2300      	movs	r3, #0
 8001b84:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001b86:	2301      	movs	r3, #1
 8001b88:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b8a:	f107 030c 	add.w	r3, r7, #12
 8001b8e:	4619      	mov	r1, r3
 8001b90:	4804      	ldr	r0, [pc, #16]	; (8001ba4 <HAL_TIM_MspPostInit+0x6c>)
 8001b92:	f004 f9c7 	bl	8005f24 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8001b96:	bf00      	nop
 8001b98:	3720      	adds	r7, #32
 8001b9a:	46bd      	mov	sp, r7
 8001b9c:	bd80      	pop	{r7, pc}
 8001b9e:	bf00      	nop
 8001ba0:	40023800 	.word	0x40023800
 8001ba4:	40020000 	.word	0x40020000

08001ba8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001ba8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001be0 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001bac:	480d      	ldr	r0, [pc, #52]	; (8001be4 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001bae:	490e      	ldr	r1, [pc, #56]	; (8001be8 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001bb0:	4a0e      	ldr	r2, [pc, #56]	; (8001bec <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001bb2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001bb4:	e002      	b.n	8001bbc <LoopCopyDataInit>

08001bb6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001bb6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001bb8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001bba:	3304      	adds	r3, #4

08001bbc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001bbc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001bbe:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001bc0:	d3f9      	bcc.n	8001bb6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001bc2:	4a0b      	ldr	r2, [pc, #44]	; (8001bf0 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001bc4:	4c0b      	ldr	r4, [pc, #44]	; (8001bf4 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001bc6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001bc8:	e001      	b.n	8001bce <LoopFillZerobss>

08001bca <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001bca:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001bcc:	3204      	adds	r2, #4

08001bce <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001bce:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001bd0:	d3fb      	bcc.n	8001bca <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001bd2:	f7ff feaf 	bl	8001934 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001bd6:	f008 fbb9 	bl	800a34c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001bda:	f7ff fa03 	bl	8000fe4 <main>
  bx  lr    
 8001bde:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001be0:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001be4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001be8:	200000ac 	.word	0x200000ac
  ldr r2, =_sidata
 8001bec:	08020d84 	.word	0x08020d84
  ldr r2, =_sbss
 8001bf0:	200000ac 	.word	0x200000ac
  ldr r4, =_ebss
 8001bf4:	20002b68 	.word	0x20002b68

08001bf8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001bf8:	e7fe      	b.n	8001bf8 <ADC_IRQHandler>

08001bfa <VL53L5A1_RANGING_SENSOR_Init>:
  * @brief Initializes the ranging sensor.
  * @param Instance    Ranging sensor instance.
  * @retval BSP status
  */
int32_t VL53L5A1_RANGING_SENSOR_Init(uint32_t Instance)
{
 8001bfa:	b580      	push	{r7, lr}
 8001bfc:	b084      	sub	sp, #16
 8001bfe:	af00      	add	r7, sp, #0
 8001c00:	6078      	str	r0, [r7, #4]
  int32_t ret;

  if (Instance >= RANGING_SENSOR_INSTANCES_NBR)
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	2b02      	cmp	r3, #2
 8001c06:	d903      	bls.n	8001c10 <VL53L5A1_RANGING_SENSOR_Init+0x16>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8001c08:	f06f 0301 	mvn.w	r3, #1
 8001c0c:	60fb      	str	r3, [r7, #12]
 8001c0e:	e003      	b.n	8001c18 <VL53L5A1_RANGING_SENSOR_Init+0x1e>
  }
  else
  {
    ret = VL53L5CX_Probe(Instance);
 8001c10:	6878      	ldr	r0, [r7, #4]
 8001c12:	f000 f91d 	bl	8001e50 <VL53L5CX_Probe>
 8001c16:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8001c18:	68fb      	ldr	r3, [r7, #12]
}
 8001c1a:	4618      	mov	r0, r3
 8001c1c:	3710      	adds	r7, #16
 8001c1e:	46bd      	mov	sp, r7
 8001c20:	bd80      	pop	{r7, pc}
	...

08001c24 <VL53L5A1_RANGING_SENSOR_ReadID>:
  * @param Instance    Ranging sensor instance.
  * @param pId    Pointer to the device ID.
  * @retval BSP status
  */
int32_t VL53L5A1_RANGING_SENSOR_ReadID(uint32_t Instance, uint32_t *pId)
{
 8001c24:	b580      	push	{r7, lr}
 8001c26:	b084      	sub	sp, #16
 8001c28:	af00      	add	r7, sp, #0
 8001c2a:	6078      	str	r0, [r7, #4]
 8001c2c:	6039      	str	r1, [r7, #0]
  int32_t ret;

  if (Instance >= RANGING_SENSOR_INSTANCES_NBR)
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	2b02      	cmp	r3, #2
 8001c32:	d903      	bls.n	8001c3c <VL53L5A1_RANGING_SENSOR_ReadID+0x18>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8001c34:	f06f 0301 	mvn.w	r3, #1
 8001c38:	60fb      	str	r3, [r7, #12]
 8001c3a:	e012      	b.n	8001c62 <VL53L5A1_RANGING_SENSOR_ReadID+0x3e>
  }
  else if (VL53L5A1_RANGING_SENSOR_Drv->ReadID(VL53L5A1_RANGING_SENSOR_CompObj[Instance], pId) < 0)
 8001c3c:	4b0b      	ldr	r3, [pc, #44]	; (8001c6c <VL53L5A1_RANGING_SENSOR_ReadID+0x48>)
 8001c3e:	681b      	ldr	r3, [r3, #0]
 8001c40:	689b      	ldr	r3, [r3, #8]
 8001c42:	490b      	ldr	r1, [pc, #44]	; (8001c70 <VL53L5A1_RANGING_SENSOR_ReadID+0x4c>)
 8001c44:	687a      	ldr	r2, [r7, #4]
 8001c46:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8001c4a:	6839      	ldr	r1, [r7, #0]
 8001c4c:	4610      	mov	r0, r2
 8001c4e:	4798      	blx	r3
 8001c50:	4603      	mov	r3, r0
 8001c52:	2b00      	cmp	r3, #0
 8001c54:	da03      	bge.n	8001c5e <VL53L5A1_RANGING_SENSOR_ReadID+0x3a>
  {
    ret = BSP_ERROR_COMPONENT_FAILURE;
 8001c56:	f06f 0304 	mvn.w	r3, #4
 8001c5a:	60fb      	str	r3, [r7, #12]
 8001c5c:	e001      	b.n	8001c62 <VL53L5A1_RANGING_SENSOR_ReadID+0x3e>
  }
  else
  {
    ret = BSP_ERROR_NONE;
 8001c5e:	2300      	movs	r3, #0
 8001c60:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 8001c62:	68fb      	ldr	r3, [r7, #12]
}
 8001c64:	4618      	mov	r0, r3
 8001c66:	3710      	adds	r7, #16
 8001c68:	46bd      	mov	sp, r7
 8001c6a:	bd80      	pop	{r7, pc}
 8001c6c:	200001c0 	.word	0x200001c0
 8001c70:	200001b4 	.word	0x200001b4

08001c74 <VL53L5A1_RANGING_SENSOR_GetCapabilities>:
  * @param Instance    Ranging sensor instance.
  * @param pCapabilities    Pointer to the ranging sensor capabilities.
  * @retval BSP status
  */
int32_t VL53L5A1_RANGING_SENSOR_GetCapabilities(uint32_t Instance, RANGING_SENSOR_Capabilities_t *pCapabilities)
{
 8001c74:	b580      	push	{r7, lr}
 8001c76:	b084      	sub	sp, #16
 8001c78:	af00      	add	r7, sp, #0
 8001c7a:	6078      	str	r0, [r7, #4]
 8001c7c:	6039      	str	r1, [r7, #0]
  int32_t ret;

  if (Instance >= RANGING_SENSOR_INSTANCES_NBR)
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	2b02      	cmp	r3, #2
 8001c82:	d903      	bls.n	8001c8c <VL53L5A1_RANGING_SENSOR_GetCapabilities+0x18>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8001c84:	f06f 0301 	mvn.w	r3, #1
 8001c88:	60fb      	str	r3, [r7, #12]
 8001c8a:	e012      	b.n	8001cb2 <VL53L5A1_RANGING_SENSOR_GetCapabilities+0x3e>
  }
  else if (VL53L5A1_RANGING_SENSOR_Drv->GetCapabilities(VL53L5A1_RANGING_SENSOR_CompObj[Instance], pCapabilities) < 0)
 8001c8c:	4b0b      	ldr	r3, [pc, #44]	; (8001cbc <VL53L5A1_RANGING_SENSOR_GetCapabilities+0x48>)
 8001c8e:	681b      	ldr	r3, [r3, #0]
 8001c90:	68db      	ldr	r3, [r3, #12]
 8001c92:	490b      	ldr	r1, [pc, #44]	; (8001cc0 <VL53L5A1_RANGING_SENSOR_GetCapabilities+0x4c>)
 8001c94:	687a      	ldr	r2, [r7, #4]
 8001c96:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8001c9a:	6839      	ldr	r1, [r7, #0]
 8001c9c:	4610      	mov	r0, r2
 8001c9e:	4798      	blx	r3
 8001ca0:	4603      	mov	r3, r0
 8001ca2:	2b00      	cmp	r3, #0
 8001ca4:	da03      	bge.n	8001cae <VL53L5A1_RANGING_SENSOR_GetCapabilities+0x3a>
  {
    ret = BSP_ERROR_COMPONENT_FAILURE;
 8001ca6:	f06f 0304 	mvn.w	r3, #4
 8001caa:	60fb      	str	r3, [r7, #12]
 8001cac:	e001      	b.n	8001cb2 <VL53L5A1_RANGING_SENSOR_GetCapabilities+0x3e>
  }
  else
  {
    ret = BSP_ERROR_NONE;
 8001cae:	2300      	movs	r3, #0
 8001cb0:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 8001cb2:	68fb      	ldr	r3, [r7, #12]
}
 8001cb4:	4618      	mov	r0, r3
 8001cb6:	3710      	adds	r7, #16
 8001cb8:	46bd      	mov	sp, r7
 8001cba:	bd80      	pop	{r7, pc}
 8001cbc:	200001c0 	.word	0x200001c0
 8001cc0:	200001b4 	.word	0x200001b4

08001cc4 <VL53L5A1_RANGING_SENSOR_ConfigProfile>:
  * @param Instance    Ranging sensor instance.
  * @param pConfig    Pointer to the new configuration profile to be applied.
  * @retval BSP status
  */
int32_t VL53L5A1_RANGING_SENSOR_ConfigProfile(uint32_t Instance, RANGING_SENSOR_ProfileConfig_t *pConfig)
{
 8001cc4:	b580      	push	{r7, lr}
 8001cc6:	b084      	sub	sp, #16
 8001cc8:	af00      	add	r7, sp, #0
 8001cca:	6078      	str	r0, [r7, #4]
 8001ccc:	6039      	str	r1, [r7, #0]
  int32_t ret;

  if (Instance >= RANGING_SENSOR_INSTANCES_NBR)
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	2b02      	cmp	r3, #2
 8001cd2:	d903      	bls.n	8001cdc <VL53L5A1_RANGING_SENSOR_ConfigProfile+0x18>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8001cd4:	f06f 0301 	mvn.w	r3, #1
 8001cd8:	60fb      	str	r3, [r7, #12]
 8001cda:	e012      	b.n	8001d02 <VL53L5A1_RANGING_SENSOR_ConfigProfile+0x3e>
  }
  else if (VL53L5A1_RANGING_SENSOR_Drv->ConfigProfile(VL53L5A1_RANGING_SENSOR_CompObj[Instance], pConfig) < 0)
 8001cdc:	4b0b      	ldr	r3, [pc, #44]	; (8001d0c <VL53L5A1_RANGING_SENSOR_ConfigProfile+0x48>)
 8001cde:	681b      	ldr	r3, [r3, #0]
 8001ce0:	691b      	ldr	r3, [r3, #16]
 8001ce2:	490b      	ldr	r1, [pc, #44]	; (8001d10 <VL53L5A1_RANGING_SENSOR_ConfigProfile+0x4c>)
 8001ce4:	687a      	ldr	r2, [r7, #4]
 8001ce6:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8001cea:	6839      	ldr	r1, [r7, #0]
 8001cec:	4610      	mov	r0, r2
 8001cee:	4798      	blx	r3
 8001cf0:	4603      	mov	r3, r0
 8001cf2:	2b00      	cmp	r3, #0
 8001cf4:	da03      	bge.n	8001cfe <VL53L5A1_RANGING_SENSOR_ConfigProfile+0x3a>
  {
    ret = BSP_ERROR_COMPONENT_FAILURE;
 8001cf6:	f06f 0304 	mvn.w	r3, #4
 8001cfa:	60fb      	str	r3, [r7, #12]
 8001cfc:	e001      	b.n	8001d02 <VL53L5A1_RANGING_SENSOR_ConfigProfile+0x3e>
  }
  else
  {
    ret = BSP_ERROR_NONE;
 8001cfe:	2300      	movs	r3, #0
 8001d00:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 8001d02:	68fb      	ldr	r3, [r7, #12]
}
 8001d04:	4618      	mov	r0, r3
 8001d06:	3710      	adds	r7, #16
 8001d08:	46bd      	mov	sp, r7
 8001d0a:	bd80      	pop	{r7, pc}
 8001d0c:	200001c0 	.word	0x200001c0
 8001d10:	200001b4 	.word	0x200001b4

08001d14 <VL53L5A1_RANGING_SENSOR_GetDistance>:
  * @param Instance    Ranging sensor instance.
  * @param pResult    Pointer to the result struct.
  * @retval BSP status
  */
int32_t VL53L5A1_RANGING_SENSOR_GetDistance(uint32_t Instance, RANGING_SENSOR_Result_t *pResult)
{
 8001d14:	b580      	push	{r7, lr}
 8001d16:	b084      	sub	sp, #16
 8001d18:	af00      	add	r7, sp, #0
 8001d1a:	6078      	str	r0, [r7, #4]
 8001d1c:	6039      	str	r1, [r7, #0]
  int32_t ret;

  if (Instance >= RANGING_SENSOR_INSTANCES_NBR)
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	2b02      	cmp	r3, #2
 8001d22:	d903      	bls.n	8001d2c <VL53L5A1_RANGING_SENSOR_GetDistance+0x18>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8001d24:	f06f 0301 	mvn.w	r3, #1
 8001d28:	60fb      	str	r3, [r7, #12]
 8001d2a:	e012      	b.n	8001d52 <VL53L5A1_RANGING_SENSOR_GetDistance+0x3e>
  }
  else if (VL53L5A1_RANGING_SENSOR_Drv->GetDistance(VL53L5A1_RANGING_SENSOR_CompObj[Instance], pResult) < 0)
 8001d2c:	4b0b      	ldr	r3, [pc, #44]	; (8001d5c <VL53L5A1_RANGING_SENSOR_GetDistance+0x48>)
 8001d2e:	681b      	ldr	r3, [r3, #0]
 8001d30:	69db      	ldr	r3, [r3, #28]
 8001d32:	490b      	ldr	r1, [pc, #44]	; (8001d60 <VL53L5A1_RANGING_SENSOR_GetDistance+0x4c>)
 8001d34:	687a      	ldr	r2, [r7, #4]
 8001d36:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8001d3a:	6839      	ldr	r1, [r7, #0]
 8001d3c:	4610      	mov	r0, r2
 8001d3e:	4798      	blx	r3
 8001d40:	4603      	mov	r3, r0
 8001d42:	2b00      	cmp	r3, #0
 8001d44:	da03      	bge.n	8001d4e <VL53L5A1_RANGING_SENSOR_GetDistance+0x3a>
  {
    ret = BSP_ERROR_COMPONENT_FAILURE;
 8001d46:	f06f 0304 	mvn.w	r3, #4
 8001d4a:	60fb      	str	r3, [r7, #12]
 8001d4c:	e001      	b.n	8001d52 <VL53L5A1_RANGING_SENSOR_GetDistance+0x3e>
  }
  else
  {
    ret = BSP_ERROR_NONE;
 8001d4e:	2300      	movs	r3, #0
 8001d50:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 8001d52:	68fb      	ldr	r3, [r7, #12]
}
 8001d54:	4618      	mov	r0, r3
 8001d56:	3710      	adds	r7, #16
 8001d58:	46bd      	mov	sp, r7
 8001d5a:	bd80      	pop	{r7, pc}
 8001d5c:	200001c0 	.word	0x200001c0
 8001d60:	200001b4 	.word	0x200001b4

08001d64 <VL53L5A1_RANGING_SENSOR_Start>:
  * @param Instance    Ranging sensor instance.
  * @param Mode        The desired ranging mode
  * @retval BSP status
  */
int32_t VL53L5A1_RANGING_SENSOR_Start(uint32_t Instance, uint32_t Mode)
{
 8001d64:	b580      	push	{r7, lr}
 8001d66:	b084      	sub	sp, #16
 8001d68:	af00      	add	r7, sp, #0
 8001d6a:	6078      	str	r0, [r7, #4]
 8001d6c:	6039      	str	r1, [r7, #0]
  int32_t ret;

  if (Instance >= RANGING_SENSOR_INSTANCES_NBR)
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	2b02      	cmp	r3, #2
 8001d72:	d903      	bls.n	8001d7c <VL53L5A1_RANGING_SENSOR_Start+0x18>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8001d74:	f06f 0301 	mvn.w	r3, #1
 8001d78:	60fb      	str	r3, [r7, #12]
 8001d7a:	e012      	b.n	8001da2 <VL53L5A1_RANGING_SENSOR_Start+0x3e>
  }
  else if (VL53L5A1_RANGING_SENSOR_Drv->Start(VL53L5A1_RANGING_SENSOR_CompObj[Instance], Mode) < 0)
 8001d7c:	4b0b      	ldr	r3, [pc, #44]	; (8001dac <VL53L5A1_RANGING_SENSOR_Start+0x48>)
 8001d7e:	681b      	ldr	r3, [r3, #0]
 8001d80:	6a1b      	ldr	r3, [r3, #32]
 8001d82:	490b      	ldr	r1, [pc, #44]	; (8001db0 <VL53L5A1_RANGING_SENSOR_Start+0x4c>)
 8001d84:	687a      	ldr	r2, [r7, #4]
 8001d86:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8001d8a:	6839      	ldr	r1, [r7, #0]
 8001d8c:	4610      	mov	r0, r2
 8001d8e:	4798      	blx	r3
 8001d90:	4603      	mov	r3, r0
 8001d92:	2b00      	cmp	r3, #0
 8001d94:	da03      	bge.n	8001d9e <VL53L5A1_RANGING_SENSOR_Start+0x3a>
  {
    ret = BSP_ERROR_COMPONENT_FAILURE;
 8001d96:	f06f 0304 	mvn.w	r3, #4
 8001d9a:	60fb      	str	r3, [r7, #12]
 8001d9c:	e001      	b.n	8001da2 <VL53L5A1_RANGING_SENSOR_Start+0x3e>
  }
  else
  {
    ret = BSP_ERROR_NONE;
 8001d9e:	2300      	movs	r3, #0
 8001da0:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 8001da2:	68fb      	ldr	r3, [r7, #12]
}
 8001da4:	4618      	mov	r0, r3
 8001da6:	3710      	adds	r7, #16
 8001da8:	46bd      	mov	sp, r7
 8001daa:	bd80      	pop	{r7, pc}
 8001dac:	200001c0 	.word	0x200001c0
 8001db0:	200001b4 	.word	0x200001b4

08001db4 <VL53L5A1_RANGING_SENSOR_Stop>:
  * @brief Stop ranging.
  * @param Instance    Ranging sensor instance.
  * @retval BSP status
  */
int32_t VL53L5A1_RANGING_SENSOR_Stop(uint32_t Instance)
{
 8001db4:	b580      	push	{r7, lr}
 8001db6:	b084      	sub	sp, #16
 8001db8:	af00      	add	r7, sp, #0
 8001dba:	6078      	str	r0, [r7, #4]
  int32_t ret;

  if (Instance >= RANGING_SENSOR_INSTANCES_NBR)
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	2b02      	cmp	r3, #2
 8001dc0:	d903      	bls.n	8001dca <VL53L5A1_RANGING_SENSOR_Stop+0x16>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8001dc2:	f06f 0301 	mvn.w	r3, #1
 8001dc6:	60fb      	str	r3, [r7, #12]
 8001dc8:	e011      	b.n	8001dee <VL53L5A1_RANGING_SENSOR_Stop+0x3a>
  }
  else if (VL53L5A1_RANGING_SENSOR_Drv->Stop(VL53L5A1_RANGING_SENSOR_CompObj[Instance]) < 0)
 8001dca:	4b0b      	ldr	r3, [pc, #44]	; (8001df8 <VL53L5A1_RANGING_SENSOR_Stop+0x44>)
 8001dcc:	681b      	ldr	r3, [r3, #0]
 8001dce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001dd0:	490a      	ldr	r1, [pc, #40]	; (8001dfc <VL53L5A1_RANGING_SENSOR_Stop+0x48>)
 8001dd2:	687a      	ldr	r2, [r7, #4]
 8001dd4:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8001dd8:	4610      	mov	r0, r2
 8001dda:	4798      	blx	r3
 8001ddc:	4603      	mov	r3, r0
 8001dde:	2b00      	cmp	r3, #0
 8001de0:	da03      	bge.n	8001dea <VL53L5A1_RANGING_SENSOR_Stop+0x36>
  {
    ret = BSP_ERROR_COMPONENT_FAILURE;
 8001de2:	f06f 0304 	mvn.w	r3, #4
 8001de6:	60fb      	str	r3, [r7, #12]
 8001de8:	e001      	b.n	8001dee <VL53L5A1_RANGING_SENSOR_Stop+0x3a>
  }
  else
  {
    ret = BSP_ERROR_NONE;
 8001dea:	2300      	movs	r3, #0
 8001dec:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 8001dee:	68fb      	ldr	r3, [r7, #12]
}
 8001df0:	4618      	mov	r0, r3
 8001df2:	3710      	adds	r7, #16
 8001df4:	46bd      	mov	sp, r7
 8001df6:	bd80      	pop	{r7, pc}
 8001df8:	200001c0 	.word	0x200001c0
 8001dfc:	200001b4 	.word	0x200001b4

08001e00 <VL53L5A1_RANGING_SENSOR_XTalkCalibration>:
  * @param Distance    Target distance in mm (range 600 - 3000 mm).
  * @note The recommended target reflectance value for Xtalk calibration is 3 %.
  * @retval BSP status
  */
int32_t VL53L5A1_RANGING_SENSOR_XTalkCalibration(uint32_t Instance, uint16_t Reflectance, uint16_t Distance)
{
 8001e00:	b580      	push	{r7, lr}
 8001e02:	b084      	sub	sp, #16
 8001e04:	af00      	add	r7, sp, #0
 8001e06:	6078      	str	r0, [r7, #4]
 8001e08:	460b      	mov	r3, r1
 8001e0a:	807b      	strh	r3, [r7, #2]
 8001e0c:	4613      	mov	r3, r2
 8001e0e:	803b      	strh	r3, [r7, #0]
  int32_t ret;

  if (Instance >= RANGING_SENSOR_INSTANCES_NBR)
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	2b02      	cmp	r3, #2
 8001e14:	d903      	bls.n	8001e1e <VL53L5A1_RANGING_SENSOR_XTalkCalibration+0x1e>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8001e16:	f06f 0301 	mvn.w	r3, #1
 8001e1a:	60fb      	str	r3, [r7, #12]
 8001e1c:	e011      	b.n	8001e42 <VL53L5A1_RANGING_SENSOR_XTalkCalibration+0x42>
  }
  else if (VL53L5CX_XTalkCalibration(VL53L5A1_RANGING_SENSOR_CompObj[Instance], Reflectance, Distance) < 0)
 8001e1e:	4a0b      	ldr	r2, [pc, #44]	; (8001e4c <VL53L5A1_RANGING_SENSOR_XTalkCalibration+0x4c>)
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001e26:	883a      	ldrh	r2, [r7, #0]
 8001e28:	8879      	ldrh	r1, [r7, #2]
 8001e2a:	4618      	mov	r0, r3
 8001e2c:	f003 fc1a 	bl	8005664 <VL53L5CX_XTalkCalibration>
 8001e30:	4603      	mov	r3, r0
 8001e32:	2b00      	cmp	r3, #0
 8001e34:	da03      	bge.n	8001e3e <VL53L5A1_RANGING_SENSOR_XTalkCalibration+0x3e>
  {
    ret = BSP_ERROR_COMPONENT_FAILURE;
 8001e36:	f06f 0304 	mvn.w	r3, #4
 8001e3a:	60fb      	str	r3, [r7, #12]
 8001e3c:	e001      	b.n	8001e42 <VL53L5A1_RANGING_SENSOR_XTalkCalibration+0x42>
  }
  else
  {
    ret = BSP_ERROR_NONE;
 8001e3e:	2300      	movs	r3, #0
 8001e40:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 8001e42:	68fb      	ldr	r3, [r7, #12]
}
 8001e44:	4618      	mov	r0, r3
 8001e46:	3710      	adds	r7, #16
 8001e48:	46bd      	mov	sp, r7
 8001e4a:	bd80      	pop	{r7, pc}
 8001e4c:	200001b4 	.word	0x200001b4

08001e50 <VL53L5CX_Probe>:
  * @brief Register Bus IOs if component ID is OK.
  * @param Instance    Ranging sensor instance.
  * @retval BSP status
  */
static int32_t VL53L5CX_Probe(uint32_t Instance)
{
 8001e50:	b580      	push	{r7, lr}
 8001e52:	b08a      	sub	sp, #40	; 0x28
 8001e54:	af00      	add	r7, sp, #0
 8001e56:	6078      	str	r0, [r7, #4]
  VL53L5CX_IO_t              IOCtx;
  uint32_t                   id;
  static VL53L5CX_Object_t   VL53L5CXObj[RANGING_SENSOR_INSTANCES_NBR];

  /* Configure the ranging sensor driver */
  IOCtx.Address     = RANGING_SENSOR_VL53L5CX_ADDRESS;
 8001e58:	2352      	movs	r3, #82	; 0x52
 8001e5a:	82bb      	strh	r3, [r7, #20]
  IOCtx.Init        = VL53L5A1_I2C_Init;
 8001e5c:	4b38      	ldr	r3, [pc, #224]	; (8001f40 <VL53L5CX_Probe+0xf0>)
 8001e5e:	60fb      	str	r3, [r7, #12]
  IOCtx.DeInit      = VL53L5A1_I2C_DeInit;
 8001e60:	4b38      	ldr	r3, [pc, #224]	; (8001f44 <VL53L5CX_Probe+0xf4>)
 8001e62:	613b      	str	r3, [r7, #16]
  IOCtx.WriteReg    = VL53L5A1_I2C_WriteReg;
 8001e64:	4b38      	ldr	r3, [pc, #224]	; (8001f48 <VL53L5CX_Probe+0xf8>)
 8001e66:	61bb      	str	r3, [r7, #24]
  IOCtx.ReadReg     = VL53L5A1_I2C_ReadReg;
 8001e68:	4b38      	ldr	r3, [pc, #224]	; (8001f4c <VL53L5CX_Probe+0xfc>)
 8001e6a:	61fb      	str	r3, [r7, #28]
  IOCtx.GetTick     = VL53L5A1_GetTick;
 8001e6c:	4b38      	ldr	r3, [pc, #224]	; (8001f50 <VL53L5CX_Probe+0x100>)
 8001e6e:	623b      	str	r3, [r7, #32]

  if (VL53L5CX_RegisterBusIO(&(VL53L5CXObj[Instance]), &IOCtx) != VL53L5CX_OK)
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	f640 1254 	movw	r2, #2388	; 0x954
 8001e76:	fb02 f303 	mul.w	r3, r2, r3
 8001e7a:	4a36      	ldr	r2, [pc, #216]	; (8001f54 <VL53L5CX_Probe+0x104>)
 8001e7c:	4413      	add	r3, r2
 8001e7e:	f107 020c 	add.w	r2, r7, #12
 8001e82:	4611      	mov	r1, r2
 8001e84:	4618      	mov	r0, r3
 8001e86:	f002 fff8 	bl	8004e7a <VL53L5CX_RegisterBusIO>
 8001e8a:	4603      	mov	r3, r0
 8001e8c:	2b00      	cmp	r3, #0
 8001e8e:	d003      	beq.n	8001e98 <VL53L5CX_Probe+0x48>
  {
    ret = BSP_ERROR_COMPONENT_FAILURE;
 8001e90:	f06f 0304 	mvn.w	r3, #4
 8001e94:	627b      	str	r3, [r7, #36]	; 0x24
 8001e96:	e04d      	b.n	8001f34 <VL53L5CX_Probe+0xe4>
  }
  else
  {
    VL53L5A1_RANGING_SENSOR_Drv = (RANGING_SENSOR_Drv_t *) &VL53L5CX_RANGING_SENSOR_Driver;
 8001e98:	4b2f      	ldr	r3, [pc, #188]	; (8001f58 <VL53L5CX_Probe+0x108>)
 8001e9a:	4a30      	ldr	r2, [pc, #192]	; (8001f5c <VL53L5CX_Probe+0x10c>)
 8001e9c:	601a      	str	r2, [r3, #0]
    VL53L5A1_RANGING_SENSOR_CompObj[Instance] = &(VL53L5CXObj[Instance]);
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	f640 1254 	movw	r2, #2388	; 0x954
 8001ea4:	fb02 f303 	mul.w	r3, r2, r3
 8001ea8:	4a2a      	ldr	r2, [pc, #168]	; (8001f54 <VL53L5CX_Probe+0x104>)
 8001eaa:	441a      	add	r2, r3
 8001eac:	492c      	ldr	r1, [pc, #176]	; (8001f60 <VL53L5CX_Probe+0x110>)
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

    if (VL53L5CX_ReadID(&(VL53L5CXObj[Instance]), &id) != VL53L5CX_OK)
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	f640 1254 	movw	r2, #2388	; 0x954
 8001eba:	fb02 f303 	mul.w	r3, r2, r3
 8001ebe:	4a25      	ldr	r2, [pc, #148]	; (8001f54 <VL53L5CX_Probe+0x104>)
 8001ec0:	4413      	add	r3, r2
 8001ec2:	f107 0208 	add.w	r2, r7, #8
 8001ec6:	4611      	mov	r1, r2
 8001ec8:	4618      	mov	r0, r3
 8001eca:	f003 f886 	bl	8004fda <VL53L5CX_ReadID>
 8001ece:	4603      	mov	r3, r0
 8001ed0:	2b00      	cmp	r3, #0
 8001ed2:	d003      	beq.n	8001edc <VL53L5CX_Probe+0x8c>
    {
      ret = BSP_ERROR_COMPONENT_FAILURE;
 8001ed4:	f06f 0304 	mvn.w	r3, #4
 8001ed8:	627b      	str	r3, [r7, #36]	; 0x24
 8001eda:	e02b      	b.n	8001f34 <VL53L5CX_Probe+0xe4>
    }
    else if (id != VL53L5CX_ID)
 8001edc:	68bb      	ldr	r3, [r7, #8]
 8001ede:	f24f 0202 	movw	r2, #61442	; 0xf002
 8001ee2:	4293      	cmp	r3, r2
 8001ee4:	d003      	beq.n	8001eee <VL53L5CX_Probe+0x9e>
    {
      ret = BSP_ERROR_UNKNOWN_COMPONENT;
 8001ee6:	f06f 0306 	mvn.w	r3, #6
 8001eea:	627b      	str	r3, [r7, #36]	; 0x24
 8001eec:	e022      	b.n	8001f34 <VL53L5CX_Probe+0xe4>
    }
    else if (VL53L5A1_RANGING_SENSOR_Drv->Init(VL53L5A1_RANGING_SENSOR_CompObj[Instance]) != VL53L5CX_OK)
 8001eee:	4b1a      	ldr	r3, [pc, #104]	; (8001f58 <VL53L5CX_Probe+0x108>)
 8001ef0:	681b      	ldr	r3, [r3, #0]
 8001ef2:	681b      	ldr	r3, [r3, #0]
 8001ef4:	491a      	ldr	r1, [pc, #104]	; (8001f60 <VL53L5CX_Probe+0x110>)
 8001ef6:	687a      	ldr	r2, [r7, #4]
 8001ef8:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8001efc:	4610      	mov	r0, r2
 8001efe:	4798      	blx	r3
 8001f00:	4603      	mov	r3, r0
 8001f02:	2b00      	cmp	r3, #0
 8001f04:	d003      	beq.n	8001f0e <VL53L5CX_Probe+0xbe>
    {
      ret = BSP_ERROR_COMPONENT_FAILURE;
 8001f06:	f06f 0304 	mvn.w	r3, #4
 8001f0a:	627b      	str	r3, [r7, #36]	; 0x24
 8001f0c:	e012      	b.n	8001f34 <VL53L5CX_Probe+0xe4>
    }
    else if (VL53L5A1_RANGING_SENSOR_Drv->GetCapabilities(VL53L5A1_RANGING_SENSOR_CompObj[Instance],
 8001f0e:	4b12      	ldr	r3, [pc, #72]	; (8001f58 <VL53L5CX_Probe+0x108>)
 8001f10:	681b      	ldr	r3, [r3, #0]
 8001f12:	68db      	ldr	r3, [r3, #12]
 8001f14:	4912      	ldr	r1, [pc, #72]	; (8001f60 <VL53L5CX_Probe+0x110>)
 8001f16:	687a      	ldr	r2, [r7, #4]
 8001f18:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8001f1c:	4911      	ldr	r1, [pc, #68]	; (8001f64 <VL53L5CX_Probe+0x114>)
 8001f1e:	4610      	mov	r0, r2
 8001f20:	4798      	blx	r3
 8001f22:	4603      	mov	r3, r0
 8001f24:	2b00      	cmp	r3, #0
 8001f26:	d003      	beq.n	8001f30 <VL53L5CX_Probe+0xe0>
                                                          &VL53L5A1_RANGING_SENSOR_Cap) != VL53L5CX_OK)
    {
      ret = BSP_ERROR_COMPONENT_FAILURE;
 8001f28:	f06f 0304 	mvn.w	r3, #4
 8001f2c:	627b      	str	r3, [r7, #36]	; 0x24
 8001f2e:	e001      	b.n	8001f34 <VL53L5CX_Probe+0xe4>
    }
    else
    {
      ret = BSP_ERROR_NONE;
 8001f30:	2300      	movs	r3, #0
 8001f32:	627b      	str	r3, [r7, #36]	; 0x24
    }
  }

  return ret;
 8001f34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8001f36:	4618      	mov	r0, r3
 8001f38:	3728      	adds	r7, #40	; 0x28
 8001f3a:	46bd      	mov	sp, r7
 8001f3c:	bd80      	pop	{r7, pc}
 8001f3e:	bf00      	nop
 8001f40:	0800152d 	.word	0x0800152d
 8001f44:	08001591 	.word	0x08001591
 8001f48:	080015e1 	.word	0x080015e1
 8001f4c:	08001645 	.word	0x08001645
 8001f50:	080016a9 	.word	0x080016a9
 8001f54:	200001d4 	.word	0x200001d4
 8001f58:	200001c0 	.word	0x200001c0
 8001f5c:	20000004 	.word	0x20000004
 8001f60:	200001b4 	.word	0x200001b4
 8001f64:	200001c4 	.word	0x200001c4

08001f68 <_vl53l5cx_poll_for_answer>:
		uint8_t					size,
		uint8_t					pos,
		uint16_t				address,
		uint8_t					mask,
		uint8_t					expected_value)
{
 8001f68:	b580      	push	{r7, lr}
 8001f6a:	b084      	sub	sp, #16
 8001f6c:	af00      	add	r7, sp, #0
 8001f6e:	6078      	str	r0, [r7, #4]
 8001f70:	4608      	mov	r0, r1
 8001f72:	4611      	mov	r1, r2
 8001f74:	461a      	mov	r2, r3
 8001f76:	4603      	mov	r3, r0
 8001f78:	70fb      	strb	r3, [r7, #3]
 8001f7a:	460b      	mov	r3, r1
 8001f7c:	70bb      	strb	r3, [r7, #2]
 8001f7e:	4613      	mov	r3, r2
 8001f80:	803b      	strh	r3, [r7, #0]
	uint8_t status = VL53L5CX_STATUS_OK;
 8001f82:	2300      	movs	r3, #0
 8001f84:	73fb      	strb	r3, [r7, #15]
	uint8_t timeout = 0;
 8001f86:	2300      	movs	r3, #0
 8001f88:	73bb      	strb	r3, [r7, #14]

	do {
		status |= RdMulti(&(p_dev->platform), address,
 8001f8a:	6878      	ldr	r0, [r7, #4]
				p_dev->temp_buffer, size);
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	f503 62a2 	add.w	r2, r3, #1296	; 0x510
		status |= RdMulti(&(p_dev->platform), address,
 8001f92:	78fb      	ldrb	r3, [r7, #3]
 8001f94:	8839      	ldrh	r1, [r7, #0]
 8001f96:	f002 ff09 	bl	8004dac <RdMulti>
 8001f9a:	4603      	mov	r3, r0
 8001f9c:	461a      	mov	r2, r3
 8001f9e:	7bfb      	ldrb	r3, [r7, #15]
 8001fa0:	4313      	orrs	r3, r2
 8001fa2:	73fb      	strb	r3, [r7, #15]
		status |= WaitMs(&(p_dev->platform), 10);
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	210a      	movs	r1, #10
 8001fa8:	4618      	mov	r0, r3
 8001faa:	f002 ff4c 	bl	8004e46 <WaitMs>
 8001fae:	4603      	mov	r3, r0
 8001fb0:	461a      	mov	r2, r3
 8001fb2:	7bfb      	ldrb	r3, [r7, #15]
 8001fb4:	4313      	orrs	r3, r2
 8001fb6:	73fb      	strb	r3, [r7, #15]

		if(timeout >= (uint8_t)200)	/* 2s timeout */
 8001fb8:	7bbb      	ldrb	r3, [r7, #14]
 8001fba:	2bc7      	cmp	r3, #199	; 0xc7
 8001fbc:	d904      	bls.n	8001fc8 <_vl53l5cx_poll_for_answer+0x60>
		{
			status |= (uint8_t)VL53L5CX_STATUS_TIMEOUT_ERROR;
 8001fbe:	7bfb      	ldrb	r3, [r7, #15]
 8001fc0:	f043 0301 	orr.w	r3, r3, #1
 8001fc4:	73fb      	strb	r3, [r7, #15]
			break;
 8001fc6:	e01a      	b.n	8001ffe <_vl53l5cx_poll_for_answer+0x96>
		}else if((size >= (uint8_t)4) 
 8001fc8:	78fb      	ldrb	r3, [r7, #3]
 8001fca:	2b03      	cmp	r3, #3
 8001fcc:	d909      	bls.n	8001fe2 <_vl53l5cx_poll_for_answer+0x7a>
                         && (p_dev->temp_buffer[2] >= (uint8_t)0x7f))
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	f893 3512 	ldrb.w	r3, [r3, #1298]	; 0x512
 8001fd4:	2b7e      	cmp	r3, #126	; 0x7e
 8001fd6:	d904      	bls.n	8001fe2 <_vl53l5cx_poll_for_answer+0x7a>
		{
			status |= VL53L5CX_MCU_ERROR;
 8001fd8:	7bfb      	ldrb	r3, [r7, #15]
 8001fda:	f043 0342 	orr.w	r3, r3, #66	; 0x42
 8001fde:	73fb      	strb	r3, [r7, #15]
			break;
 8001fe0:	e00d      	b.n	8001ffe <_vl53l5cx_poll_for_answer+0x96>
		}
		else
		{
			timeout++;
 8001fe2:	7bbb      	ldrb	r3, [r7, #14]
 8001fe4:	3301      	adds	r3, #1
 8001fe6:	73bb      	strb	r3, [r7, #14]
		}
	}while ((p_dev->temp_buffer[pos] & mask) != expected_value);
 8001fe8:	78bb      	ldrb	r3, [r7, #2]
 8001fea:	687a      	ldr	r2, [r7, #4]
 8001fec:	4413      	add	r3, r2
 8001fee:	f893 2510 	ldrb.w	r2, [r3, #1296]	; 0x510
 8001ff2:	7e3b      	ldrb	r3, [r7, #24]
 8001ff4:	4013      	ands	r3, r2
 8001ff6:	b2db      	uxtb	r3, r3
 8001ff8:	7f3a      	ldrb	r2, [r7, #28]
 8001ffa:	429a      	cmp	r2, r3
 8001ffc:	d1c5      	bne.n	8001f8a <_vl53l5cx_poll_for_answer+0x22>

	return status;
 8001ffe:	7bfb      	ldrb	r3, [r7, #15]
}
 8002000:	4618      	mov	r0, r3
 8002002:	3710      	adds	r7, #16
 8002004:	46bd      	mov	sp, r7
 8002006:	bd80      	pop	{r7, pc}

08002008 <_vl53l5cx_poll_for_mcu_boot>:
 * Inner function, not available outside this file. This function is used to
 * wait for the MCU to boot.
 */
static uint8_t _vl53l5cx_poll_for_mcu_boot(
              VL53L5CX_Configuration      *p_dev)
{
 8002008:	b580      	push	{r7, lr}
 800200a:	b084      	sub	sp, #16
 800200c:	af00      	add	r7, sp, #0
 800200e:	6078      	str	r0, [r7, #4]
   uint8_t go2_status0, go2_status1, status = VL53L5CX_STATUS_OK;
 8002010:	2300      	movs	r3, #0
 8002012:	73fb      	strb	r3, [r7, #15]
   uint16_t timeout = 0;
 8002014:	2300      	movs	r3, #0
 8002016:	81bb      	strh	r3, [r7, #12]

   do {
		status |= RdByte(&(p_dev->platform), 0x06, &go2_status0);
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	f107 020b 	add.w	r2, r7, #11
 800201e:	2106      	movs	r1, #6
 8002020:	4618      	mov	r0, r3
 8002022:	f002 fe81 	bl	8004d28 <RdByte>
 8002026:	4603      	mov	r3, r0
 8002028:	461a      	mov	r2, r3
 800202a:	7bfb      	ldrb	r3, [r7, #15]
 800202c:	4313      	orrs	r3, r2
 800202e:	73fb      	strb	r3, [r7, #15]
		if((go2_status0 & (uint8_t)0x80) != (uint8_t)0){
 8002030:	7afb      	ldrb	r3, [r7, #11]
 8002032:	b25b      	sxtb	r3, r3
 8002034:	2b00      	cmp	r3, #0
 8002036:	da10      	bge.n	800205a <_vl53l5cx_poll_for_mcu_boot+0x52>
			status |= RdByte(&(p_dev->platform), 0x07, &go2_status1);
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	f107 020a 	add.w	r2, r7, #10
 800203e:	2107      	movs	r1, #7
 8002040:	4618      	mov	r0, r3
 8002042:	f002 fe71 	bl	8004d28 <RdByte>
 8002046:	4603      	mov	r3, r0
 8002048:	461a      	mov	r2, r3
 800204a:	7bfb      	ldrb	r3, [r7, #15]
 800204c:	4313      	orrs	r3, r2
 800204e:	73fb      	strb	r3, [r7, #15]
			status |= go2_status1;
 8002050:	7aba      	ldrb	r2, [r7, #10]
 8002052:	7bfb      	ldrb	r3, [r7, #15]
 8002054:	4313      	orrs	r3, r2
 8002056:	73fb      	strb	r3, [r7, #15]
			break;
 8002058:	e012      	b.n	8002080 <_vl53l5cx_poll_for_mcu_boot+0x78>
		}
		(void)WaitMs(&(p_dev->platform), 1);
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	2101      	movs	r1, #1
 800205e:	4618      	mov	r0, r3
 8002060:	f002 fef1 	bl	8004e46 <WaitMs>
		timeout++;
 8002064:	89bb      	ldrh	r3, [r7, #12]
 8002066:	3301      	adds	r3, #1
 8002068:	81bb      	strh	r3, [r7, #12]

		if((go2_status0 & (uint8_t)0x1) != (uint8_t)0){
 800206a:	7afb      	ldrb	r3, [r7, #11]
 800206c:	f003 0301 	and.w	r3, r3, #1
 8002070:	2b00      	cmp	r3, #0
 8002072:	d104      	bne.n	800207e <_vl53l5cx_poll_for_mcu_boot+0x76>
			break;
		}

	}while (timeout < (uint16_t)500);
 8002074:	89bb      	ldrh	r3, [r7, #12]
 8002076:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 800207a:	d3cd      	bcc.n	8002018 <_vl53l5cx_poll_for_mcu_boot+0x10>
 800207c:	e000      	b.n	8002080 <_vl53l5cx_poll_for_mcu_boot+0x78>
			break;
 800207e:	bf00      	nop

   return status;
 8002080:	7bfb      	ldrb	r3, [r7, #15]
}
 8002082:	4618      	mov	r0, r3
 8002084:	3710      	adds	r7, #16
 8002086:	46bd      	mov	sp, r7
 8002088:	bd80      	pop	{r7, pc}
	...

0800208c <_vl53l5cx_send_offset_data>:
 */

static uint8_t _vl53l5cx_send_offset_data(
		VL53L5CX_Configuration		*p_dev,
		uint8_t						resolution)
{
 800208c:	b580      	push	{r7, lr}
 800208e:	b0ea      	sub	sp, #424	; 0x1a8
 8002090:	af02      	add	r7, sp, #8
 8002092:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 8002096:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 800209a:	6018      	str	r0, [r3, #0]
 800209c:	460a      	mov	r2, r1
 800209e:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 80020a2:	f2a3 139d 	subw	r3, r3, #413	; 0x19d
 80020a6:	701a      	strb	r2, [r3, #0]
	uint8_t status = VL53L5CX_STATUS_OK;
 80020a8:	2300      	movs	r3, #0
 80020aa:	f887 319b 	strb.w	r3, [r7, #411]	; 0x19b
	uint32_t signal_grid[64];
	int16_t range_grid[64];
	uint8_t dss_4x4[] = {0x0F, 0x04, 0x04, 0x00, 0x08, 0x10, 0x10, 0x07};
 80020ae:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 80020b2:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 80020b6:	4ad9      	ldr	r2, [pc, #868]	; (800241c <_vl53l5cx_send_offset_data+0x390>)
 80020b8:	e892 0003 	ldmia.w	r2, {r0, r1}
 80020bc:	e883 0003 	stmia.w	r3, {r0, r1}
	uint8_t footer[] = {0x00, 0x00, 0x00, 0x0F, 0x03, 0x01, 0x01, 0xE4};
 80020c0:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 80020c4:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 80020c8:	4ad5      	ldr	r2, [pc, #852]	; (8002420 <_vl53l5cx_send_offset_data+0x394>)
 80020ca:	e892 0003 	ldmia.w	r2, {r0, r1}
 80020ce:	e883 0003 	stmia.w	r3, {r0, r1}
	int8_t i, j;
	uint16_t k;

	(void)memcpy(p_dev->temp_buffer,
 80020d2:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 80020d6:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 80020da:	681b      	ldr	r3, [r3, #0]
 80020dc:	f503 60a2 	add.w	r0, r3, #1296	; 0x510
               p_dev->offset_data, VL53L5CX_OFFSET_BUFFER_SIZE);
 80020e0:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 80020e4:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 80020e8:	681b      	ldr	r3, [r3, #0]
 80020ea:	3320      	adds	r3, #32
	(void)memcpy(p_dev->temp_buffer,
 80020ec:	f44f 72f4 	mov.w	r2, #488	; 0x1e8
 80020f0:	4619      	mov	r1, r3
 80020f2:	f008 f951 	bl	800a398 <memcpy>

	/* Data extrapolation is required for 4X4 offset */
	if(resolution == (uint8_t)VL53L5CX_RESOLUTION_4X4){
 80020f6:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 80020fa:	f2a3 139d 	subw	r3, r3, #413	; 0x19d
 80020fe:	781b      	ldrb	r3, [r3, #0]
 8002100:	2b10      	cmp	r3, #16
 8002102:	f040 8122 	bne.w	800234a <_vl53l5cx_send_offset_data+0x2be>
		(void)memcpy(&(p_dev->temp_buffer[0x10]), dss_4x4, sizeof(dss_4x4));
 8002106:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 800210a:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 800210e:	681b      	ldr	r3, [r3, #0]
 8002110:	f503 62a4 	add.w	r2, r3, #1312	; 0x520
 8002114:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 8002118:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 800211c:	cb03      	ldmia	r3!, {r0, r1}
 800211e:	6010      	str	r0, [r2, #0]
 8002120:	6051      	str	r1, [r2, #4]
		SwapBuffer(p_dev->temp_buffer, VL53L5CX_OFFSET_BUFFER_SIZE);
 8002122:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 8002126:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 800212a:	681b      	ldr	r3, [r3, #0]
 800212c:	f503 63a2 	add.w	r3, r3, #1296	; 0x510
 8002130:	f44f 71f4 	mov.w	r1, #488	; 0x1e8
 8002134:	4618      	mov	r0, r3
 8002136:	f002 fe50 	bl	8004dda <SwapBuffer>
		(void)memcpy(signal_grid,&(p_dev->temp_buffer[0x3C]),
 800213a:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 800213e:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 8002142:	681b      	ldr	r3, [r3, #0]
 8002144:	f203 514c 	addw	r1, r3, #1356	; 0x54c
 8002148:	f107 0398 	add.w	r3, r7, #152	; 0x98
 800214c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002150:	4618      	mov	r0, r3
 8002152:	f008 f921 	bl	800a398 <memcpy>
			sizeof(signal_grid));
		(void)memcpy(range_grid,&(p_dev->temp_buffer[0x140]),
 8002156:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 800215a:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 800215e:	681b      	ldr	r3, [r3, #0]
 8002160:	f503 61ca 	add.w	r1, r3, #1616	; 0x650
 8002164:	f107 0318 	add.w	r3, r7, #24
 8002168:	2280      	movs	r2, #128	; 0x80
 800216a:	4618      	mov	r0, r3
 800216c:	f008 f914 	bl	800a398 <memcpy>
			sizeof(range_grid));

		for (j = 0; j < (int8_t)4; j++)
 8002170:	2300      	movs	r3, #0
 8002172:	f887 319e 	strb.w	r3, [r7, #414]	; 0x19e
 8002176:	e0ac      	b.n	80022d2 <_vl53l5cx_send_offset_data+0x246>
		{
			for (i = 0; i < (int8_t)4 ; i++)
 8002178:	2300      	movs	r3, #0
 800217a:	f887 319f 	strb.w	r3, [r7, #415]	; 0x19f
 800217e:	e09c      	b.n	80022ba <_vl53l5cx_send_offset_data+0x22e>
			{
				signal_grid[i+(4*j)] =
				(signal_grid[(2*i)+(16*j)+ (int8_t)0]
 8002180:	f997 219f 	ldrsb.w	r2, [r7, #415]	; 0x19f
 8002184:	f997 319e 	ldrsb.w	r3, [r7, #414]	; 0x19e
 8002188:	00db      	lsls	r3, r3, #3
 800218a:	4413      	add	r3, r2
 800218c:	005a      	lsls	r2, r3, #1
 800218e:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 8002192:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8002196:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
				+ signal_grid[(2*i)+(16*j)+(int8_t)1]
 800219a:	f997 119f 	ldrsb.w	r1, [r7, #415]	; 0x19f
 800219e:	f997 319e 	ldrsb.w	r3, [r7, #414]	; 0x19e
 80021a2:	00db      	lsls	r3, r3, #3
 80021a4:	440b      	add	r3, r1
 80021a6:	005b      	lsls	r3, r3, #1
 80021a8:	1c59      	adds	r1, r3, #1
 80021aa:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 80021ae:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80021b2:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80021b6:	441a      	add	r2, r3
				+ signal_grid[(2*i)+(16*j)+(int8_t)8]
 80021b8:	f997 119f 	ldrsb.w	r1, [r7, #415]	; 0x19f
 80021bc:	f997 319e 	ldrsb.w	r3, [r7, #414]	; 0x19e
 80021c0:	00db      	lsls	r3, r3, #3
 80021c2:	440b      	add	r3, r1
 80021c4:	3304      	adds	r3, #4
 80021c6:	0059      	lsls	r1, r3, #1
 80021c8:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 80021cc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80021d0:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80021d4:	441a      	add	r2, r3
				+ signal_grid[(2*i)+(16*j)+(int8_t)9])
 80021d6:	f997 119f 	ldrsb.w	r1, [r7, #415]	; 0x19f
 80021da:	f997 319e 	ldrsb.w	r3, [r7, #414]	; 0x19e
 80021de:	00db      	lsls	r3, r3, #3
 80021e0:	440b      	add	r3, r1
 80021e2:	005b      	lsls	r3, r3, #1
 80021e4:	f103 0109 	add.w	r1, r3, #9
 80021e8:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 80021ec:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80021f0:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80021f4:	4413      	add	r3, r2
				signal_grid[i+(4*j)] =
 80021f6:	f997 119f 	ldrsb.w	r1, [r7, #415]	; 0x19f
 80021fa:	f997 219e 	ldrsb.w	r2, [r7, #414]	; 0x19e
 80021fe:	0092      	lsls	r2, r2, #2
 8002200:	440a      	add	r2, r1
                                  /(uint32_t)4;
 8002202:	0899      	lsrs	r1, r3, #2
				signal_grid[i+(4*j)] =
 8002204:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 8002208:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800220c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
				range_grid[i+(4*j)] =
				(range_grid[(2*i)+(16*j)]
 8002210:	f997 219f 	ldrsb.w	r2, [r7, #415]	; 0x19f
 8002214:	f997 319e 	ldrsb.w	r3, [r7, #414]	; 0x19e
 8002218:	00db      	lsls	r3, r3, #3
 800221a:	4413      	add	r3, r2
 800221c:	005a      	lsls	r2, r3, #1
 800221e:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 8002222:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 8002226:	f933 3012 	ldrsh.w	r3, [r3, r2, lsl #1]
 800222a:	4619      	mov	r1, r3
				+ range_grid[(2*i)+(16*j)+1]
 800222c:	f997 219f 	ldrsb.w	r2, [r7, #415]	; 0x19f
 8002230:	f997 319e 	ldrsb.w	r3, [r7, #414]	; 0x19e
 8002234:	00db      	lsls	r3, r3, #3
 8002236:	4413      	add	r3, r2
 8002238:	005b      	lsls	r3, r3, #1
 800223a:	1c5a      	adds	r2, r3, #1
 800223c:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 8002240:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 8002244:	f933 3012 	ldrsh.w	r3, [r3, r2, lsl #1]
 8002248:	440b      	add	r3, r1
				+ range_grid[(2*i)+(16*j)+8]
 800224a:	f997 119f 	ldrsb.w	r1, [r7, #415]	; 0x19f
 800224e:	f997 219e 	ldrsb.w	r2, [r7, #414]	; 0x19e
 8002252:	00d2      	lsls	r2, r2, #3
 8002254:	440a      	add	r2, r1
 8002256:	3204      	adds	r2, #4
 8002258:	0051      	lsls	r1, r2, #1
 800225a:	f507 72d0 	add.w	r2, r7, #416	; 0x1a0
 800225e:	f5a2 72c4 	sub.w	r2, r2, #392	; 0x188
 8002262:	f932 2011 	ldrsh.w	r2, [r2, r1, lsl #1]
 8002266:	4413      	add	r3, r2
				+ range_grid[(2*i)+(16*j)+9])
 8002268:	f997 119f 	ldrsb.w	r1, [r7, #415]	; 0x19f
 800226c:	f997 219e 	ldrsb.w	r2, [r7, #414]	; 0x19e
 8002270:	00d2      	lsls	r2, r2, #3
 8002272:	440a      	add	r2, r1
 8002274:	0052      	lsls	r2, r2, #1
 8002276:	f102 0109 	add.w	r1, r2, #9
 800227a:	f507 72d0 	add.w	r2, r7, #416	; 0x1a0
 800227e:	f5a2 72c4 	sub.w	r2, r2, #392	; 0x188
 8002282:	f932 2011 	ldrsh.w	r2, [r2, r1, lsl #1]
 8002286:	4413      	add	r3, r2
                                  /(int16_t)4;
 8002288:	2b00      	cmp	r3, #0
 800228a:	da00      	bge.n	800228e <_vl53l5cx_send_offset_data+0x202>
 800228c:	3303      	adds	r3, #3
 800228e:	109b      	asrs	r3, r3, #2
 8002290:	4619      	mov	r1, r3
				range_grid[i+(4*j)] =
 8002292:	f997 219f 	ldrsb.w	r2, [r7, #415]	; 0x19f
 8002296:	f997 319e 	ldrsb.w	r3, [r7, #414]	; 0x19e
 800229a:	009b      	lsls	r3, r3, #2
 800229c:	441a      	add	r2, r3
 800229e:	b209      	sxth	r1, r1
 80022a0:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 80022a4:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 80022a8:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
			for (i = 0; i < (int8_t)4 ; i++)
 80022ac:	f997 319f 	ldrsb.w	r3, [r7, #415]	; 0x19f
 80022b0:	b2db      	uxtb	r3, r3
 80022b2:	3301      	adds	r3, #1
 80022b4:	b2db      	uxtb	r3, r3
 80022b6:	f887 319f 	strb.w	r3, [r7, #415]	; 0x19f
 80022ba:	f997 319f 	ldrsb.w	r3, [r7, #415]	; 0x19f
 80022be:	2b03      	cmp	r3, #3
 80022c0:	f77f af5e 	ble.w	8002180 <_vl53l5cx_send_offset_data+0xf4>
		for (j = 0; j < (int8_t)4; j++)
 80022c4:	f997 319e 	ldrsb.w	r3, [r7, #414]	; 0x19e
 80022c8:	b2db      	uxtb	r3, r3
 80022ca:	3301      	adds	r3, #1
 80022cc:	b2db      	uxtb	r3, r3
 80022ce:	f887 319e 	strb.w	r3, [r7, #414]	; 0x19e
 80022d2:	f997 319e 	ldrsb.w	r3, [r7, #414]	; 0x19e
 80022d6:	2b03      	cmp	r3, #3
 80022d8:	f77f af4e 	ble.w	8002178 <_vl53l5cx_send_offset_data+0xec>
			}
		}
	    (void)memset(&range_grid[0x10], 0, (uint16_t)96);
 80022dc:	f107 0318 	add.w	r3, r7, #24
 80022e0:	3320      	adds	r3, #32
 80022e2:	2260      	movs	r2, #96	; 0x60
 80022e4:	2100      	movs	r1, #0
 80022e6:	4618      	mov	r0, r3
 80022e8:	f007 ffdc 	bl	800a2a4 <memset>
	    (void)memset(&signal_grid[0x10], 0, (uint16_t)192);
 80022ec:	f107 0398 	add.w	r3, r7, #152	; 0x98
 80022f0:	3340      	adds	r3, #64	; 0x40
 80022f2:	22c0      	movs	r2, #192	; 0xc0
 80022f4:	2100      	movs	r1, #0
 80022f6:	4618      	mov	r0, r3
 80022f8:	f007 ffd4 	bl	800a2a4 <memset>
            (void)memcpy(&(p_dev->temp_buffer[0x3C]),
 80022fc:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 8002300:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 8002304:	681b      	ldr	r3, [r3, #0]
 8002306:	f203 534c 	addw	r3, r3, #1356	; 0x54c
 800230a:	f107 0198 	add.w	r1, r7, #152	; 0x98
 800230e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002312:	4618      	mov	r0, r3
 8002314:	f008 f840 	bl	800a398 <memcpy>
		signal_grid, sizeof(signal_grid));
            (void)memcpy(&(p_dev->temp_buffer[0x140]),
 8002318:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 800231c:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 8002320:	681b      	ldr	r3, [r3, #0]
 8002322:	f503 63ca 	add.w	r3, r3, #1616	; 0x650
 8002326:	f107 0118 	add.w	r1, r7, #24
 800232a:	2280      	movs	r2, #128	; 0x80
 800232c:	4618      	mov	r0, r3
 800232e:	f008 f833 	bl	800a398 <memcpy>
		range_grid, sizeof(range_grid));
            SwapBuffer(p_dev->temp_buffer, VL53L5CX_OFFSET_BUFFER_SIZE);
 8002332:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 8002336:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	f503 63a2 	add.w	r3, r3, #1296	; 0x510
 8002340:	f44f 71f4 	mov.w	r1, #488	; 0x1e8
 8002344:	4618      	mov	r0, r3
 8002346:	f002 fd48 	bl	8004dda <SwapBuffer>
	}

	for(k = 0; k < (VL53L5CX_OFFSET_BUFFER_SIZE - (uint16_t)4); k++)
 800234a:	2300      	movs	r3, #0
 800234c:	f8a7 319c 	strh.w	r3, [r7, #412]	; 0x19c
 8002350:	e01b      	b.n	800238a <_vl53l5cx_send_offset_data+0x2fe>
	{
		p_dev->temp_buffer[k] = p_dev->temp_buffer[k + (uint16_t)8];
 8002352:	f8b7 319c 	ldrh.w	r3, [r7, #412]	; 0x19c
 8002356:	f103 0208 	add.w	r2, r3, #8
 800235a:	f8b7 319c 	ldrh.w	r3, [r7, #412]	; 0x19c
 800235e:	f507 71d0 	add.w	r1, r7, #416	; 0x1a0
 8002362:	f5a1 71ce 	sub.w	r1, r1, #412	; 0x19c
 8002366:	6809      	ldr	r1, [r1, #0]
 8002368:	440a      	add	r2, r1
 800236a:	f892 1510 	ldrb.w	r1, [r2, #1296]	; 0x510
 800236e:	f507 72d0 	add.w	r2, r7, #416	; 0x1a0
 8002372:	f5a2 72ce 	sub.w	r2, r2, #412	; 0x19c
 8002376:	6812      	ldr	r2, [r2, #0]
 8002378:	4413      	add	r3, r2
 800237a:	460a      	mov	r2, r1
 800237c:	f883 2510 	strb.w	r2, [r3, #1296]	; 0x510
	for(k = 0; k < (VL53L5CX_OFFSET_BUFFER_SIZE - (uint16_t)4); k++)
 8002380:	f8b7 319c 	ldrh.w	r3, [r7, #412]	; 0x19c
 8002384:	3301      	adds	r3, #1
 8002386:	f8a7 319c 	strh.w	r3, [r7, #412]	; 0x19c
 800238a:	f8b7 319c 	ldrh.w	r3, [r7, #412]	; 0x19c
 800238e:	f5b3 7ff2 	cmp.w	r3, #484	; 0x1e4
 8002392:	d3de      	bcc.n	8002352 <_vl53l5cx_send_offset_data+0x2c6>
	}

	(void)memcpy(&(p_dev->temp_buffer[0x1E0]), footer, 8);
 8002394:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 8002398:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 800239c:	681b      	ldr	r3, [r3, #0]
 800239e:	f503 62de 	add.w	r2, r3, #1776	; 0x6f0
 80023a2:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 80023a6:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 80023aa:	cb03      	ldmia	r3!, {r0, r1}
 80023ac:	6010      	str	r0, [r2, #0]
 80023ae:	6051      	str	r1, [r2, #4]
	status |= WrMulti(&(p_dev->platform), 0x2e18, p_dev->temp_buffer,
 80023b0:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 80023b4:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 80023b8:	6818      	ldr	r0, [r3, #0]
 80023ba:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 80023be:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 80023c2:	681b      	ldr	r3, [r3, #0]
 80023c4:	f503 62a2 	add.w	r2, r3, #1296	; 0x510
 80023c8:	f44f 73f4 	mov.w	r3, #488	; 0x1e8
 80023cc:	f642 6118 	movw	r1, #11800	; 0x2e18
 80023d0:	f002 fcd5 	bl	8004d7e <WrMulti>
 80023d4:	4603      	mov	r3, r0
 80023d6:	461a      	mov	r2, r3
 80023d8:	f897 319b 	ldrb.w	r3, [r7, #411]	; 0x19b
 80023dc:	4313      	orrs	r3, r2
 80023de:	f887 319b 	strb.w	r3, [r7, #411]	; 0x19b
		VL53L5CX_OFFSET_BUFFER_SIZE);
	status |=_vl53l5cx_poll_for_answer(p_dev, 4, 1,
 80023e2:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 80023e6:	f5a3 70ce 	sub.w	r0, r3, #412	; 0x19c
 80023ea:	2303      	movs	r3, #3
 80023ec:	9301      	str	r3, [sp, #4]
 80023ee:	23ff      	movs	r3, #255	; 0xff
 80023f0:	9300      	str	r3, [sp, #0]
 80023f2:	f44f 5330 	mov.w	r3, #11264	; 0x2c00
 80023f6:	2201      	movs	r2, #1
 80023f8:	2104      	movs	r1, #4
 80023fa:	6800      	ldr	r0, [r0, #0]
 80023fc:	f7ff fdb4 	bl	8001f68 <_vl53l5cx_poll_for_answer>
 8002400:	4603      	mov	r3, r0
 8002402:	461a      	mov	r2, r3
 8002404:	f897 319b 	ldrb.w	r3, [r7, #411]	; 0x19b
 8002408:	4313      	orrs	r3, r2
 800240a:	f887 319b 	strb.w	r3, [r7, #411]	; 0x19b
		VL53L5CX_UI_CMD_STATUS, 0xff, 0x03);

	return status;
 800240e:	f897 319b 	ldrb.w	r3, [r7, #411]	; 0x19b
}
 8002412:	4618      	mov	r0, r3
 8002414:	f507 77d0 	add.w	r7, r7, #416	; 0x1a0
 8002418:	46bd      	mov	sp, r7
 800241a:	bd80      	pop	{r7, pc}
 800241c:	0800ae14 	.word	0x0800ae14
 8002420:	0800ae1c 	.word	0x0800ae1c

08002424 <_vl53l5cx_send_xtalk_data>:
 */

static uint8_t _vl53l5cx_send_xtalk_data(
		VL53L5CX_Configuration		*p_dev,
		uint8_t				resolution)
{
 8002424:	b580      	push	{r7, lr}
 8002426:	b0ca      	sub	sp, #296	; 0x128
 8002428:	af02      	add	r7, sp, #8
 800242a:	f507 7390 	add.w	r3, r7, #288	; 0x120
 800242e:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8002432:	6018      	str	r0, [r3, #0]
 8002434:	460a      	mov	r2, r1
 8002436:	f507 7390 	add.w	r3, r7, #288	; 0x120
 800243a:	f2a3 131d 	subw	r3, r3, #285	; 0x11d
 800243e:	701a      	strb	r2, [r3, #0]
	uint8_t status = VL53L5CX_STATUS_OK;
 8002440:	2300      	movs	r3, #0
 8002442:	f887 311d 	strb.w	r3, [r7, #285]	; 0x11d
	uint8_t res4x4[] = {0x0F, 0x04, 0x04, 0x17, 0x08, 0x10, 0x10, 0x07};
 8002446:	4a9a      	ldr	r2, [pc, #616]	; (80026b0 <_vl53l5cx_send_xtalk_data+0x28c>)
 8002448:	f507 738a 	add.w	r3, r7, #276	; 0x114
 800244c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8002450:	e883 0003 	stmia.w	r3, {r0, r1}
	uint8_t dss_4x4[] = {0x00, 0x78, 0x00, 0x08, 0x00, 0x00, 0x00, 0x08};
 8002454:	4a97      	ldr	r2, [pc, #604]	; (80026b4 <_vl53l5cx_send_xtalk_data+0x290>)
 8002456:	f507 7386 	add.w	r3, r7, #268	; 0x10c
 800245a:	e892 0003 	ldmia.w	r2, {r0, r1}
 800245e:	e883 0003 	stmia.w	r3, {r0, r1}
	uint8_t profile_4x4[] = {0xA0, 0xFC, 0x01, 0x00};
 8002462:	4b95      	ldr	r3, [pc, #596]	; (80026b8 <_vl53l5cx_send_xtalk_data+0x294>)
 8002464:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
	uint32_t signal_grid[64];
	int8_t i, j;

	(void)memcpy(p_dev->temp_buffer, &(p_dev->xtalk_data[0]),
 8002468:	f507 7390 	add.w	r3, r7, #288	; 0x120
 800246c:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8002470:	681b      	ldr	r3, [r3, #0]
 8002472:	f503 60a2 	add.w	r0, r3, #1296	; 0x510
 8002476:	f507 7390 	add.w	r3, r7, #288	; 0x120
 800247a:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8002484:	f44f 7242 	mov.w	r2, #776	; 0x308
 8002488:	4619      	mov	r1, r3
 800248a:	f007 ff85 	bl	800a398 <memcpy>
		VL53L5CX_XTALK_BUFFER_SIZE);

	/* Data extrapolation is required for 4X4 Xtalk */
	if(resolution == (uint8_t)VL53L5CX_RESOLUTION_4X4)
 800248e:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8002492:	f2a3 131d 	subw	r3, r3, #285	; 0x11d
 8002496:	781b      	ldrb	r3, [r3, #0]
 8002498:	2b10      	cmp	r3, #16
 800249a:	f040 80d2 	bne.w	8002642 <_vl53l5cx_send_xtalk_data+0x21e>
	{
		(void)memcpy(&(p_dev->temp_buffer[0x8]),
 800249e:	f507 7390 	add.w	r3, r7, #288	; 0x120
 80024a2:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	f503 63a3 	add.w	r3, r3, #1304	; 0x518
 80024ac:	461a      	mov	r2, r3
 80024ae:	f507 738a 	add.w	r3, r7, #276	; 0x114
 80024b2:	cb03      	ldmia	r3!, {r0, r1}
 80024b4:	6010      	str	r0, [r2, #0]
 80024b6:	6051      	str	r1, [r2, #4]
			res4x4, sizeof(res4x4));
		(void)memcpy(&(p_dev->temp_buffer[0x020]),
 80024b8:	f507 7390 	add.w	r3, r7, #288	; 0x120
 80024bc:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 80024c0:	681b      	ldr	r3, [r3, #0]
 80024c2:	f503 63a6 	add.w	r3, r3, #1328	; 0x530
 80024c6:	461a      	mov	r2, r3
 80024c8:	f507 7386 	add.w	r3, r7, #268	; 0x10c
 80024cc:	cb03      	ldmia	r3!, {r0, r1}
 80024ce:	6010      	str	r0, [r2, #0]
 80024d0:	6051      	str	r1, [r2, #4]
			dss_4x4, sizeof(dss_4x4));

		SwapBuffer(p_dev->temp_buffer, VL53L5CX_XTALK_BUFFER_SIZE);
 80024d2:	f507 7390 	add.w	r3, r7, #288	; 0x120
 80024d6:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 80024da:	681b      	ldr	r3, [r3, #0]
 80024dc:	f503 63a2 	add.w	r3, r3, #1296	; 0x510
 80024e0:	f44f 7142 	mov.w	r1, #776	; 0x308
 80024e4:	4618      	mov	r0, r3
 80024e6:	f002 fc78 	bl	8004dda <SwapBuffer>
		(void)memcpy(signal_grid, &(p_dev->temp_buffer[0x34]),
 80024ea:	f507 7390 	add.w	r3, r7, #288	; 0x120
 80024ee:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	f203 5144 	addw	r1, r3, #1348	; 0x544
 80024f8:	f107 0308 	add.w	r3, r7, #8
 80024fc:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002500:	4618      	mov	r0, r3
 8002502:	f007 ff49 	bl	800a398 <memcpy>
			sizeof(signal_grid));

		for (j = 0; j < (int8_t)4; j++)
 8002506:	2300      	movs	r3, #0
 8002508:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
 800250c:	e05d      	b.n	80025ca <_vl53l5cx_send_xtalk_data+0x1a6>
		{
			for (i = 0; i < (int8_t)4 ; i++)
 800250e:	2300      	movs	r3, #0
 8002510:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
 8002514:	e04e      	b.n	80025b4 <_vl53l5cx_send_xtalk_data+0x190>
			{
				signal_grid[i+(4*j)] =
				(signal_grid[(2*i)+(16*j)+0]
 8002516:	f997 211f 	ldrsb.w	r2, [r7, #287]	; 0x11f
 800251a:	f997 311e 	ldrsb.w	r3, [r7, #286]	; 0x11e
 800251e:	00db      	lsls	r3, r3, #3
 8002520:	4413      	add	r3, r2
 8002522:	005a      	lsls	r2, r3, #1
 8002524:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8002528:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 800252c:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
				+ signal_grid[(2*i)+(16*j)+1]
 8002530:	f997 111f 	ldrsb.w	r1, [r7, #287]	; 0x11f
 8002534:	f997 311e 	ldrsb.w	r3, [r7, #286]	; 0x11e
 8002538:	00db      	lsls	r3, r3, #3
 800253a:	440b      	add	r3, r1
 800253c:	005b      	lsls	r3, r3, #1
 800253e:	1c59      	adds	r1, r3, #1
 8002540:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8002544:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8002548:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800254c:	441a      	add	r2, r3
				+ signal_grid[(2*i)+(16*j)+8]
 800254e:	f997 111f 	ldrsb.w	r1, [r7, #287]	; 0x11f
 8002552:	f997 311e 	ldrsb.w	r3, [r7, #286]	; 0x11e
 8002556:	00db      	lsls	r3, r3, #3
 8002558:	440b      	add	r3, r1
 800255a:	3304      	adds	r3, #4
 800255c:	0059      	lsls	r1, r3, #1
 800255e:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8002562:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8002566:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800256a:	441a      	add	r2, r3
				+ signal_grid[(2*i)+(16*j)+9])/(uint32_t)4;
 800256c:	f997 111f 	ldrsb.w	r1, [r7, #287]	; 0x11f
 8002570:	f997 311e 	ldrsb.w	r3, [r7, #286]	; 0x11e
 8002574:	00db      	lsls	r3, r3, #3
 8002576:	440b      	add	r3, r1
 8002578:	005b      	lsls	r3, r3, #1
 800257a:	f103 0109 	add.w	r1, r3, #9
 800257e:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8002582:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8002586:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800258a:	4413      	add	r3, r2
				signal_grid[i+(4*j)] =
 800258c:	f997 111f 	ldrsb.w	r1, [r7, #287]	; 0x11f
 8002590:	f997 211e 	ldrsb.w	r2, [r7, #286]	; 0x11e
 8002594:	0092      	lsls	r2, r2, #2
 8002596:	440a      	add	r2, r1
				+ signal_grid[(2*i)+(16*j)+9])/(uint32_t)4;
 8002598:	0899      	lsrs	r1, r3, #2
				signal_grid[i+(4*j)] =
 800259a:	f507 7390 	add.w	r3, r7, #288	; 0x120
 800259e:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 80025a2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
			for (i = 0; i < (int8_t)4 ; i++)
 80025a6:	f997 311f 	ldrsb.w	r3, [r7, #287]	; 0x11f
 80025aa:	b2db      	uxtb	r3, r3
 80025ac:	3301      	adds	r3, #1
 80025ae:	b2db      	uxtb	r3, r3
 80025b0:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
 80025b4:	f997 311f 	ldrsb.w	r3, [r7, #287]	; 0x11f
 80025b8:	2b03      	cmp	r3, #3
 80025ba:	ddac      	ble.n	8002516 <_vl53l5cx_send_xtalk_data+0xf2>
		for (j = 0; j < (int8_t)4; j++)
 80025bc:	f997 311e 	ldrsb.w	r3, [r7, #286]	; 0x11e
 80025c0:	b2db      	uxtb	r3, r3
 80025c2:	3301      	adds	r3, #1
 80025c4:	b2db      	uxtb	r3, r3
 80025c6:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
 80025ca:	f997 311e 	ldrsb.w	r3, [r7, #286]	; 0x11e
 80025ce:	2b03      	cmp	r3, #3
 80025d0:	dd9d      	ble.n	800250e <_vl53l5cx_send_xtalk_data+0xea>
			}
		}
	    (void)memset(&signal_grid[0x10], 0, (uint32_t)192);
 80025d2:	f107 0308 	add.w	r3, r7, #8
 80025d6:	3340      	adds	r3, #64	; 0x40
 80025d8:	22c0      	movs	r2, #192	; 0xc0
 80025da:	2100      	movs	r1, #0
 80025dc:	4618      	mov	r0, r3
 80025de:	f007 fe61 	bl	800a2a4 <memset>
	    (void)memcpy(&(p_dev->temp_buffer[0x34]),
 80025e2:	f507 7390 	add.w	r3, r7, #288	; 0x120
 80025e6:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	f203 5344 	addw	r3, r3, #1348	; 0x544
 80025f0:	f107 0108 	add.w	r1, r7, #8
 80025f4:	f44f 7280 	mov.w	r2, #256	; 0x100
 80025f8:	4618      	mov	r0, r3
 80025fa:	f007 fecd 	bl	800a398 <memcpy>
                  signal_grid, sizeof(signal_grid));
	    SwapBuffer(p_dev->temp_buffer, VL53L5CX_XTALK_BUFFER_SIZE);
 80025fe:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8002602:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	f503 63a2 	add.w	r3, r3, #1296	; 0x510
 800260c:	f44f 7142 	mov.w	r1, #776	; 0x308
 8002610:	4618      	mov	r0, r3
 8002612:	f002 fbe2 	bl	8004dda <SwapBuffer>
	    (void)memcpy(&(p_dev->temp_buffer[0x134]),
 8002616:	f507 7390 	add.w	r3, r7, #288	; 0x120
 800261a:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	f203 6344 	addw	r3, r3, #1604	; 0x644
 8002624:	f8d7 2108 	ldr.w	r2, [r7, #264]	; 0x108
 8002628:	601a      	str	r2, [r3, #0]
	    profile_4x4, sizeof(profile_4x4));
	    (void)memset(&(p_dev->temp_buffer[0x078]),0 ,
 800262a:	f507 7390 	add.w	r3, r7, #288	; 0x120
 800262e:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	f503 63b1 	add.w	r3, r3, #1416	; 0x588
 8002638:	2204      	movs	r2, #4
 800263a:	2100      	movs	r1, #0
 800263c:	4618      	mov	r0, r3
 800263e:	f007 fe31 	bl	800a2a4 <memset>
                         (uint32_t)4*sizeof(uint8_t));
	}

	status |= WrMulti(&(p_dev->platform), 0x2cf8,
 8002642:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8002646:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 800264a:	6818      	ldr	r0, [r3, #0]
			p_dev->temp_buffer, VL53L5CX_XTALK_BUFFER_SIZE);
 800264c:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8002650:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8002654:	681b      	ldr	r3, [r3, #0]
 8002656:	f503 62a2 	add.w	r2, r3, #1296	; 0x510
	status |= WrMulti(&(p_dev->platform), 0x2cf8,
 800265a:	f44f 7342 	mov.w	r3, #776	; 0x308
 800265e:	f642 41f8 	movw	r1, #11512	; 0x2cf8
 8002662:	f002 fb8c 	bl	8004d7e <WrMulti>
 8002666:	4603      	mov	r3, r0
 8002668:	461a      	mov	r2, r3
 800266a:	f897 311d 	ldrb.w	r3, [r7, #285]	; 0x11d
 800266e:	4313      	orrs	r3, r2
 8002670:	f887 311d 	strb.w	r3, [r7, #285]	; 0x11d
	status |=_vl53l5cx_poll_for_answer(p_dev, 4, 1,
 8002674:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8002678:	f5a3 708e 	sub.w	r0, r3, #284	; 0x11c
 800267c:	2303      	movs	r3, #3
 800267e:	9301      	str	r3, [sp, #4]
 8002680:	23ff      	movs	r3, #255	; 0xff
 8002682:	9300      	str	r3, [sp, #0]
 8002684:	f44f 5330 	mov.w	r3, #11264	; 0x2c00
 8002688:	2201      	movs	r2, #1
 800268a:	2104      	movs	r1, #4
 800268c:	6800      	ldr	r0, [r0, #0]
 800268e:	f7ff fc6b 	bl	8001f68 <_vl53l5cx_poll_for_answer>
 8002692:	4603      	mov	r3, r0
 8002694:	461a      	mov	r2, r3
 8002696:	f897 311d 	ldrb.w	r3, [r7, #285]	; 0x11d
 800269a:	4313      	orrs	r3, r2
 800269c:	f887 311d 	strb.w	r3, [r7, #285]	; 0x11d
			VL53L5CX_UI_CMD_STATUS, 0xff, 0x03);

	return status;
 80026a0:	f897 311d 	ldrb.w	r3, [r7, #285]	; 0x11d
}
 80026a4:	4618      	mov	r0, r3
 80026a6:	f507 7790 	add.w	r7, r7, #288	; 0x120
 80026aa:	46bd      	mov	sp, r7
 80026ac:	bd80      	pop	{r7, pc}
 80026ae:	bf00      	nop
 80026b0:	0800ae24 	.word	0x0800ae24
 80026b4:	0800ae2c 	.word	0x0800ae2c
 80026b8:	0001fca0 	.word	0x0001fca0

080026bc <vl53l5cx_init>:
	return status;
}

uint8_t vl53l5cx_init(
		VL53L5CX_Configuration		*p_dev)
{
 80026bc:	b580      	push	{r7, lr}
 80026be:	b088      	sub	sp, #32
 80026c0:	af02      	add	r7, sp, #8
 80026c2:	6078      	str	r0, [r7, #4]
	uint8_t tmp, status = VL53L5CX_STATUS_OK;
 80026c4:	2300      	movs	r3, #0
 80026c6:	75fb      	strb	r3, [r7, #23]
	uint8_t pipe_ctrl[] = {VL53L5CX_NB_TARGET_PER_ZONE, 0x00, 0x01, 0x00};
 80026c8:	f04f 1301 	mov.w	r3, #65537	; 0x10001
 80026cc:	613b      	str	r3, [r7, #16]
	uint32_t single_range = 0x01;
 80026ce:	2301      	movs	r3, #1
 80026d0:	60fb      	str	r3, [r7, #12]

	p_dev->default_xtalk = (uint8_t*)VL53L5CX_DEFAULT_XTALK;
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	4a7e      	ldr	r2, [pc, #504]	; (80028d0 <vl53l5cx_init+0x214>)
 80026d6:	61da      	str	r2, [r3, #28]
	p_dev->default_configuration = (uint8_t*)VL53L5CX_DEFAULT_CONFIGURATION;
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	4a7e      	ldr	r2, [pc, #504]	; (80028d4 <vl53l5cx_init+0x218>)
 80026dc:	619a      	str	r2, [r3, #24]

	/* SW reboot sequence */
	status |= WrByte(&(p_dev->platform), 0x7fff, 0x00);
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	2200      	movs	r2, #0
 80026e2:	f647 71ff 	movw	r1, #32767	; 0x7fff
 80026e6:	4618      	mov	r0, r3
 80026e8:	f002 fb33 	bl	8004d52 <WrByte>
 80026ec:	4603      	mov	r3, r0
 80026ee:	461a      	mov	r2, r3
 80026f0:	7dfb      	ldrb	r3, [r7, #23]
 80026f2:	4313      	orrs	r3, r2
 80026f4:	75fb      	strb	r3, [r7, #23]
	status |= WrByte(&(p_dev->platform), 0x0009, 0x04);
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	2204      	movs	r2, #4
 80026fa:	2109      	movs	r1, #9
 80026fc:	4618      	mov	r0, r3
 80026fe:	f002 fb28 	bl	8004d52 <WrByte>
 8002702:	4603      	mov	r3, r0
 8002704:	461a      	mov	r2, r3
 8002706:	7dfb      	ldrb	r3, [r7, #23]
 8002708:	4313      	orrs	r3, r2
 800270a:	75fb      	strb	r3, [r7, #23]
	status |= WrByte(&(p_dev->platform), 0x000F, 0x40);
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	2240      	movs	r2, #64	; 0x40
 8002710:	210f      	movs	r1, #15
 8002712:	4618      	mov	r0, r3
 8002714:	f002 fb1d 	bl	8004d52 <WrByte>
 8002718:	4603      	mov	r3, r0
 800271a:	461a      	mov	r2, r3
 800271c:	7dfb      	ldrb	r3, [r7, #23]
 800271e:	4313      	orrs	r3, r2
 8002720:	75fb      	strb	r3, [r7, #23]
	status |= WrByte(&(p_dev->platform), 0x000A, 0x03);
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	2203      	movs	r2, #3
 8002726:	210a      	movs	r1, #10
 8002728:	4618      	mov	r0, r3
 800272a:	f002 fb12 	bl	8004d52 <WrByte>
 800272e:	4603      	mov	r3, r0
 8002730:	461a      	mov	r2, r3
 8002732:	7dfb      	ldrb	r3, [r7, #23]
 8002734:	4313      	orrs	r3, r2
 8002736:	75fb      	strb	r3, [r7, #23]
	status |= RdByte(&(p_dev->platform), 0x7FFF, &tmp);
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	f107 0216 	add.w	r2, r7, #22
 800273e:	f647 71ff 	movw	r1, #32767	; 0x7fff
 8002742:	4618      	mov	r0, r3
 8002744:	f002 faf0 	bl	8004d28 <RdByte>
 8002748:	4603      	mov	r3, r0
 800274a:	461a      	mov	r2, r3
 800274c:	7dfb      	ldrb	r3, [r7, #23]
 800274e:	4313      	orrs	r3, r2
 8002750:	75fb      	strb	r3, [r7, #23]
	status |= WrByte(&(p_dev->platform), 0x000C, 0x01);
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	2201      	movs	r2, #1
 8002756:	210c      	movs	r1, #12
 8002758:	4618      	mov	r0, r3
 800275a:	f002 fafa 	bl	8004d52 <WrByte>
 800275e:	4603      	mov	r3, r0
 8002760:	461a      	mov	r2, r3
 8002762:	7dfb      	ldrb	r3, [r7, #23]
 8002764:	4313      	orrs	r3, r2
 8002766:	75fb      	strb	r3, [r7, #23]

	status |= WrByte(&(p_dev->platform), 0x0101, 0x00);
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	2200      	movs	r2, #0
 800276c:	f240 1101 	movw	r1, #257	; 0x101
 8002770:	4618      	mov	r0, r3
 8002772:	f002 faee 	bl	8004d52 <WrByte>
 8002776:	4603      	mov	r3, r0
 8002778:	461a      	mov	r2, r3
 800277a:	7dfb      	ldrb	r3, [r7, #23]
 800277c:	4313      	orrs	r3, r2
 800277e:	75fb      	strb	r3, [r7, #23]
	status |= WrByte(&(p_dev->platform), 0x0102, 0x00);
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	2200      	movs	r2, #0
 8002784:	f44f 7181 	mov.w	r1, #258	; 0x102
 8002788:	4618      	mov	r0, r3
 800278a:	f002 fae2 	bl	8004d52 <WrByte>
 800278e:	4603      	mov	r3, r0
 8002790:	461a      	mov	r2, r3
 8002792:	7dfb      	ldrb	r3, [r7, #23]
 8002794:	4313      	orrs	r3, r2
 8002796:	75fb      	strb	r3, [r7, #23]
	status |= WrByte(&(p_dev->platform), 0x010A, 0x01);
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	2201      	movs	r2, #1
 800279c:	f44f 7185 	mov.w	r1, #266	; 0x10a
 80027a0:	4618      	mov	r0, r3
 80027a2:	f002 fad6 	bl	8004d52 <WrByte>
 80027a6:	4603      	mov	r3, r0
 80027a8:	461a      	mov	r2, r3
 80027aa:	7dfb      	ldrb	r3, [r7, #23]
 80027ac:	4313      	orrs	r3, r2
 80027ae:	75fb      	strb	r3, [r7, #23]
	status |= WrByte(&(p_dev->platform), 0x4002, 0x01);
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	2201      	movs	r2, #1
 80027b4:	f244 0102 	movw	r1, #16386	; 0x4002
 80027b8:	4618      	mov	r0, r3
 80027ba:	f002 faca 	bl	8004d52 <WrByte>
 80027be:	4603      	mov	r3, r0
 80027c0:	461a      	mov	r2, r3
 80027c2:	7dfb      	ldrb	r3, [r7, #23]
 80027c4:	4313      	orrs	r3, r2
 80027c6:	75fb      	strb	r3, [r7, #23]
	status |= WrByte(&(p_dev->platform), 0x4002, 0x00);
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	2200      	movs	r2, #0
 80027cc:	f244 0102 	movw	r1, #16386	; 0x4002
 80027d0:	4618      	mov	r0, r3
 80027d2:	f002 fabe 	bl	8004d52 <WrByte>
 80027d6:	4603      	mov	r3, r0
 80027d8:	461a      	mov	r2, r3
 80027da:	7dfb      	ldrb	r3, [r7, #23]
 80027dc:	4313      	orrs	r3, r2
 80027de:	75fb      	strb	r3, [r7, #23]
	status |= WrByte(&(p_dev->platform), 0x010A, 0x03);
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	2203      	movs	r2, #3
 80027e4:	f44f 7185 	mov.w	r1, #266	; 0x10a
 80027e8:	4618      	mov	r0, r3
 80027ea:	f002 fab2 	bl	8004d52 <WrByte>
 80027ee:	4603      	mov	r3, r0
 80027f0:	461a      	mov	r2, r3
 80027f2:	7dfb      	ldrb	r3, [r7, #23]
 80027f4:	4313      	orrs	r3, r2
 80027f6:	75fb      	strb	r3, [r7, #23]
	status |= WrByte(&(p_dev->platform), 0x0103, 0x01);
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	2201      	movs	r2, #1
 80027fc:	f240 1103 	movw	r1, #259	; 0x103
 8002800:	4618      	mov	r0, r3
 8002802:	f002 faa6 	bl	8004d52 <WrByte>
 8002806:	4603      	mov	r3, r0
 8002808:	461a      	mov	r2, r3
 800280a:	7dfb      	ldrb	r3, [r7, #23]
 800280c:	4313      	orrs	r3, r2
 800280e:	75fb      	strb	r3, [r7, #23]
	status |= WrByte(&(p_dev->platform), 0x000C, 0x00);
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	2200      	movs	r2, #0
 8002814:	210c      	movs	r1, #12
 8002816:	4618      	mov	r0, r3
 8002818:	f002 fa9b 	bl	8004d52 <WrByte>
 800281c:	4603      	mov	r3, r0
 800281e:	461a      	mov	r2, r3
 8002820:	7dfb      	ldrb	r3, [r7, #23]
 8002822:	4313      	orrs	r3, r2
 8002824:	75fb      	strb	r3, [r7, #23]
	status |= WrByte(&(p_dev->platform), 0x000F, 0x43);
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	2243      	movs	r2, #67	; 0x43
 800282a:	210f      	movs	r1, #15
 800282c:	4618      	mov	r0, r3
 800282e:	f002 fa90 	bl	8004d52 <WrByte>
 8002832:	4603      	mov	r3, r0
 8002834:	461a      	mov	r2, r3
 8002836:	7dfb      	ldrb	r3, [r7, #23]
 8002838:	4313      	orrs	r3, r2
 800283a:	75fb      	strb	r3, [r7, #23]
	status |= WaitMs(&(p_dev->platform), 1);
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	2101      	movs	r1, #1
 8002840:	4618      	mov	r0, r3
 8002842:	f002 fb00 	bl	8004e46 <WaitMs>
 8002846:	4603      	mov	r3, r0
 8002848:	461a      	mov	r2, r3
 800284a:	7dfb      	ldrb	r3, [r7, #23]
 800284c:	4313      	orrs	r3, r2
 800284e:	75fb      	strb	r3, [r7, #23]

	status |= WrByte(&(p_dev->platform), 0x000F, 0x40);
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	2240      	movs	r2, #64	; 0x40
 8002854:	210f      	movs	r1, #15
 8002856:	4618      	mov	r0, r3
 8002858:	f002 fa7b 	bl	8004d52 <WrByte>
 800285c:	4603      	mov	r3, r0
 800285e:	461a      	mov	r2, r3
 8002860:	7dfb      	ldrb	r3, [r7, #23]
 8002862:	4313      	orrs	r3, r2
 8002864:	75fb      	strb	r3, [r7, #23]
	status |= WrByte(&(p_dev->platform), 0x000A, 0x01);
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	2201      	movs	r2, #1
 800286a:	210a      	movs	r1, #10
 800286c:	4618      	mov	r0, r3
 800286e:	f002 fa70 	bl	8004d52 <WrByte>
 8002872:	4603      	mov	r3, r0
 8002874:	461a      	mov	r2, r3
 8002876:	7dfb      	ldrb	r3, [r7, #23]
 8002878:	4313      	orrs	r3, r2
 800287a:	75fb      	strb	r3, [r7, #23]
	status |= WaitMs(&(p_dev->platform), 100);
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	2164      	movs	r1, #100	; 0x64
 8002880:	4618      	mov	r0, r3
 8002882:	f002 fae0 	bl	8004e46 <WaitMs>
 8002886:	4603      	mov	r3, r0
 8002888:	461a      	mov	r2, r3
 800288a:	7dfb      	ldrb	r3, [r7, #23]
 800288c:	4313      	orrs	r3, r2
 800288e:	75fb      	strb	r3, [r7, #23]

	/* Wait for sensor booted (several ms required to get sensor ready ) */
	status |= WrByte(&(p_dev->platform), 0x7fff, 0x00);
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	2200      	movs	r2, #0
 8002894:	f647 71ff 	movw	r1, #32767	; 0x7fff
 8002898:	4618      	mov	r0, r3
 800289a:	f002 fa5a 	bl	8004d52 <WrByte>
 800289e:	4603      	mov	r3, r0
 80028a0:	461a      	mov	r2, r3
 80028a2:	7dfb      	ldrb	r3, [r7, #23]
 80028a4:	4313      	orrs	r3, r2
 80028a6:	75fb      	strb	r3, [r7, #23]
	status |= _vl53l5cx_poll_for_answer(p_dev, 1, 0, 0x06, 0xff, 1);
 80028a8:	2301      	movs	r3, #1
 80028aa:	9301      	str	r3, [sp, #4]
 80028ac:	23ff      	movs	r3, #255	; 0xff
 80028ae:	9300      	str	r3, [sp, #0]
 80028b0:	2306      	movs	r3, #6
 80028b2:	2200      	movs	r2, #0
 80028b4:	2101      	movs	r1, #1
 80028b6:	6878      	ldr	r0, [r7, #4]
 80028b8:	f7ff fb56 	bl	8001f68 <_vl53l5cx_poll_for_answer>
 80028bc:	4603      	mov	r3, r0
 80028be:	461a      	mov	r2, r3
 80028c0:	7dfb      	ldrb	r3, [r7, #23]
 80028c2:	4313      	orrs	r3, r2
 80028c4:	75fb      	strb	r3, [r7, #23]
	if(status != (uint8_t)0){
 80028c6:	7dfb      	ldrb	r3, [r7, #23]
 80028c8:	2b00      	cmp	r3, #0
 80028ca:	f040 831c 	bne.w	8002f06 <vl53l5cx_init+0x84a>
 80028ce:	e003      	b.n	80028d8 <vl53l5cx_init+0x21c>
 80028d0:	080205e0 	.word	0x080205e0
 80028d4:	08020214 	.word	0x08020214
		goto exit;
	}

	status |= WrByte(&(p_dev->platform), 0x000E, 0x01);
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	2201      	movs	r2, #1
 80028dc:	210e      	movs	r1, #14
 80028de:	4618      	mov	r0, r3
 80028e0:	f002 fa37 	bl	8004d52 <WrByte>
 80028e4:	4603      	mov	r3, r0
 80028e6:	461a      	mov	r2, r3
 80028e8:	7dfb      	ldrb	r3, [r7, #23]
 80028ea:	4313      	orrs	r3, r2
 80028ec:	75fb      	strb	r3, [r7, #23]
	status |= WrByte(&(p_dev->platform), 0x7fff, 0x02);
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	2202      	movs	r2, #2
 80028f2:	f647 71ff 	movw	r1, #32767	; 0x7fff
 80028f6:	4618      	mov	r0, r3
 80028f8:	f002 fa2b 	bl	8004d52 <WrByte>
 80028fc:	4603      	mov	r3, r0
 80028fe:	461a      	mov	r2, r3
 8002900:	7dfb      	ldrb	r3, [r7, #23]
 8002902:	4313      	orrs	r3, r2
 8002904:	75fb      	strb	r3, [r7, #23]

	/* Enable FW access */
	status |= WrByte(&(p_dev->platform), 0x03, 0x0D);
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	220d      	movs	r2, #13
 800290a:	2103      	movs	r1, #3
 800290c:	4618      	mov	r0, r3
 800290e:	f002 fa20 	bl	8004d52 <WrByte>
 8002912:	4603      	mov	r3, r0
 8002914:	461a      	mov	r2, r3
 8002916:	7dfb      	ldrb	r3, [r7, #23]
 8002918:	4313      	orrs	r3, r2
 800291a:	75fb      	strb	r3, [r7, #23]
	status |= WrByte(&(p_dev->platform), 0x7fff, 0x01);
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	2201      	movs	r2, #1
 8002920:	f647 71ff 	movw	r1, #32767	; 0x7fff
 8002924:	4618      	mov	r0, r3
 8002926:	f002 fa14 	bl	8004d52 <WrByte>
 800292a:	4603      	mov	r3, r0
 800292c:	461a      	mov	r2, r3
 800292e:	7dfb      	ldrb	r3, [r7, #23]
 8002930:	4313      	orrs	r3, r2
 8002932:	75fb      	strb	r3, [r7, #23]
	status |= _vl53l5cx_poll_for_answer(p_dev, 1, 0, 0x21, 0x10, 0x10);
 8002934:	2310      	movs	r3, #16
 8002936:	9301      	str	r3, [sp, #4]
 8002938:	2310      	movs	r3, #16
 800293a:	9300      	str	r3, [sp, #0]
 800293c:	2321      	movs	r3, #33	; 0x21
 800293e:	2200      	movs	r2, #0
 8002940:	2101      	movs	r1, #1
 8002942:	6878      	ldr	r0, [r7, #4]
 8002944:	f7ff fb10 	bl	8001f68 <_vl53l5cx_poll_for_answer>
 8002948:	4603      	mov	r3, r0
 800294a:	461a      	mov	r2, r3
 800294c:	7dfb      	ldrb	r3, [r7, #23]
 800294e:	4313      	orrs	r3, r2
 8002950:	75fb      	strb	r3, [r7, #23]
	status |= WrByte(&(p_dev->platform), 0x7fff, 0x00);
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	2200      	movs	r2, #0
 8002956:	f647 71ff 	movw	r1, #32767	; 0x7fff
 800295a:	4618      	mov	r0, r3
 800295c:	f002 f9f9 	bl	8004d52 <WrByte>
 8002960:	4603      	mov	r3, r0
 8002962:	461a      	mov	r2, r3
 8002964:	7dfb      	ldrb	r3, [r7, #23]
 8002966:	4313      	orrs	r3, r2
 8002968:	75fb      	strb	r3, [r7, #23]

	/* Enable host access to GO1 */
	status |= RdByte(&(p_dev->platform), 0x7fff, &tmp);
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	f107 0216 	add.w	r2, r7, #22
 8002970:	f647 71ff 	movw	r1, #32767	; 0x7fff
 8002974:	4618      	mov	r0, r3
 8002976:	f002 f9d7 	bl	8004d28 <RdByte>
 800297a:	4603      	mov	r3, r0
 800297c:	461a      	mov	r2, r3
 800297e:	7dfb      	ldrb	r3, [r7, #23]
 8002980:	4313      	orrs	r3, r2
 8002982:	75fb      	strb	r3, [r7, #23]
	status |= WrByte(&(p_dev->platform), 0x0C, 0x01);
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	2201      	movs	r2, #1
 8002988:	210c      	movs	r1, #12
 800298a:	4618      	mov	r0, r3
 800298c:	f002 f9e1 	bl	8004d52 <WrByte>
 8002990:	4603      	mov	r3, r0
 8002992:	461a      	mov	r2, r3
 8002994:	7dfb      	ldrb	r3, [r7, #23]
 8002996:	4313      	orrs	r3, r2
 8002998:	75fb      	strb	r3, [r7, #23]

	/* Power ON status */
	status |= WrByte(&(p_dev->platform), 0x7fff, 0x00);
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	2200      	movs	r2, #0
 800299e:	f647 71ff 	movw	r1, #32767	; 0x7fff
 80029a2:	4618      	mov	r0, r3
 80029a4:	f002 f9d5 	bl	8004d52 <WrByte>
 80029a8:	4603      	mov	r3, r0
 80029aa:	461a      	mov	r2, r3
 80029ac:	7dfb      	ldrb	r3, [r7, #23]
 80029ae:	4313      	orrs	r3, r2
 80029b0:	75fb      	strb	r3, [r7, #23]
	status |= WrByte(&(p_dev->platform), 0x101, 0x00);
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	2200      	movs	r2, #0
 80029b6:	f240 1101 	movw	r1, #257	; 0x101
 80029ba:	4618      	mov	r0, r3
 80029bc:	f002 f9c9 	bl	8004d52 <WrByte>
 80029c0:	4603      	mov	r3, r0
 80029c2:	461a      	mov	r2, r3
 80029c4:	7dfb      	ldrb	r3, [r7, #23]
 80029c6:	4313      	orrs	r3, r2
 80029c8:	75fb      	strb	r3, [r7, #23]
	status |= WrByte(&(p_dev->platform), 0x102, 0x00);
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	2200      	movs	r2, #0
 80029ce:	f44f 7181 	mov.w	r1, #258	; 0x102
 80029d2:	4618      	mov	r0, r3
 80029d4:	f002 f9bd 	bl	8004d52 <WrByte>
 80029d8:	4603      	mov	r3, r0
 80029da:	461a      	mov	r2, r3
 80029dc:	7dfb      	ldrb	r3, [r7, #23]
 80029de:	4313      	orrs	r3, r2
 80029e0:	75fb      	strb	r3, [r7, #23]
	status |= WrByte(&(p_dev->platform), 0x010A, 0x01);
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	2201      	movs	r2, #1
 80029e6:	f44f 7185 	mov.w	r1, #266	; 0x10a
 80029ea:	4618      	mov	r0, r3
 80029ec:	f002 f9b1 	bl	8004d52 <WrByte>
 80029f0:	4603      	mov	r3, r0
 80029f2:	461a      	mov	r2, r3
 80029f4:	7dfb      	ldrb	r3, [r7, #23]
 80029f6:	4313      	orrs	r3, r2
 80029f8:	75fb      	strb	r3, [r7, #23]
	status |= WrByte(&(p_dev->platform), 0x4002, 0x01);
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	2201      	movs	r2, #1
 80029fe:	f244 0102 	movw	r1, #16386	; 0x4002
 8002a02:	4618      	mov	r0, r3
 8002a04:	f002 f9a5 	bl	8004d52 <WrByte>
 8002a08:	4603      	mov	r3, r0
 8002a0a:	461a      	mov	r2, r3
 8002a0c:	7dfb      	ldrb	r3, [r7, #23]
 8002a0e:	4313      	orrs	r3, r2
 8002a10:	75fb      	strb	r3, [r7, #23]
	status |= WrByte(&(p_dev->platform), 0x4002, 0x00);
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	2200      	movs	r2, #0
 8002a16:	f244 0102 	movw	r1, #16386	; 0x4002
 8002a1a:	4618      	mov	r0, r3
 8002a1c:	f002 f999 	bl	8004d52 <WrByte>
 8002a20:	4603      	mov	r3, r0
 8002a22:	461a      	mov	r2, r3
 8002a24:	7dfb      	ldrb	r3, [r7, #23]
 8002a26:	4313      	orrs	r3, r2
 8002a28:	75fb      	strb	r3, [r7, #23]
	status |= WrByte(&(p_dev->platform), 0x010A, 0x03);
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	2203      	movs	r2, #3
 8002a2e:	f44f 7185 	mov.w	r1, #266	; 0x10a
 8002a32:	4618      	mov	r0, r3
 8002a34:	f002 f98d 	bl	8004d52 <WrByte>
 8002a38:	4603      	mov	r3, r0
 8002a3a:	461a      	mov	r2, r3
 8002a3c:	7dfb      	ldrb	r3, [r7, #23]
 8002a3e:	4313      	orrs	r3, r2
 8002a40:	75fb      	strb	r3, [r7, #23]
	status |= WrByte(&(p_dev->platform), 0x103, 0x01);
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	2201      	movs	r2, #1
 8002a46:	f240 1103 	movw	r1, #259	; 0x103
 8002a4a:	4618      	mov	r0, r3
 8002a4c:	f002 f981 	bl	8004d52 <WrByte>
 8002a50:	4603      	mov	r3, r0
 8002a52:	461a      	mov	r2, r3
 8002a54:	7dfb      	ldrb	r3, [r7, #23]
 8002a56:	4313      	orrs	r3, r2
 8002a58:	75fb      	strb	r3, [r7, #23]
	status |= WrByte(&(p_dev->platform), 0x400F, 0x00);
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	2200      	movs	r2, #0
 8002a5e:	f244 010f 	movw	r1, #16399	; 0x400f
 8002a62:	4618      	mov	r0, r3
 8002a64:	f002 f975 	bl	8004d52 <WrByte>
 8002a68:	4603      	mov	r3, r0
 8002a6a:	461a      	mov	r2, r3
 8002a6c:	7dfb      	ldrb	r3, [r7, #23]
 8002a6e:	4313      	orrs	r3, r2
 8002a70:	75fb      	strb	r3, [r7, #23]
	status |= WrByte(&(p_dev->platform), 0x21A, 0x43);
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	2243      	movs	r2, #67	; 0x43
 8002a76:	f240 211a 	movw	r1, #538	; 0x21a
 8002a7a:	4618      	mov	r0, r3
 8002a7c:	f002 f969 	bl	8004d52 <WrByte>
 8002a80:	4603      	mov	r3, r0
 8002a82:	461a      	mov	r2, r3
 8002a84:	7dfb      	ldrb	r3, [r7, #23]
 8002a86:	4313      	orrs	r3, r2
 8002a88:	75fb      	strb	r3, [r7, #23]
	status |= WrByte(&(p_dev->platform), 0x21A, 0x03);
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	2203      	movs	r2, #3
 8002a8e:	f240 211a 	movw	r1, #538	; 0x21a
 8002a92:	4618      	mov	r0, r3
 8002a94:	f002 f95d 	bl	8004d52 <WrByte>
 8002a98:	4603      	mov	r3, r0
 8002a9a:	461a      	mov	r2, r3
 8002a9c:	7dfb      	ldrb	r3, [r7, #23]
 8002a9e:	4313      	orrs	r3, r2
 8002aa0:	75fb      	strb	r3, [r7, #23]
	status |= WrByte(&(p_dev->platform), 0x21A, 0x01);
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	2201      	movs	r2, #1
 8002aa6:	f240 211a 	movw	r1, #538	; 0x21a
 8002aaa:	4618      	mov	r0, r3
 8002aac:	f002 f951 	bl	8004d52 <WrByte>
 8002ab0:	4603      	mov	r3, r0
 8002ab2:	461a      	mov	r2, r3
 8002ab4:	7dfb      	ldrb	r3, [r7, #23]
 8002ab6:	4313      	orrs	r3, r2
 8002ab8:	75fb      	strb	r3, [r7, #23]
	status |= WrByte(&(p_dev->platform), 0x21A, 0x00);
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	2200      	movs	r2, #0
 8002abe:	f240 211a 	movw	r1, #538	; 0x21a
 8002ac2:	4618      	mov	r0, r3
 8002ac4:	f002 f945 	bl	8004d52 <WrByte>
 8002ac8:	4603      	mov	r3, r0
 8002aca:	461a      	mov	r2, r3
 8002acc:	7dfb      	ldrb	r3, [r7, #23]
 8002ace:	4313      	orrs	r3, r2
 8002ad0:	75fb      	strb	r3, [r7, #23]
	status |= WrByte(&(p_dev->platform), 0x219, 0x00);
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	2200      	movs	r2, #0
 8002ad6:	f240 2119 	movw	r1, #537	; 0x219
 8002ada:	4618      	mov	r0, r3
 8002adc:	f002 f939 	bl	8004d52 <WrByte>
 8002ae0:	4603      	mov	r3, r0
 8002ae2:	461a      	mov	r2, r3
 8002ae4:	7dfb      	ldrb	r3, [r7, #23]
 8002ae6:	4313      	orrs	r3, r2
 8002ae8:	75fb      	strb	r3, [r7, #23]
	status |= WrByte(&(p_dev->platform), 0x21B, 0x00);
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	2200      	movs	r2, #0
 8002aee:	f240 211b 	movw	r1, #539	; 0x21b
 8002af2:	4618      	mov	r0, r3
 8002af4:	f002 f92d 	bl	8004d52 <WrByte>
 8002af8:	4603      	mov	r3, r0
 8002afa:	461a      	mov	r2, r3
 8002afc:	7dfb      	ldrb	r3, [r7, #23]
 8002afe:	4313      	orrs	r3, r2
 8002b00:	75fb      	strb	r3, [r7, #23]

	/* Wake up MCU */
	status |= WrByte(&(p_dev->platform), 0x7fff, 0x00);
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	2200      	movs	r2, #0
 8002b06:	f647 71ff 	movw	r1, #32767	; 0x7fff
 8002b0a:	4618      	mov	r0, r3
 8002b0c:	f002 f921 	bl	8004d52 <WrByte>
 8002b10:	4603      	mov	r3, r0
 8002b12:	461a      	mov	r2, r3
 8002b14:	7dfb      	ldrb	r3, [r7, #23]
 8002b16:	4313      	orrs	r3, r2
 8002b18:	75fb      	strb	r3, [r7, #23]
	status |= RdByte(&(p_dev->platform), 0x7fff, &tmp);
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	f107 0216 	add.w	r2, r7, #22
 8002b20:	f647 71ff 	movw	r1, #32767	; 0x7fff
 8002b24:	4618      	mov	r0, r3
 8002b26:	f002 f8ff 	bl	8004d28 <RdByte>
 8002b2a:	4603      	mov	r3, r0
 8002b2c:	461a      	mov	r2, r3
 8002b2e:	7dfb      	ldrb	r3, [r7, #23]
 8002b30:	4313      	orrs	r3, r2
 8002b32:	75fb      	strb	r3, [r7, #23]
	status |= WrByte(&(p_dev->platform), 0x0C, 0x00);
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	2200      	movs	r2, #0
 8002b38:	210c      	movs	r1, #12
 8002b3a:	4618      	mov	r0, r3
 8002b3c:	f002 f909 	bl	8004d52 <WrByte>
 8002b40:	4603      	mov	r3, r0
 8002b42:	461a      	mov	r2, r3
 8002b44:	7dfb      	ldrb	r3, [r7, #23]
 8002b46:	4313      	orrs	r3, r2
 8002b48:	75fb      	strb	r3, [r7, #23]
	status |= WrByte(&(p_dev->platform), 0x7fff, 0x01);
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	2201      	movs	r2, #1
 8002b4e:	f647 71ff 	movw	r1, #32767	; 0x7fff
 8002b52:	4618      	mov	r0, r3
 8002b54:	f002 f8fd 	bl	8004d52 <WrByte>
 8002b58:	4603      	mov	r3, r0
 8002b5a:	461a      	mov	r2, r3
 8002b5c:	7dfb      	ldrb	r3, [r7, #23]
 8002b5e:	4313      	orrs	r3, r2
 8002b60:	75fb      	strb	r3, [r7, #23]
	status |= WrByte(&(p_dev->platform), 0x20, 0x07);
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	2207      	movs	r2, #7
 8002b66:	2120      	movs	r1, #32
 8002b68:	4618      	mov	r0, r3
 8002b6a:	f002 f8f2 	bl	8004d52 <WrByte>
 8002b6e:	4603      	mov	r3, r0
 8002b70:	461a      	mov	r2, r3
 8002b72:	7dfb      	ldrb	r3, [r7, #23]
 8002b74:	4313      	orrs	r3, r2
 8002b76:	75fb      	strb	r3, [r7, #23]
	status |= WrByte(&(p_dev->platform), 0x20, 0x06);
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	2206      	movs	r2, #6
 8002b7c:	2120      	movs	r1, #32
 8002b7e:	4618      	mov	r0, r3
 8002b80:	f002 f8e7 	bl	8004d52 <WrByte>
 8002b84:	4603      	mov	r3, r0
 8002b86:	461a      	mov	r2, r3
 8002b88:	7dfb      	ldrb	r3, [r7, #23]
 8002b8a:	4313      	orrs	r3, r2
 8002b8c:	75fb      	strb	r3, [r7, #23]

	/* Download FW into VL53L5 */
	status |= WrByte(&(p_dev->platform), 0x7fff, 0x09);
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	2209      	movs	r2, #9
 8002b92:	f647 71ff 	movw	r1, #32767	; 0x7fff
 8002b96:	4618      	mov	r0, r3
 8002b98:	f002 f8db 	bl	8004d52 <WrByte>
 8002b9c:	4603      	mov	r3, r0
 8002b9e:	461a      	mov	r2, r3
 8002ba0:	7dfb      	ldrb	r3, [r7, #23]
 8002ba2:	4313      	orrs	r3, r2
 8002ba4:	75fb      	strb	r3, [r7, #23]
	status |= WrMulti(&(p_dev->platform),0,
 8002ba6:	6878      	ldr	r0, [r7, #4]
 8002ba8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002bac:	4adb      	ldr	r2, [pc, #876]	; (8002f1c <vl53l5cx_init+0x860>)
 8002bae:	2100      	movs	r1, #0
 8002bb0:	f002 f8e5 	bl	8004d7e <WrMulti>
 8002bb4:	4603      	mov	r3, r0
 8002bb6:	461a      	mov	r2, r3
 8002bb8:	7dfb      	ldrb	r3, [r7, #23]
 8002bba:	4313      	orrs	r3, r2
 8002bbc:	75fb      	strb	r3, [r7, #23]
		(uint8_t*)&VL53L5CX_FIRMWARE[0],0x8000);
	status |= WrByte(&(p_dev->platform), 0x7fff, 0x0a);
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	220a      	movs	r2, #10
 8002bc2:	f647 71ff 	movw	r1, #32767	; 0x7fff
 8002bc6:	4618      	mov	r0, r3
 8002bc8:	f002 f8c3 	bl	8004d52 <WrByte>
 8002bcc:	4603      	mov	r3, r0
 8002bce:	461a      	mov	r2, r3
 8002bd0:	7dfb      	ldrb	r3, [r7, #23]
 8002bd2:	4313      	orrs	r3, r2
 8002bd4:	75fb      	strb	r3, [r7, #23]
	status |= WrMulti(&(p_dev->platform),0,
 8002bd6:	6878      	ldr	r0, [r7, #4]
 8002bd8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002bdc:	4ad0      	ldr	r2, [pc, #832]	; (8002f20 <vl53l5cx_init+0x864>)
 8002bde:	2100      	movs	r1, #0
 8002be0:	f002 f8cd 	bl	8004d7e <WrMulti>
 8002be4:	4603      	mov	r3, r0
 8002be6:	461a      	mov	r2, r3
 8002be8:	7dfb      	ldrb	r3, [r7, #23]
 8002bea:	4313      	orrs	r3, r2
 8002bec:	75fb      	strb	r3, [r7, #23]
		(uint8_t*)&VL53L5CX_FIRMWARE[0x8000],0x8000);
	status |= WrByte(&(p_dev->platform), 0x7fff, 0x0b);
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	220b      	movs	r2, #11
 8002bf2:	f647 71ff 	movw	r1, #32767	; 0x7fff
 8002bf6:	4618      	mov	r0, r3
 8002bf8:	f002 f8ab 	bl	8004d52 <WrByte>
 8002bfc:	4603      	mov	r3, r0
 8002bfe:	461a      	mov	r2, r3
 8002c00:	7dfb      	ldrb	r3, [r7, #23]
 8002c02:	4313      	orrs	r3, r2
 8002c04:	75fb      	strb	r3, [r7, #23]
	status |= WrMulti(&(p_dev->platform),0,
 8002c06:	6878      	ldr	r0, [r7, #4]
 8002c08:	f44f 43a0 	mov.w	r3, #20480	; 0x5000
 8002c0c:	4ac5      	ldr	r2, [pc, #788]	; (8002f24 <vl53l5cx_init+0x868>)
 8002c0e:	2100      	movs	r1, #0
 8002c10:	f002 f8b5 	bl	8004d7e <WrMulti>
 8002c14:	4603      	mov	r3, r0
 8002c16:	461a      	mov	r2, r3
 8002c18:	7dfb      	ldrb	r3, [r7, #23]
 8002c1a:	4313      	orrs	r3, r2
 8002c1c:	75fb      	strb	r3, [r7, #23]
		(uint8_t*)&VL53L5CX_FIRMWARE[0x10000],0x5000);
	status |= WrByte(&(p_dev->platform), 0x7fff, 0x01);
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	2201      	movs	r2, #1
 8002c22:	f647 71ff 	movw	r1, #32767	; 0x7fff
 8002c26:	4618      	mov	r0, r3
 8002c28:	f002 f893 	bl	8004d52 <WrByte>
 8002c2c:	4603      	mov	r3, r0
 8002c2e:	461a      	mov	r2, r3
 8002c30:	7dfb      	ldrb	r3, [r7, #23]
 8002c32:	4313      	orrs	r3, r2
 8002c34:	75fb      	strb	r3, [r7, #23]

	/* Check if FW correctly downloaded */
	status |= WrByte(&(p_dev->platform), 0x7fff, 0x02);
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	2202      	movs	r2, #2
 8002c3a:	f647 71ff 	movw	r1, #32767	; 0x7fff
 8002c3e:	4618      	mov	r0, r3
 8002c40:	f002 f887 	bl	8004d52 <WrByte>
 8002c44:	4603      	mov	r3, r0
 8002c46:	461a      	mov	r2, r3
 8002c48:	7dfb      	ldrb	r3, [r7, #23]
 8002c4a:	4313      	orrs	r3, r2
 8002c4c:	75fb      	strb	r3, [r7, #23]
	status |= WrByte(&(p_dev->platform), 0x03, 0x0D);
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	220d      	movs	r2, #13
 8002c52:	2103      	movs	r1, #3
 8002c54:	4618      	mov	r0, r3
 8002c56:	f002 f87c 	bl	8004d52 <WrByte>
 8002c5a:	4603      	mov	r3, r0
 8002c5c:	461a      	mov	r2, r3
 8002c5e:	7dfb      	ldrb	r3, [r7, #23]
 8002c60:	4313      	orrs	r3, r2
 8002c62:	75fb      	strb	r3, [r7, #23]
	status |= WrByte(&(p_dev->platform), 0x7fff, 0x01);
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	2201      	movs	r2, #1
 8002c68:	f647 71ff 	movw	r1, #32767	; 0x7fff
 8002c6c:	4618      	mov	r0, r3
 8002c6e:	f002 f870 	bl	8004d52 <WrByte>
 8002c72:	4603      	mov	r3, r0
 8002c74:	461a      	mov	r2, r3
 8002c76:	7dfb      	ldrb	r3, [r7, #23]
 8002c78:	4313      	orrs	r3, r2
 8002c7a:	75fb      	strb	r3, [r7, #23]
	status |= _vl53l5cx_poll_for_answer(p_dev, 1, 0, 0x21, 0x10, 0x10);
 8002c7c:	2310      	movs	r3, #16
 8002c7e:	9301      	str	r3, [sp, #4]
 8002c80:	2310      	movs	r3, #16
 8002c82:	9300      	str	r3, [sp, #0]
 8002c84:	2321      	movs	r3, #33	; 0x21
 8002c86:	2200      	movs	r2, #0
 8002c88:	2101      	movs	r1, #1
 8002c8a:	6878      	ldr	r0, [r7, #4]
 8002c8c:	f7ff f96c 	bl	8001f68 <_vl53l5cx_poll_for_answer>
 8002c90:	4603      	mov	r3, r0
 8002c92:	461a      	mov	r2, r3
 8002c94:	7dfb      	ldrb	r3, [r7, #23]
 8002c96:	4313      	orrs	r3, r2
 8002c98:	75fb      	strb	r3, [r7, #23]
	if(status != (uint8_t)0){
 8002c9a:	7dfb      	ldrb	r3, [r7, #23]
 8002c9c:	2b00      	cmp	r3, #0
 8002c9e:	f040 8134 	bne.w	8002f0a <vl53l5cx_init+0x84e>
		goto exit;
	}

	status |= WrByte(&(p_dev->platform), 0x7fff, 0x00);
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	2200      	movs	r2, #0
 8002ca6:	f647 71ff 	movw	r1, #32767	; 0x7fff
 8002caa:	4618      	mov	r0, r3
 8002cac:	f002 f851 	bl	8004d52 <WrByte>
 8002cb0:	4603      	mov	r3, r0
 8002cb2:	461a      	mov	r2, r3
 8002cb4:	7dfb      	ldrb	r3, [r7, #23]
 8002cb6:	4313      	orrs	r3, r2
 8002cb8:	75fb      	strb	r3, [r7, #23]
	status |= RdByte(&(p_dev->platform), 0x7fff, &tmp);
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	f107 0216 	add.w	r2, r7, #22
 8002cc0:	f647 71ff 	movw	r1, #32767	; 0x7fff
 8002cc4:	4618      	mov	r0, r3
 8002cc6:	f002 f82f 	bl	8004d28 <RdByte>
 8002cca:	4603      	mov	r3, r0
 8002ccc:	461a      	mov	r2, r3
 8002cce:	7dfb      	ldrb	r3, [r7, #23]
 8002cd0:	4313      	orrs	r3, r2
 8002cd2:	75fb      	strb	r3, [r7, #23]
	status |= WrByte(&(p_dev->platform), 0x0C, 0x01);
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	2201      	movs	r2, #1
 8002cd8:	210c      	movs	r1, #12
 8002cda:	4618      	mov	r0, r3
 8002cdc:	f002 f839 	bl	8004d52 <WrByte>
 8002ce0:	4603      	mov	r3, r0
 8002ce2:	461a      	mov	r2, r3
 8002ce4:	7dfb      	ldrb	r3, [r7, #23]
 8002ce6:	4313      	orrs	r3, r2
 8002ce8:	75fb      	strb	r3, [r7, #23]

	/* Reset MCU and wait boot */
	status |= WrByte(&(p_dev->platform), 0x7FFF, 0x00);
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	2200      	movs	r2, #0
 8002cee:	f647 71ff 	movw	r1, #32767	; 0x7fff
 8002cf2:	4618      	mov	r0, r3
 8002cf4:	f002 f82d 	bl	8004d52 <WrByte>
 8002cf8:	4603      	mov	r3, r0
 8002cfa:	461a      	mov	r2, r3
 8002cfc:	7dfb      	ldrb	r3, [r7, #23]
 8002cfe:	4313      	orrs	r3, r2
 8002d00:	75fb      	strb	r3, [r7, #23]
	status |= WrByte(&(p_dev->platform), 0x114, 0x00);
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	2200      	movs	r2, #0
 8002d06:	f44f 718a 	mov.w	r1, #276	; 0x114
 8002d0a:	4618      	mov	r0, r3
 8002d0c:	f002 f821 	bl	8004d52 <WrByte>
 8002d10:	4603      	mov	r3, r0
 8002d12:	461a      	mov	r2, r3
 8002d14:	7dfb      	ldrb	r3, [r7, #23]
 8002d16:	4313      	orrs	r3, r2
 8002d18:	75fb      	strb	r3, [r7, #23]
	status |= WrByte(&(p_dev->platform), 0x115, 0x00);
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	2200      	movs	r2, #0
 8002d1e:	f240 1115 	movw	r1, #277	; 0x115
 8002d22:	4618      	mov	r0, r3
 8002d24:	f002 f815 	bl	8004d52 <WrByte>
 8002d28:	4603      	mov	r3, r0
 8002d2a:	461a      	mov	r2, r3
 8002d2c:	7dfb      	ldrb	r3, [r7, #23]
 8002d2e:	4313      	orrs	r3, r2
 8002d30:	75fb      	strb	r3, [r7, #23]
	status |= WrByte(&(p_dev->platform), 0x116, 0x42);
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	2242      	movs	r2, #66	; 0x42
 8002d36:	f44f 718b 	mov.w	r1, #278	; 0x116
 8002d3a:	4618      	mov	r0, r3
 8002d3c:	f002 f809 	bl	8004d52 <WrByte>
 8002d40:	4603      	mov	r3, r0
 8002d42:	461a      	mov	r2, r3
 8002d44:	7dfb      	ldrb	r3, [r7, #23]
 8002d46:	4313      	orrs	r3, r2
 8002d48:	75fb      	strb	r3, [r7, #23]
	status |= WrByte(&(p_dev->platform), 0x117, 0x00);
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	2200      	movs	r2, #0
 8002d4e:	f240 1117 	movw	r1, #279	; 0x117
 8002d52:	4618      	mov	r0, r3
 8002d54:	f001 fffd 	bl	8004d52 <WrByte>
 8002d58:	4603      	mov	r3, r0
 8002d5a:	461a      	mov	r2, r3
 8002d5c:	7dfb      	ldrb	r3, [r7, #23]
 8002d5e:	4313      	orrs	r3, r2
 8002d60:	75fb      	strb	r3, [r7, #23]
	status |= WrByte(&(p_dev->platform), 0x0B, 0x00);
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	2200      	movs	r2, #0
 8002d66:	210b      	movs	r1, #11
 8002d68:	4618      	mov	r0, r3
 8002d6a:	f001 fff2 	bl	8004d52 <WrByte>
 8002d6e:	4603      	mov	r3, r0
 8002d70:	461a      	mov	r2, r3
 8002d72:	7dfb      	ldrb	r3, [r7, #23]
 8002d74:	4313      	orrs	r3, r2
 8002d76:	75fb      	strb	r3, [r7, #23]
	status |= RdByte(&(p_dev->platform), 0x7fff, &tmp);
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	f107 0216 	add.w	r2, r7, #22
 8002d7e:	f647 71ff 	movw	r1, #32767	; 0x7fff
 8002d82:	4618      	mov	r0, r3
 8002d84:	f001 ffd0 	bl	8004d28 <RdByte>
 8002d88:	4603      	mov	r3, r0
 8002d8a:	461a      	mov	r2, r3
 8002d8c:	7dfb      	ldrb	r3, [r7, #23]
 8002d8e:	4313      	orrs	r3, r2
 8002d90:	75fb      	strb	r3, [r7, #23]
	status |= WrByte(&(p_dev->platform), 0x0C, 0x00);
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	2200      	movs	r2, #0
 8002d96:	210c      	movs	r1, #12
 8002d98:	4618      	mov	r0, r3
 8002d9a:	f001 ffda 	bl	8004d52 <WrByte>
 8002d9e:	4603      	mov	r3, r0
 8002da0:	461a      	mov	r2, r3
 8002da2:	7dfb      	ldrb	r3, [r7, #23]
 8002da4:	4313      	orrs	r3, r2
 8002da6:	75fb      	strb	r3, [r7, #23]
	status |= WrByte(&(p_dev->platform), 0x0B, 0x01);
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	2201      	movs	r2, #1
 8002dac:	210b      	movs	r1, #11
 8002dae:	4618      	mov	r0, r3
 8002db0:	f001 ffcf 	bl	8004d52 <WrByte>
 8002db4:	4603      	mov	r3, r0
 8002db6:	461a      	mov	r2, r3
 8002db8:	7dfb      	ldrb	r3, [r7, #23]
 8002dba:	4313      	orrs	r3, r2
 8002dbc:	75fb      	strb	r3, [r7, #23]
	status |= _vl53l5cx_poll_for_mcu_boot(p_dev);
 8002dbe:	6878      	ldr	r0, [r7, #4]
 8002dc0:	f7ff f922 	bl	8002008 <_vl53l5cx_poll_for_mcu_boot>
 8002dc4:	4603      	mov	r3, r0
 8002dc6:	461a      	mov	r2, r3
 8002dc8:	7dfb      	ldrb	r3, [r7, #23]
 8002dca:	4313      	orrs	r3, r2
 8002dcc:	75fb      	strb	r3, [r7, #23]
	if(status != (uint8_t)0){
 8002dce:	7dfb      	ldrb	r3, [r7, #23]
 8002dd0:	2b00      	cmp	r3, #0
 8002dd2:	f040 809c 	bne.w	8002f0e <vl53l5cx_init+0x852>
		goto exit;
	}

	status |= WrByte(&(p_dev->platform), 0x7fff, 0x02);
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	2202      	movs	r2, #2
 8002dda:	f647 71ff 	movw	r1, #32767	; 0x7fff
 8002dde:	4618      	mov	r0, r3
 8002de0:	f001 ffb7 	bl	8004d52 <WrByte>
 8002de4:	4603      	mov	r3, r0
 8002de6:	461a      	mov	r2, r3
 8002de8:	7dfb      	ldrb	r3, [r7, #23]
 8002dea:	4313      	orrs	r3, r2
 8002dec:	75fb      	strb	r3, [r7, #23]

	/* Get offset NVM data and store them into the offset buffer */
	status |= WrMulti(&(p_dev->platform), 0x2fd8,
 8002dee:	6878      	ldr	r0, [r7, #4]
 8002df0:	2328      	movs	r3, #40	; 0x28
 8002df2:	4a4d      	ldr	r2, [pc, #308]	; (8002f28 <vl53l5cx_init+0x86c>)
 8002df4:	f642 71d8 	movw	r1, #12248	; 0x2fd8
 8002df8:	f001 ffc1 	bl	8004d7e <WrMulti>
 8002dfc:	4603      	mov	r3, r0
 8002dfe:	461a      	mov	r2, r3
 8002e00:	7dfb      	ldrb	r3, [r7, #23]
 8002e02:	4313      	orrs	r3, r2
 8002e04:	75fb      	strb	r3, [r7, #23]
		(uint8_t*)VL53L5CX_GET_NVM_CMD, sizeof(VL53L5CX_GET_NVM_CMD));
	status |= _vl53l5cx_poll_for_answer(p_dev, 4, 0,
 8002e06:	2302      	movs	r3, #2
 8002e08:	9301      	str	r3, [sp, #4]
 8002e0a:	23ff      	movs	r3, #255	; 0xff
 8002e0c:	9300      	str	r3, [sp, #0]
 8002e0e:	f44f 5330 	mov.w	r3, #11264	; 0x2c00
 8002e12:	2200      	movs	r2, #0
 8002e14:	2104      	movs	r1, #4
 8002e16:	6878      	ldr	r0, [r7, #4]
 8002e18:	f7ff f8a6 	bl	8001f68 <_vl53l5cx_poll_for_answer>
 8002e1c:	4603      	mov	r3, r0
 8002e1e:	461a      	mov	r2, r3
 8002e20:	7dfb      	ldrb	r3, [r7, #23]
 8002e22:	4313      	orrs	r3, r2
 8002e24:	75fb      	strb	r3, [r7, #23]
		VL53L5CX_UI_CMD_STATUS, 0xff, 2);
	status |= RdMulti(&(p_dev->platform), VL53L5CX_UI_CMD_START,
 8002e26:	6878      	ldr	r0, [r7, #4]
		p_dev->temp_buffer, VL53L5CX_NVM_DATA_SIZE);
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	f503 62a2 	add.w	r2, r3, #1296	; 0x510
	status |= RdMulti(&(p_dev->platform), VL53L5CX_UI_CMD_START,
 8002e2e:	f44f 73f6 	mov.w	r3, #492	; 0x1ec
 8002e32:	f642 4104 	movw	r1, #11268	; 0x2c04
 8002e36:	f001 ffb9 	bl	8004dac <RdMulti>
 8002e3a:	4603      	mov	r3, r0
 8002e3c:	461a      	mov	r2, r3
 8002e3e:	7dfb      	ldrb	r3, [r7, #23]
 8002e40:	4313      	orrs	r3, r2
 8002e42:	75fb      	strb	r3, [r7, #23]
	(void)memcpy(p_dev->offset_data, p_dev->temp_buffer,
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	f103 0020 	add.w	r0, r3, #32
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	f503 63a2 	add.w	r3, r3, #1296	; 0x510
 8002e50:	f44f 72f4 	mov.w	r2, #488	; 0x1e8
 8002e54:	4619      	mov	r1, r3
 8002e56:	f007 fa9f 	bl	800a398 <memcpy>
		VL53L5CX_OFFSET_BUFFER_SIZE);
	status |= _vl53l5cx_send_offset_data(p_dev, VL53L5CX_RESOLUTION_4X4);
 8002e5a:	2110      	movs	r1, #16
 8002e5c:	6878      	ldr	r0, [r7, #4]
 8002e5e:	f7ff f915 	bl	800208c <_vl53l5cx_send_offset_data>
 8002e62:	4603      	mov	r3, r0
 8002e64:	461a      	mov	r2, r3
 8002e66:	7dfb      	ldrb	r3, [r7, #23]
 8002e68:	4313      	orrs	r3, r2
 8002e6a:	75fb      	strb	r3, [r7, #23]

	/* Set default Xtalk shape. Send Xtalk to sensor */
	(void)memcpy(p_dev->xtalk_data, (uint8_t*)VL53L5CX_DEFAULT_XTALK,
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8002e72:	4a2e      	ldr	r2, [pc, #184]	; (8002f2c <vl53l5cx_init+0x870>)
 8002e74:	4618      	mov	r0, r3
 8002e76:	4611      	mov	r1, r2
 8002e78:	f44f 7342 	mov.w	r3, #776	; 0x308
 8002e7c:	461a      	mov	r2, r3
 8002e7e:	f007 fa8b 	bl	800a398 <memcpy>
		VL53L5CX_XTALK_BUFFER_SIZE);
	status |= _vl53l5cx_send_xtalk_data(p_dev, VL53L5CX_RESOLUTION_4X4);
 8002e82:	2110      	movs	r1, #16
 8002e84:	6878      	ldr	r0, [r7, #4]
 8002e86:	f7ff facd 	bl	8002424 <_vl53l5cx_send_xtalk_data>
 8002e8a:	4603      	mov	r3, r0
 8002e8c:	461a      	mov	r2, r3
 8002e8e:	7dfb      	ldrb	r3, [r7, #23]
 8002e90:	4313      	orrs	r3, r2
 8002e92:	75fb      	strb	r3, [r7, #23]

	/* Send default configuration to VL53L5CX firmware */
	status |= WrMulti(&(p_dev->platform), 0x2c34,
 8002e94:	6878      	ldr	r0, [r7, #4]
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	699a      	ldr	r2, [r3, #24]
 8002e9a:	f44f 7373 	mov.w	r3, #972	; 0x3cc
 8002e9e:	f642 4134 	movw	r1, #11316	; 0x2c34
 8002ea2:	f001 ff6c 	bl	8004d7e <WrMulti>
 8002ea6:	4603      	mov	r3, r0
 8002ea8:	461a      	mov	r2, r3
 8002eaa:	7dfb      	ldrb	r3, [r7, #23]
 8002eac:	4313      	orrs	r3, r2
 8002eae:	75fb      	strb	r3, [r7, #23]
		p_dev->default_configuration,
		sizeof(VL53L5CX_DEFAULT_CONFIGURATION));
	status |= _vl53l5cx_poll_for_answer(p_dev, 4, 1,
 8002eb0:	2303      	movs	r3, #3
 8002eb2:	9301      	str	r3, [sp, #4]
 8002eb4:	23ff      	movs	r3, #255	; 0xff
 8002eb6:	9300      	str	r3, [sp, #0]
 8002eb8:	f44f 5330 	mov.w	r3, #11264	; 0x2c00
 8002ebc:	2201      	movs	r2, #1
 8002ebe:	2104      	movs	r1, #4
 8002ec0:	6878      	ldr	r0, [r7, #4]
 8002ec2:	f7ff f851 	bl	8001f68 <_vl53l5cx_poll_for_answer>
 8002ec6:	4603      	mov	r3, r0
 8002ec8:	461a      	mov	r2, r3
 8002eca:	7dfb      	ldrb	r3, [r7, #23]
 8002ecc:	4313      	orrs	r3, r2
 8002ece:	75fb      	strb	r3, [r7, #23]
		VL53L5CX_UI_CMD_STATUS, 0xff, 0x03);

	status |= vl53l5cx_dci_write_data(p_dev, (uint8_t*)&pipe_ctrl,
 8002ed0:	f107 0110 	add.w	r1, r7, #16
 8002ed4:	2304      	movs	r3, #4
 8002ed6:	f64d 3280 	movw	r2, #56192	; 0xdb80
 8002eda:	6878      	ldr	r0, [r7, #4]
 8002edc:	f001 f8da 	bl	8004094 <vl53l5cx_dci_write_data>
 8002ee0:	4603      	mov	r3, r0
 8002ee2:	461a      	mov	r2, r3
 8002ee4:	7dfb      	ldrb	r3, [r7, #23]
 8002ee6:	4313      	orrs	r3, r2
 8002ee8:	75fb      	strb	r3, [r7, #23]
	status |= vl53l5cx_dci_replace_data(p_dev, p_dev->temp_buffer,
		VL53L5CX_DCI_FW_NB_TARGET, 16,
	(uint8_t*)&tmp, 1, 0x0C);
#endif

	status |= vl53l5cx_dci_write_data(p_dev, (uint8_t*)&single_range,
 8002eea:	f107 010c 	add.w	r1, r7, #12
 8002eee:	2304      	movs	r3, #4
 8002ef0:	f64d 1264 	movw	r2, #55652	; 0xd964
 8002ef4:	6878      	ldr	r0, [r7, #4]
 8002ef6:	f001 f8cd 	bl	8004094 <vl53l5cx_dci_write_data>
 8002efa:	4603      	mov	r3, r0
 8002efc:	461a      	mov	r2, r3
 8002efe:	7dfb      	ldrb	r3, [r7, #23]
 8002f00:	4313      	orrs	r3, r2
 8002f02:	75fb      	strb	r3, [r7, #23]
 8002f04:	e004      	b.n	8002f10 <vl53l5cx_init+0x854>
		goto exit;
 8002f06:	bf00      	nop
 8002f08:	e002      	b.n	8002f10 <vl53l5cx_init+0x854>
		goto exit;
 8002f0a:	bf00      	nop
 8002f0c:	e000      	b.n	8002f10 <vl53l5cx_init+0x854>
		goto exit;
 8002f0e:	bf00      	nop
			VL53L5CX_DCI_SINGLE_RANGE,
			(uint16_t)sizeof(single_range));
exit:
	return status;
 8002f10:	7dfb      	ldrb	r3, [r7, #23]
}
 8002f12:	4618      	mov	r0, r3
 8002f14:	3718      	adds	r7, #24
 8002f16:	46bd      	mov	sp, r7
 8002f18:	bd80      	pop	{r7, pc}
 8002f1a:	bf00      	nop
 8002f1c:	0800b214 	.word	0x0800b214
 8002f20:	08013214 	.word	0x08013214
 8002f24:	0801b214 	.word	0x0801b214
 8002f28:	080208e8 	.word	0x080208e8
 8002f2c:	080205e0 	.word	0x080205e0

08002f30 <vl53l5cx_set_i2c_address>:

uint8_t vl53l5cx_set_i2c_address(
		VL53L5CX_Configuration		*p_dev,
		uint16_t		        i2c_address)
{
 8002f30:	b580      	push	{r7, lr}
 8002f32:	b084      	sub	sp, #16
 8002f34:	af00      	add	r7, sp, #0
 8002f36:	6078      	str	r0, [r7, #4]
 8002f38:	460b      	mov	r3, r1
 8002f3a:	807b      	strh	r3, [r7, #2]
	uint8_t status = VL53L5CX_STATUS_OK;
 8002f3c:	2300      	movs	r3, #0
 8002f3e:	73fb      	strb	r3, [r7, #15]

	status |= WrByte(&(p_dev->platform), 0x7fff, 0x00);
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	2200      	movs	r2, #0
 8002f44:	f647 71ff 	movw	r1, #32767	; 0x7fff
 8002f48:	4618      	mov	r0, r3
 8002f4a:	f001 ff02 	bl	8004d52 <WrByte>
 8002f4e:	4603      	mov	r3, r0
 8002f50:	461a      	mov	r2, r3
 8002f52:	7bfb      	ldrb	r3, [r7, #15]
 8002f54:	4313      	orrs	r3, r2
 8002f56:	73fb      	strb	r3, [r7, #15]
	status |= WrByte(&(p_dev->platform), 0x4, (uint8_t)(i2c_address >> 1));
 8002f58:	6878      	ldr	r0, [r7, #4]
 8002f5a:	887b      	ldrh	r3, [r7, #2]
 8002f5c:	085b      	lsrs	r3, r3, #1
 8002f5e:	b29b      	uxth	r3, r3
 8002f60:	b2db      	uxtb	r3, r3
 8002f62:	461a      	mov	r2, r3
 8002f64:	2104      	movs	r1, #4
 8002f66:	f001 fef4 	bl	8004d52 <WrByte>
 8002f6a:	4603      	mov	r3, r0
 8002f6c:	461a      	mov	r2, r3
 8002f6e:	7bfb      	ldrb	r3, [r7, #15]
 8002f70:	4313      	orrs	r3, r2
 8002f72:	73fb      	strb	r3, [r7, #15]
	p_dev->platform.address = i2c_address;
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	887a      	ldrh	r2, [r7, #2]
 8002f78:	801a      	strh	r2, [r3, #0]
	status |= WrByte(&(p_dev->platform), 0x7fff, 0x02);
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	2202      	movs	r2, #2
 8002f7e:	f647 71ff 	movw	r1, #32767	; 0x7fff
 8002f82:	4618      	mov	r0, r3
 8002f84:	f001 fee5 	bl	8004d52 <WrByte>
 8002f88:	4603      	mov	r3, r0
 8002f8a:	461a      	mov	r2, r3
 8002f8c:	7bfb      	ldrb	r3, [r7, #15]
 8002f8e:	4313      	orrs	r3, r2
 8002f90:	73fb      	strb	r3, [r7, #15]

	return status;
 8002f92:	7bfb      	ldrb	r3, [r7, #15]
}
 8002f94:	4618      	mov	r0, r3
 8002f96:	3710      	adds	r7, #16
 8002f98:	46bd      	mov	sp, r7
 8002f9a:	bd80      	pop	{r7, pc}

08002f9c <vl53l5cx_get_power_mode>:

uint8_t vl53l5cx_get_power_mode(
		VL53L5CX_Configuration		*p_dev,
		uint8_t				*p_power_mode)
{
 8002f9c:	b580      	push	{r7, lr}
 8002f9e:	b084      	sub	sp, #16
 8002fa0:	af00      	add	r7, sp, #0
 8002fa2:	6078      	str	r0, [r7, #4]
 8002fa4:	6039      	str	r1, [r7, #0]
	uint8_t tmp, status = VL53L5CX_STATUS_OK;
 8002fa6:	2300      	movs	r3, #0
 8002fa8:	73fb      	strb	r3, [r7, #15]

	status |= WrByte(&(p_dev->platform), 0x7FFF, 0x00);
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	2200      	movs	r2, #0
 8002fae:	f647 71ff 	movw	r1, #32767	; 0x7fff
 8002fb2:	4618      	mov	r0, r3
 8002fb4:	f001 fecd 	bl	8004d52 <WrByte>
 8002fb8:	4603      	mov	r3, r0
 8002fba:	461a      	mov	r2, r3
 8002fbc:	7bfb      	ldrb	r3, [r7, #15]
 8002fbe:	4313      	orrs	r3, r2
 8002fc0:	73fb      	strb	r3, [r7, #15]
	status |= RdByte(&(p_dev->platform), 0x009, &tmp);
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	f107 020e 	add.w	r2, r7, #14
 8002fc8:	2109      	movs	r1, #9
 8002fca:	4618      	mov	r0, r3
 8002fcc:	f001 feac 	bl	8004d28 <RdByte>
 8002fd0:	4603      	mov	r3, r0
 8002fd2:	461a      	mov	r2, r3
 8002fd4:	7bfb      	ldrb	r3, [r7, #15]
 8002fd6:	4313      	orrs	r3, r2
 8002fd8:	73fb      	strb	r3, [r7, #15]

	switch(tmp)
 8002fda:	7bbb      	ldrb	r3, [r7, #14]
 8002fdc:	2b02      	cmp	r3, #2
 8002fde:	d005      	beq.n	8002fec <vl53l5cx_get_power_mode+0x50>
 8002fe0:	2b04      	cmp	r3, #4
 8002fe2:	d107      	bne.n	8002ff4 <vl53l5cx_get_power_mode+0x58>
	{
		case 0x4:
			*p_power_mode = VL53L5CX_POWER_MODE_WAKEUP;
 8002fe4:	683b      	ldr	r3, [r7, #0]
 8002fe6:	2201      	movs	r2, #1
 8002fe8:	701a      	strb	r2, [r3, #0]
			break;
 8002fea:	e009      	b.n	8003000 <vl53l5cx_get_power_mode+0x64>
		case 0x2:
			*p_power_mode = VL53L5CX_POWER_MODE_SLEEP;
 8002fec:	683b      	ldr	r3, [r7, #0]
 8002fee:	2200      	movs	r2, #0
 8002ff0:	701a      	strb	r2, [r3, #0]

			break;
 8002ff2:	e005      	b.n	8003000 <vl53l5cx_get_power_mode+0x64>
		default:
			*p_power_mode = 0;
 8002ff4:	683b      	ldr	r3, [r7, #0]
 8002ff6:	2200      	movs	r2, #0
 8002ff8:	701a      	strb	r2, [r3, #0]
			status = VL53L5CX_STATUS_ERROR;
 8002ffa:	23ff      	movs	r3, #255	; 0xff
 8002ffc:	73fb      	strb	r3, [r7, #15]
			break;
 8002ffe:	bf00      	nop
	}

	status |= WrByte(&(p_dev->platform), 0x7FFF, 0x02);
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	2202      	movs	r2, #2
 8003004:	f647 71ff 	movw	r1, #32767	; 0x7fff
 8003008:	4618      	mov	r0, r3
 800300a:	f001 fea2 	bl	8004d52 <WrByte>
 800300e:	4603      	mov	r3, r0
 8003010:	461a      	mov	r2, r3
 8003012:	7bfb      	ldrb	r3, [r7, #15]
 8003014:	4313      	orrs	r3, r2
 8003016:	73fb      	strb	r3, [r7, #15]

	return status;
 8003018:	7bfb      	ldrb	r3, [r7, #15]
}
 800301a:	4618      	mov	r0, r3
 800301c:	3710      	adds	r7, #16
 800301e:	46bd      	mov	sp, r7
 8003020:	bd80      	pop	{r7, pc}

08003022 <vl53l5cx_set_power_mode>:

uint8_t vl53l5cx_set_power_mode(
		VL53L5CX_Configuration		*p_dev,
		uint8_t			        power_mode)
{
 8003022:	b580      	push	{r7, lr}
 8003024:	b086      	sub	sp, #24
 8003026:	af02      	add	r7, sp, #8
 8003028:	6078      	str	r0, [r7, #4]
 800302a:	460b      	mov	r3, r1
 800302c:	70fb      	strb	r3, [r7, #3]
	uint8_t current_power_mode, status = VL53L5CX_STATUS_OK;
 800302e:	2300      	movs	r3, #0
 8003030:	73fb      	strb	r3, [r7, #15]

	status |= vl53l5cx_get_power_mode(p_dev, &current_power_mode);
 8003032:	f107 030e 	add.w	r3, r7, #14
 8003036:	4619      	mov	r1, r3
 8003038:	6878      	ldr	r0, [r7, #4]
 800303a:	f7ff ffaf 	bl	8002f9c <vl53l5cx_get_power_mode>
 800303e:	4603      	mov	r3, r0
 8003040:	461a      	mov	r2, r3
 8003042:	7bfb      	ldrb	r3, [r7, #15]
 8003044:	4313      	orrs	r3, r2
 8003046:	73fb      	strb	r3, [r7, #15]
	if(power_mode != current_power_mode)
 8003048:	7bbb      	ldrb	r3, [r7, #14]
 800304a:	78fa      	ldrb	r2, [r7, #3]
 800304c:	429a      	cmp	r2, r3
 800304e:	d061      	beq.n	8003114 <vl53l5cx_set_power_mode+0xf2>
	{
	switch(power_mode)
 8003050:	78fb      	ldrb	r3, [r7, #3]
 8003052:	2b00      	cmp	r3, #0
 8003054:	d028      	beq.n	80030a8 <vl53l5cx_set_power_mode+0x86>
 8003056:	2b01      	cmp	r3, #1
 8003058:	d14d      	bne.n	80030f6 <vl53l5cx_set_power_mode+0xd4>
	{
		case VL53L5CX_POWER_MODE_WAKEUP:
			status |= WrByte(&(p_dev->platform), 0x7FFF, 0x00);
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	2200      	movs	r2, #0
 800305e:	f647 71ff 	movw	r1, #32767	; 0x7fff
 8003062:	4618      	mov	r0, r3
 8003064:	f001 fe75 	bl	8004d52 <WrByte>
 8003068:	4603      	mov	r3, r0
 800306a:	461a      	mov	r2, r3
 800306c:	7bfb      	ldrb	r3, [r7, #15]
 800306e:	4313      	orrs	r3, r2
 8003070:	73fb      	strb	r3, [r7, #15]
			status |= WrByte(&(p_dev->platform), 0x09, 0x04);
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	2204      	movs	r2, #4
 8003076:	2109      	movs	r1, #9
 8003078:	4618      	mov	r0, r3
 800307a:	f001 fe6a 	bl	8004d52 <WrByte>
 800307e:	4603      	mov	r3, r0
 8003080:	461a      	mov	r2, r3
 8003082:	7bfb      	ldrb	r3, [r7, #15]
 8003084:	4313      	orrs	r3, r2
 8003086:	73fb      	strb	r3, [r7, #15]
			status |= _vl53l5cx_poll_for_answer(
 8003088:	2301      	movs	r3, #1
 800308a:	9301      	str	r3, [sp, #4]
 800308c:	2301      	movs	r3, #1
 800308e:	9300      	str	r3, [sp, #0]
 8003090:	2306      	movs	r3, #6
 8003092:	2200      	movs	r2, #0
 8003094:	2101      	movs	r1, #1
 8003096:	6878      	ldr	r0, [r7, #4]
 8003098:	f7fe ff66 	bl	8001f68 <_vl53l5cx_poll_for_answer>
 800309c:	4603      	mov	r3, r0
 800309e:	461a      	mov	r2, r3
 80030a0:	7bfb      	ldrb	r3, [r7, #15]
 80030a2:	4313      	orrs	r3, r2
 80030a4:	73fb      	strb	r3, [r7, #15]
						p_dev, 1, 0, 0x06, 0x01, 1);
			break;
 80030a6:	e029      	b.n	80030fc <vl53l5cx_set_power_mode+0xda>

		case VL53L5CX_POWER_MODE_SLEEP:
			status |= WrByte(&(p_dev->platform), 0x7FFF, 0x00);
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	2200      	movs	r2, #0
 80030ac:	f647 71ff 	movw	r1, #32767	; 0x7fff
 80030b0:	4618      	mov	r0, r3
 80030b2:	f001 fe4e 	bl	8004d52 <WrByte>
 80030b6:	4603      	mov	r3, r0
 80030b8:	461a      	mov	r2, r3
 80030ba:	7bfb      	ldrb	r3, [r7, #15]
 80030bc:	4313      	orrs	r3, r2
 80030be:	73fb      	strb	r3, [r7, #15]
			status |= WrByte(&(p_dev->platform), 0x09, 0x02);
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	2202      	movs	r2, #2
 80030c4:	2109      	movs	r1, #9
 80030c6:	4618      	mov	r0, r3
 80030c8:	f001 fe43 	bl	8004d52 <WrByte>
 80030cc:	4603      	mov	r3, r0
 80030ce:	461a      	mov	r2, r3
 80030d0:	7bfb      	ldrb	r3, [r7, #15]
 80030d2:	4313      	orrs	r3, r2
 80030d4:	73fb      	strb	r3, [r7, #15]
			status |= _vl53l5cx_poll_for_answer(
 80030d6:	2300      	movs	r3, #0
 80030d8:	9301      	str	r3, [sp, #4]
 80030da:	2301      	movs	r3, #1
 80030dc:	9300      	str	r3, [sp, #0]
 80030de:	2306      	movs	r3, #6
 80030e0:	2200      	movs	r2, #0
 80030e2:	2101      	movs	r1, #1
 80030e4:	6878      	ldr	r0, [r7, #4]
 80030e6:	f7fe ff3f 	bl	8001f68 <_vl53l5cx_poll_for_answer>
 80030ea:	4603      	mov	r3, r0
 80030ec:	461a      	mov	r2, r3
 80030ee:	7bfb      	ldrb	r3, [r7, #15]
 80030f0:	4313      	orrs	r3, r2
 80030f2:	73fb      	strb	r3, [r7, #15]
						p_dev, 1, 0, 0x06, 0x01, 0);
			break;
 80030f4:	e002      	b.n	80030fc <vl53l5cx_set_power_mode+0xda>

		default:
			status = VL53L5CX_STATUS_ERROR;
 80030f6:	23ff      	movs	r3, #255	; 0xff
 80030f8:	73fb      	strb	r3, [r7, #15]
			break;
 80030fa:	bf00      	nop
		}
		status |= WrByte(&(p_dev->platform), 0x7FFF, 0x02);
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	2202      	movs	r2, #2
 8003100:	f647 71ff 	movw	r1, #32767	; 0x7fff
 8003104:	4618      	mov	r0, r3
 8003106:	f001 fe24 	bl	8004d52 <WrByte>
 800310a:	4603      	mov	r3, r0
 800310c:	461a      	mov	r2, r3
 800310e:	7bfb      	ldrb	r3, [r7, #15]
 8003110:	4313      	orrs	r3, r2
 8003112:	73fb      	strb	r3, [r7, #15]
	}

	return status;
 8003114:	7bfb      	ldrb	r3, [r7, #15]
}
 8003116:	4618      	mov	r0, r3
 8003118:	3710      	adds	r7, #16
 800311a:	46bd      	mov	sp, r7
 800311c:	bd80      	pop	{r7, pc}
	...

08003120 <vl53l5cx_start_ranging>:

uint8_t vl53l5cx_start_ranging(
		VL53L5CX_Configuration		*p_dev)
{
 8003120:	b5b0      	push	{r4, r5, r7, lr}
 8003122:	b09c      	sub	sp, #112	; 0x70
 8003124:	af02      	add	r7, sp, #8
 8003126:	6078      	str	r0, [r7, #4]
	uint8_t resolution, status = VL53L5CX_STATUS_OK;
 8003128:	2300      	movs	r3, #0
 800312a:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
	uint16_t tmp;
	uint32_t i;
	uint32_t header_config[2] = {0, 0};
 800312e:	2300      	movs	r3, #0
 8003130:	653b      	str	r3, [r7, #80]	; 0x50
 8003132:	2300      	movs	r3, #0
 8003134:	657b      	str	r3, [r7, #84]	; 0x54

	union Block_header *bh_ptr;
	uint8_t cmd[] = {0x00, 0x03, 0x00, 0x00};
 8003136:	f44f 7340 	mov.w	r3, #768	; 0x300
 800313a:	64fb      	str	r3, [r7, #76]	; 0x4c

	status |= vl53l5cx_get_resolution(p_dev, &resolution);
 800313c:	f107 035b 	add.w	r3, r7, #91	; 0x5b
 8003140:	4619      	mov	r1, r3
 8003142:	6878      	ldr	r0, [r7, #4]
 8003144:	f000 fc52 	bl	80039ec <vl53l5cx_get_resolution>
 8003148:	4603      	mov	r3, r0
 800314a:	461a      	mov	r2, r3
 800314c:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8003150:	4313      	orrs	r3, r2
 8003152:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
	p_dev->data_read_size = 0;
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	2200      	movs	r2, #0
 800315a:	615a      	str	r2, [r3, #20]
	p_dev->streamcount = 255;
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	22ff      	movs	r2, #255	; 0xff
 8003160:	741a      	strb	r2, [r3, #16]

	/* Enable mandatory output (meta and common data) */
	uint32_t output_bh_enable[] = {
 8003162:	4ba7      	ldr	r3, [pc, #668]	; (8003400 <vl53l5cx_start_ranging+0x2e0>)
 8003164:	f107 043c 	add.w	r4, r7, #60	; 0x3c
 8003168:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800316a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
		0x00000000U,
		0x00000000U,
		0xC0000000U};

	/* Send addresses of possible output */
	uint32_t output[] ={VL53L5CX_START_BH,
 800316e:	4ba5      	ldr	r3, [pc, #660]	; (8003404 <vl53l5cx_start_ranging+0x2e4>)
 8003170:	f107 040c 	add.w	r4, r7, #12
 8003174:	461d      	mov	r5, r3
 8003176:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003178:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800317a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800317c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800317e:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8003182:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
		VL53L5CX_TARGET_STATUS_BH,
		VL53L5CX_MOTION_DETECT_BH};

	/* Enable selected outputs in the 'platform.h' file */
#ifndef VL53L5CX_DISABLE_AMBIENT_PER_SPAD
	output_bh_enable[0] += (uint32_t)8;
 8003186:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003188:	3308      	adds	r3, #8
 800318a:	63fb      	str	r3, [r7, #60]	; 0x3c
#endif
#ifndef VL53L5CX_DISABLE_NB_SPADS_ENABLED
	output_bh_enable[0] += (uint32_t)16;
#endif
#ifndef VL53L5CX_DISABLE_NB_TARGET_DETECTED
	output_bh_enable[0] += (uint32_t)32;
 800318c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800318e:	3320      	adds	r3, #32
 8003190:	63fb      	str	r3, [r7, #60]	; 0x3c
#endif
#ifndef VL53L5CX_DISABLE_SIGNAL_PER_SPAD
	output_bh_enable[0] += (uint32_t)64;
 8003192:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003194:	3340      	adds	r3, #64	; 0x40
 8003196:	63fb      	str	r3, [r7, #60]	; 0x3c
#endif
#ifndef VL53L5CX_DISABLE_RANGE_SIGMA_MM
	output_bh_enable[0] += (uint32_t)128;
#endif
#ifndef VL53L5CX_DISABLE_DISTANCE_MM
	output_bh_enable[0] += (uint32_t)256;
 8003198:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800319a:	f503 7380 	add.w	r3, r3, #256	; 0x100
 800319e:	63fb      	str	r3, [r7, #60]	; 0x3c
#endif
#ifndef VL53L5CX_DISABLE_REFLECTANCE_PERCENT
	output_bh_enable[0] += (uint32_t)512;
 80031a0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80031a2:	f503 7300 	add.w	r3, r3, #512	; 0x200
 80031a6:	63fb      	str	r3, [r7, #60]	; 0x3c
#endif
#ifndef VL53L5CX_DISABLE_TARGET_STATUS
	output_bh_enable[0] += (uint32_t)1024;
 80031a8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80031aa:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80031ae:	63fb      	str	r3, [r7, #60]	; 0x3c
#endif
#ifndef VL53L5CX_DISABLE_MOTION_INDICATOR
	output_bh_enable[0] += (uint32_t)2048;
 80031b0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80031b2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80031b6:	63fb      	str	r3, [r7, #60]	; 0x3c
#endif

	/* Update data size */
	for (i = 0; i < (uint32_t)(sizeof(output)/sizeof(uint32_t)); i++)
 80031b8:	2300      	movs	r3, #0
 80031ba:	663b      	str	r3, [r7, #96]	; 0x60
 80031bc:	e073      	b.n	80032a6 <vl53l5cx_start_ranging+0x186>
	{
		if ((output[i] == (uint8_t)0) 
 80031be:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80031c0:	009b      	lsls	r3, r3, #2
 80031c2:	3368      	adds	r3, #104	; 0x68
 80031c4:	443b      	add	r3, r7
 80031c6:	f853 3c5c 	ldr.w	r3, [r3, #-92]
 80031ca:	2b00      	cmp	r3, #0
 80031cc:	d067      	beq.n	800329e <vl53l5cx_start_ranging+0x17e>
                    || ((output_bh_enable[i/(uint32_t)32]
 80031ce:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80031d0:	095b      	lsrs	r3, r3, #5
 80031d2:	009b      	lsls	r3, r3, #2
 80031d4:	3368      	adds	r3, #104	; 0x68
 80031d6:	443b      	add	r3, r7
 80031d8:	f853 2c2c 	ldr.w	r2, [r3, #-44]
                         &((uint32_t)1 << (i%(uint32_t)32))) == (uint32_t)0))
 80031dc:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80031de:	f003 031f 	and.w	r3, r3, #31
 80031e2:	fa22 f303 	lsr.w	r3, r2, r3
 80031e6:	f003 0301 	and.w	r3, r3, #1
                    || ((output_bh_enable[i/(uint32_t)32]
 80031ea:	2b00      	cmp	r3, #0
 80031ec:	d057      	beq.n	800329e <vl53l5cx_start_ranging+0x17e>
		{
			continue;
		}

		bh_ptr = (union Block_header *)&(output[i]);
 80031ee:	f107 020c 	add.w	r2, r7, #12
 80031f2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80031f4:	009b      	lsls	r3, r3, #2
 80031f6:	4413      	add	r3, r2
 80031f8:	65fb      	str	r3, [r7, #92]	; 0x5c
		if (((uint8_t)bh_ptr->type >= (uint8_t)0x1) 
 80031fa:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80031fc:	781b      	ldrb	r3, [r3, #0]
 80031fe:	f003 030f 	and.w	r3, r3, #15
 8003202:	b2db      	uxtb	r3, r3
 8003204:	2b00      	cmp	r3, #0
 8003206:	d03a      	beq.n	800327e <vl53l5cx_start_ranging+0x15e>
                    && ((uint8_t)bh_ptr->type < (uint8_t)0x0d))
 8003208:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800320a:	781b      	ldrb	r3, [r3, #0]
 800320c:	f3c3 0303 	ubfx	r3, r3, #0, #4
 8003210:	b2db      	uxtb	r3, r3
 8003212:	2b0c      	cmp	r3, #12
 8003214:	d833      	bhi.n	800327e <vl53l5cx_start_ranging+0x15e>
		{
			if ((bh_ptr->idx >= (uint16_t)0x54d0) 
 8003216:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003218:	885b      	ldrh	r3, [r3, #2]
 800321a:	f245 42cf 	movw	r2, #21711	; 0x54cf
 800321e:	4293      	cmp	r3, r2
 8003220:	d910      	bls.n	8003244 <vl53l5cx_start_ranging+0x124>
                            && (bh_ptr->idx < (uint16_t)(0x54d0 + 960)))
 8003222:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003224:	885b      	ldrh	r3, [r3, #2]
 8003226:	f645 028f 	movw	r2, #22671	; 0x588f
 800322a:	4293      	cmp	r3, r2
 800322c:	d80a      	bhi.n	8003244 <vl53l5cx_start_ranging+0x124>
			{
				bh_ptr->size = resolution;
 800322e:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
 8003232:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003236:	b299      	uxth	r1, r3
 8003238:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800323a:	8813      	ldrh	r3, [r2, #0]
 800323c:	f361 130f 	bfi	r3, r1, #4, #12
 8003240:	8013      	strh	r3, [r2, #0]
 8003242:	e009      	b.n	8003258 <vl53l5cx_start_ranging+0x138>
			}
			else
			{
				bh_ptr->size = (uint16_t)((uint16_t)resolution
 8003244:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
 8003248:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800324c:	b299      	uxth	r1, r3
 800324e:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8003250:	8813      	ldrh	r3, [r2, #0]
 8003252:	f361 130f 	bfi	r3, r1, #4, #12
 8003256:	8013      	strh	r3, [r2, #0]
                                  * (uint16_t)VL53L5CX_NB_TARGET_PER_ZONE);
			}
			p_dev->data_read_size += bh_ptr->type * bh_ptr->size;
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	695b      	ldr	r3, [r3, #20]
 800325c:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800325e:	7812      	ldrb	r2, [r2, #0]
 8003260:	f3c2 0203 	ubfx	r2, r2, #0, #4
 8003264:	b2d2      	uxtb	r2, r2
 8003266:	4611      	mov	r1, r2
 8003268:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800326a:	8812      	ldrh	r2, [r2, #0]
 800326c:	f3c2 120b 	ubfx	r2, r2, #4, #12
 8003270:	b292      	uxth	r2, r2
 8003272:	fb01 f202 	mul.w	r2, r1, r2
 8003276:	441a      	add	r2, r3
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	615a      	str	r2, [r3, #20]
 800327c:	e009      	b.n	8003292 <vl53l5cx_start_ranging+0x172>
		}
		else
		{
			p_dev->data_read_size += bh_ptr->size;
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	695b      	ldr	r3, [r3, #20]
 8003282:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8003284:	8812      	ldrh	r2, [r2, #0]
 8003286:	f3c2 120b 	ubfx	r2, r2, #4, #12
 800328a:	b292      	uxth	r2, r2
 800328c:	441a      	add	r2, r3
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	615a      	str	r2, [r3, #20]
		}
		p_dev->data_read_size += (uint32_t)4;
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	695b      	ldr	r3, [r3, #20]
 8003296:	1d1a      	adds	r2, r3, #4
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	615a      	str	r2, [r3, #20]
 800329c:	e000      	b.n	80032a0 <vl53l5cx_start_ranging+0x180>
			continue;
 800329e:	bf00      	nop
	for (i = 0; i < (uint32_t)(sizeof(output)/sizeof(uint32_t)); i++)
 80032a0:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80032a2:	3301      	adds	r3, #1
 80032a4:	663b      	str	r3, [r7, #96]	; 0x60
 80032a6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80032a8:	2b0b      	cmp	r3, #11
 80032aa:	d988      	bls.n	80031be <vl53l5cx_start_ranging+0x9e>
	}
	p_dev->data_read_size += (uint32_t)24;
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	695b      	ldr	r3, [r3, #20]
 80032b0:	f103 0218 	add.w	r2, r3, #24
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	615a      	str	r2, [r3, #20]

	status |= vl53l5cx_dci_write_data(p_dev,
 80032b8:	f107 010c 	add.w	r1, r7, #12
 80032bc:	2330      	movs	r3, #48	; 0x30
 80032be:	f64d 1280 	movw	r2, #55680	; 0xd980
 80032c2:	6878      	ldr	r0, [r7, #4]
 80032c4:	f000 fee6 	bl	8004094 <vl53l5cx_dci_write_data>
 80032c8:	4603      	mov	r3, r0
 80032ca:	461a      	mov	r2, r3
 80032cc:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 80032d0:	4313      	orrs	r3, r2
 80032d2:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
			(uint8_t*)&(output), VL53L5CX_DCI_OUTPUT_LIST,
			(uint16_t)sizeof(output));

	header_config[0] = p_dev->data_read_size;
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	695b      	ldr	r3, [r3, #20]
 80032da:	653b      	str	r3, [r7, #80]	; 0x50
	header_config[1] = i + (uint32_t)1;
 80032dc:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80032de:	3301      	adds	r3, #1
 80032e0:	657b      	str	r3, [r7, #84]	; 0x54

	status |= vl53l5cx_dci_write_data(p_dev,
 80032e2:	f107 0150 	add.w	r1, r7, #80	; 0x50
 80032e6:	2308      	movs	r3, #8
 80032e8:	f64d 1268 	movw	r2, #55656	; 0xd968
 80032ec:	6878      	ldr	r0, [r7, #4]
 80032ee:	f000 fed1 	bl	8004094 <vl53l5cx_dci_write_data>
 80032f2:	4603      	mov	r3, r0
 80032f4:	461a      	mov	r2, r3
 80032f6:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 80032fa:	4313      	orrs	r3, r2
 80032fc:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
			(uint8_t*)&(header_config), VL53L5CX_DCI_OUTPUT_CONFIG,
			(uint16_t)sizeof(header_config));

	status |= vl53l5cx_dci_write_data(p_dev,
 8003300:	f107 013c 	add.w	r1, r7, #60	; 0x3c
 8003304:	2310      	movs	r3, #16
 8003306:	f64d 1270 	movw	r2, #55664	; 0xd970
 800330a:	6878      	ldr	r0, [r7, #4]
 800330c:	f000 fec2 	bl	8004094 <vl53l5cx_dci_write_data>
 8003310:	4603      	mov	r3, r0
 8003312:	461a      	mov	r2, r3
 8003314:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8003318:	4313      	orrs	r3, r2
 800331a:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
			(uint8_t*)&(output_bh_enable), VL53L5CX_DCI_OUTPUT_ENABLES,
			(uint16_t)sizeof(output_bh_enable));

	/* Start xshut bypass (interrupt mode) */
	status |= WrByte(&(p_dev->platform), 0x7fff, 0x00);
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	2200      	movs	r2, #0
 8003322:	f647 71ff 	movw	r1, #32767	; 0x7fff
 8003326:	4618      	mov	r0, r3
 8003328:	f001 fd13 	bl	8004d52 <WrByte>
 800332c:	4603      	mov	r3, r0
 800332e:	461a      	mov	r2, r3
 8003330:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8003334:	4313      	orrs	r3, r2
 8003336:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
	status |= WrByte(&(p_dev->platform), 0x09, 0x05);
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	2205      	movs	r2, #5
 800333e:	2109      	movs	r1, #9
 8003340:	4618      	mov	r0, r3
 8003342:	f001 fd06 	bl	8004d52 <WrByte>
 8003346:	4603      	mov	r3, r0
 8003348:	461a      	mov	r2, r3
 800334a:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800334e:	4313      	orrs	r3, r2
 8003350:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
	status |= WrByte(&(p_dev->platform), 0x7fff, 0x02);
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	2202      	movs	r2, #2
 8003358:	f647 71ff 	movw	r1, #32767	; 0x7fff
 800335c:	4618      	mov	r0, r3
 800335e:	f001 fcf8 	bl	8004d52 <WrByte>
 8003362:	4603      	mov	r3, r0
 8003364:	461a      	mov	r2, r3
 8003366:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800336a:	4313      	orrs	r3, r2
 800336c:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67

	/* Start ranging session */
	status |= WrMulti(&(p_dev->platform), VL53L5CX_UI_CMD_END -
 8003370:	6878      	ldr	r0, [r7, #4]
 8003372:	f107 024c 	add.w	r2, r7, #76	; 0x4c
 8003376:	2304      	movs	r3, #4
 8003378:	f642 71fc 	movw	r1, #12284	; 0x2ffc
 800337c:	f001 fcff 	bl	8004d7e <WrMulti>
 8003380:	4603      	mov	r3, r0
 8003382:	461a      	mov	r2, r3
 8003384:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8003388:	4313      	orrs	r3, r2
 800338a:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
			(uint16_t)(4 - 1), (uint8_t*)cmd, sizeof(cmd));
	status |= _vl53l5cx_poll_for_answer(p_dev, 4, 1,
 800338e:	2303      	movs	r3, #3
 8003390:	9301      	str	r3, [sp, #4]
 8003392:	23ff      	movs	r3, #255	; 0xff
 8003394:	9300      	str	r3, [sp, #0]
 8003396:	f44f 5330 	mov.w	r3, #11264	; 0x2c00
 800339a:	2201      	movs	r2, #1
 800339c:	2104      	movs	r1, #4
 800339e:	6878      	ldr	r0, [r7, #4]
 80033a0:	f7fe fde2 	bl	8001f68 <_vl53l5cx_poll_for_answer>
 80033a4:	4603      	mov	r3, r0
 80033a6:	461a      	mov	r2, r3
 80033a8:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 80033ac:	4313      	orrs	r3, r2
 80033ae:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
			VL53L5CX_UI_CMD_STATUS, 0xff, 0x03);

	/* Read ui range data content and compare if data size is the correct one */
	status |= vl53l5cx_dci_read_data(p_dev,
			(uint8_t*)p_dev->temp_buffer, 0x5440, 12);
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	f503 61a2 	add.w	r1, r3, #1296	; 0x510
	status |= vl53l5cx_dci_read_data(p_dev,
 80033b8:	230c      	movs	r3, #12
 80033ba:	f245 4240 	movw	r2, #21568	; 0x5440
 80033be:	6878      	ldr	r0, [r7, #4]
 80033c0:	f000 fdde 	bl	8003f80 <vl53l5cx_dci_read_data>
 80033c4:	4603      	mov	r3, r0
 80033c6:	461a      	mov	r2, r3
 80033c8:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 80033cc:	4313      	orrs	r3, r2
 80033ce:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
	(void)memcpy(&tmp, &(p_dev->temp_buffer[0x8]), sizeof(tmp));
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	f503 63a3 	add.w	r3, r3, #1304	; 0x518
 80033d8:	881b      	ldrh	r3, [r3, #0]
 80033da:	b29b      	uxth	r3, r3
 80033dc:	f8a7 3058 	strh.w	r3, [r7, #88]	; 0x58
	if(tmp != p_dev->data_read_size)
 80033e0:	f8b7 3058 	ldrh.w	r3, [r7, #88]	; 0x58
 80033e4:	461a      	mov	r2, r3
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	695b      	ldr	r3, [r3, #20]
 80033ea:	429a      	cmp	r2, r3
 80033ec:	d002      	beq.n	80033f4 <vl53l5cx_start_ranging+0x2d4>
	{
		status |= VL53L5CX_STATUS_ERROR;
 80033ee:	23ff      	movs	r3, #255	; 0xff
 80033f0:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
	}

	return status;
 80033f4:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 80033f8:	4618      	mov	r0, r3
 80033fa:	3768      	adds	r7, #104	; 0x68
 80033fc:	46bd      	mov	sp, r7
 80033fe:	bdb0      	pop	{r4, r5, r7, pc}
 8003400:	0800ae34 	.word	0x0800ae34
 8003404:	0800ae44 	.word	0x0800ae44

08003408 <vl53l5cx_stop_ranging>:

uint8_t vl53l5cx_stop_ranging(
		VL53L5CX_Configuration		*p_dev)
{
 8003408:	b580      	push	{r7, lr}
 800340a:	b086      	sub	sp, #24
 800340c:	af00      	add	r7, sp, #0
 800340e:	6078      	str	r0, [r7, #4]
	uint8_t tmp = 0, status = VL53L5CX_STATUS_OK;
 8003410:	2300      	movs	r3, #0
 8003412:	74fb      	strb	r3, [r7, #19]
 8003414:	2300      	movs	r3, #0
 8003416:	75fb      	strb	r3, [r7, #23]
	uint16_t timeout = 0;
 8003418:	2300      	movs	r3, #0
 800341a:	82bb      	strh	r3, [r7, #20]
	uint32_t auto_stop_flag = 0;
 800341c:	2300      	movs	r3, #0
 800341e:	60fb      	str	r3, [r7, #12]

	status |= RdMulti(&(p_dev->platform),
 8003420:	6878      	ldr	r0, [r7, #4]
 8003422:	f107 020c 	add.w	r2, r7, #12
 8003426:	2304      	movs	r3, #4
 8003428:	f642 71fc 	movw	r1, #12284	; 0x2ffc
 800342c:	f001 fcbe 	bl	8004dac <RdMulti>
 8003430:	4603      	mov	r3, r0
 8003432:	461a      	mov	r2, r3
 8003434:	7dfb      	ldrb	r3, [r7, #23]
 8003436:	4313      	orrs	r3, r2
 8003438:	75fb      	strb	r3, [r7, #23]
                          0x2FFC, (uint8_t*)&auto_stop_flag, 4);
	if(auto_stop_flag != (uint32_t)0x4FF)
 800343a:	68fb      	ldr	r3, [r7, #12]
 800343c:	f240 42ff 	movw	r2, #1279	; 0x4ff
 8003440:	4293      	cmp	r3, r2
 8003442:	d048      	beq.n	80034d6 <vl53l5cx_stop_ranging+0xce>
	{
		status |= WrByte(&(p_dev->platform), 0x7fff, 0x00);
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	2200      	movs	r2, #0
 8003448:	f647 71ff 	movw	r1, #32767	; 0x7fff
 800344c:	4618      	mov	r0, r3
 800344e:	f001 fc80 	bl	8004d52 <WrByte>
 8003452:	4603      	mov	r3, r0
 8003454:	461a      	mov	r2, r3
 8003456:	7dfb      	ldrb	r3, [r7, #23]
 8003458:	4313      	orrs	r3, r2
 800345a:	75fb      	strb	r3, [r7, #23]

		/* Provoke MCU stop */
		status |= WrByte(&(p_dev->platform), 0x15, 0x16);
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	2216      	movs	r2, #22
 8003460:	2115      	movs	r1, #21
 8003462:	4618      	mov	r0, r3
 8003464:	f001 fc75 	bl	8004d52 <WrByte>
 8003468:	4603      	mov	r3, r0
 800346a:	461a      	mov	r2, r3
 800346c:	7dfb      	ldrb	r3, [r7, #23]
 800346e:	4313      	orrs	r3, r2
 8003470:	75fb      	strb	r3, [r7, #23]
		status |= WrByte(&(p_dev->platform), 0x14, 0x01);
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	2201      	movs	r2, #1
 8003476:	2114      	movs	r1, #20
 8003478:	4618      	mov	r0, r3
 800347a:	f001 fc6a 	bl	8004d52 <WrByte>
 800347e:	4603      	mov	r3, r0
 8003480:	461a      	mov	r2, r3
 8003482:	7dfb      	ldrb	r3, [r7, #23]
 8003484:	4313      	orrs	r3, r2
 8003486:	75fb      	strb	r3, [r7, #23]

		/* Poll for G02 status 0 MCU stop */
		while(((tmp & (uint8_t)0x80) >> 7) == (uint8_t)0x00)
 8003488:	e021      	b.n	80034ce <vl53l5cx_stop_ranging+0xc6>
		{
			status |= RdByte(&(p_dev->platform), 0x6, &tmp);
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	f107 0213 	add.w	r2, r7, #19
 8003490:	2106      	movs	r1, #6
 8003492:	4618      	mov	r0, r3
 8003494:	f001 fc48 	bl	8004d28 <RdByte>
 8003498:	4603      	mov	r3, r0
 800349a:	461a      	mov	r2, r3
 800349c:	7dfb      	ldrb	r3, [r7, #23]
 800349e:	4313      	orrs	r3, r2
 80034a0:	75fb      	strb	r3, [r7, #23]
			status |= WaitMs(&(p_dev->platform), 10);
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	210a      	movs	r1, #10
 80034a6:	4618      	mov	r0, r3
 80034a8:	f001 fccd 	bl	8004e46 <WaitMs>
 80034ac:	4603      	mov	r3, r0
 80034ae:	461a      	mov	r2, r3
 80034b0:	7dfb      	ldrb	r3, [r7, #23]
 80034b2:	4313      	orrs	r3, r2
 80034b4:	75fb      	strb	r3, [r7, #23]
			timeout++;	/* Timeout reached after 5 seconds */
 80034b6:	8abb      	ldrh	r3, [r7, #20]
 80034b8:	3301      	adds	r3, #1
 80034ba:	82bb      	strh	r3, [r7, #20]

			if(timeout > (uint16_t)500)
 80034bc:	8abb      	ldrh	r3, [r7, #20]
 80034be:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 80034c2:	d904      	bls.n	80034ce <vl53l5cx_stop_ranging+0xc6>
			{
				status |= tmp;
 80034c4:	7cfa      	ldrb	r2, [r7, #19]
 80034c6:	7dfb      	ldrb	r3, [r7, #23]
 80034c8:	4313      	orrs	r3, r2
 80034ca:	75fb      	strb	r3, [r7, #23]
				break;
 80034cc:	e003      	b.n	80034d6 <vl53l5cx_stop_ranging+0xce>
		while(((tmp & (uint8_t)0x80) >> 7) == (uint8_t)0x00)
 80034ce:	7cfb      	ldrb	r3, [r7, #19]
 80034d0:	b25b      	sxtb	r3, r3
 80034d2:	2b00      	cmp	r3, #0
 80034d4:	dad9      	bge.n	800348a <vl53l5cx_stop_ranging+0x82>
			}
		}
	}

	/* Check GO2 status 1 if status is still OK */
	status |= RdByte(&(p_dev->platform), 0x6, &tmp);
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	f107 0213 	add.w	r2, r7, #19
 80034dc:	2106      	movs	r1, #6
 80034de:	4618      	mov	r0, r3
 80034e0:	f001 fc22 	bl	8004d28 <RdByte>
 80034e4:	4603      	mov	r3, r0
 80034e6:	461a      	mov	r2, r3
 80034e8:	7dfb      	ldrb	r3, [r7, #23]
 80034ea:	4313      	orrs	r3, r2
 80034ec:	75fb      	strb	r3, [r7, #23]
	if((tmp & (uint8_t)0x80) != (uint8_t)0){
 80034ee:	7cfb      	ldrb	r3, [r7, #19]
 80034f0:	b25b      	sxtb	r3, r3
 80034f2:	2b00      	cmp	r3, #0
 80034f4:	da15      	bge.n	8003522 <vl53l5cx_stop_ranging+0x11a>
		status |= RdByte(&(p_dev->platform), 0x7, &tmp);
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	f107 0213 	add.w	r2, r7, #19
 80034fc:	2107      	movs	r1, #7
 80034fe:	4618      	mov	r0, r3
 8003500:	f001 fc12 	bl	8004d28 <RdByte>
 8003504:	4603      	mov	r3, r0
 8003506:	461a      	mov	r2, r3
 8003508:	7dfb      	ldrb	r3, [r7, #23]
 800350a:	4313      	orrs	r3, r2
 800350c:	75fb      	strb	r3, [r7, #23]
		if((tmp != (uint8_t)0x84) && (tmp != (uint8_t)0x85)){
 800350e:	7cfb      	ldrb	r3, [r7, #19]
 8003510:	2b84      	cmp	r3, #132	; 0x84
 8003512:	d006      	beq.n	8003522 <vl53l5cx_stop_ranging+0x11a>
 8003514:	7cfb      	ldrb	r3, [r7, #19]
 8003516:	2b85      	cmp	r3, #133	; 0x85
 8003518:	d003      	beq.n	8003522 <vl53l5cx_stop_ranging+0x11a>
		   status |= tmp;
 800351a:	7cfa      	ldrb	r2, [r7, #19]
 800351c:	7dfb      	ldrb	r3, [r7, #23]
 800351e:	4313      	orrs	r3, r2
 8003520:	75fb      	strb	r3, [r7, #23]
		}
	}

	/* Undo MCU stop */
	status |= WrByte(&(p_dev->platform), 0x7fff, 0x00);
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	2200      	movs	r2, #0
 8003526:	f647 71ff 	movw	r1, #32767	; 0x7fff
 800352a:	4618      	mov	r0, r3
 800352c:	f001 fc11 	bl	8004d52 <WrByte>
 8003530:	4603      	mov	r3, r0
 8003532:	461a      	mov	r2, r3
 8003534:	7dfb      	ldrb	r3, [r7, #23]
 8003536:	4313      	orrs	r3, r2
 8003538:	75fb      	strb	r3, [r7, #23]
	status |= WrByte(&(p_dev->platform), 0x14, 0x00);
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	2200      	movs	r2, #0
 800353e:	2114      	movs	r1, #20
 8003540:	4618      	mov	r0, r3
 8003542:	f001 fc06 	bl	8004d52 <WrByte>
 8003546:	4603      	mov	r3, r0
 8003548:	461a      	mov	r2, r3
 800354a:	7dfb      	ldrb	r3, [r7, #23]
 800354c:	4313      	orrs	r3, r2
 800354e:	75fb      	strb	r3, [r7, #23]
	status |= WrByte(&(p_dev->platform), 0x15, 0x00);
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	2200      	movs	r2, #0
 8003554:	2115      	movs	r1, #21
 8003556:	4618      	mov	r0, r3
 8003558:	f001 fbfb 	bl	8004d52 <WrByte>
 800355c:	4603      	mov	r3, r0
 800355e:	461a      	mov	r2, r3
 8003560:	7dfb      	ldrb	r3, [r7, #23]
 8003562:	4313      	orrs	r3, r2
 8003564:	75fb      	strb	r3, [r7, #23]

	/* Stop xshut bypass */
	status |= WrByte(&(p_dev->platform), 0x09, 0x04);
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	2204      	movs	r2, #4
 800356a:	2109      	movs	r1, #9
 800356c:	4618      	mov	r0, r3
 800356e:	f001 fbf0 	bl	8004d52 <WrByte>
 8003572:	4603      	mov	r3, r0
 8003574:	461a      	mov	r2, r3
 8003576:	7dfb      	ldrb	r3, [r7, #23]
 8003578:	4313      	orrs	r3, r2
 800357a:	75fb      	strb	r3, [r7, #23]
	status |= WrByte(&(p_dev->platform), 0x7fff, 0x02);
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	2202      	movs	r2, #2
 8003580:	f647 71ff 	movw	r1, #32767	; 0x7fff
 8003584:	4618      	mov	r0, r3
 8003586:	f001 fbe4 	bl	8004d52 <WrByte>
 800358a:	4603      	mov	r3, r0
 800358c:	461a      	mov	r2, r3
 800358e:	7dfb      	ldrb	r3, [r7, #23]
 8003590:	4313      	orrs	r3, r2
 8003592:	75fb      	strb	r3, [r7, #23]

	return status;
 8003594:	7dfb      	ldrb	r3, [r7, #23]
}
 8003596:	4618      	mov	r0, r3
 8003598:	3718      	adds	r7, #24
 800359a:	46bd      	mov	sp, r7
 800359c:	bd80      	pop	{r7, pc}

0800359e <vl53l5cx_check_data_ready>:

uint8_t vl53l5cx_check_data_ready(
		VL53L5CX_Configuration		*p_dev,
		uint8_t				*p_isReady)
{
 800359e:	b580      	push	{r7, lr}
 80035a0:	b084      	sub	sp, #16
 80035a2:	af00      	add	r7, sp, #0
 80035a4:	6078      	str	r0, [r7, #4]
 80035a6:	6039      	str	r1, [r7, #0]
	uint8_t status = VL53L5CX_STATUS_OK;
 80035a8:	2300      	movs	r3, #0
 80035aa:	73fb      	strb	r3, [r7, #15]

	status |= RdMulti(&(p_dev->platform), 0x0, p_dev->temp_buffer, 4);
 80035ac:	6878      	ldr	r0, [r7, #4]
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	f503 62a2 	add.w	r2, r3, #1296	; 0x510
 80035b4:	2304      	movs	r3, #4
 80035b6:	2100      	movs	r1, #0
 80035b8:	f001 fbf8 	bl	8004dac <RdMulti>
 80035bc:	4603      	mov	r3, r0
 80035be:	461a      	mov	r2, r3
 80035c0:	7bfb      	ldrb	r3, [r7, #15]
 80035c2:	4313      	orrs	r3, r2
 80035c4:	73fb      	strb	r3, [r7, #15]

	if((p_dev->temp_buffer[0] != p_dev->streamcount)
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	f893 2510 	ldrb.w	r2, [r3, #1296]	; 0x510
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	7c1b      	ldrb	r3, [r3, #16]
 80035d0:	429a      	cmp	r2, r3
 80035d2:	d020      	beq.n	8003616 <vl53l5cx_check_data_ready+0x78>
			&& (p_dev->temp_buffer[0] != (uint8_t)255)
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	f893 3510 	ldrb.w	r3, [r3, #1296]	; 0x510
 80035da:	2bff      	cmp	r3, #255	; 0xff
 80035dc:	d01b      	beq.n	8003616 <vl53l5cx_check_data_ready+0x78>
			&& (p_dev->temp_buffer[1] == (uint8_t)0x5)
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	f893 3511 	ldrb.w	r3, [r3, #1297]	; 0x511
 80035e4:	2b05      	cmp	r3, #5
 80035e6:	d116      	bne.n	8003616 <vl53l5cx_check_data_ready+0x78>
			&& ((p_dev->temp_buffer[2] & (uint8_t)0x5) == (uint8_t)0x5)
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	f893 3512 	ldrb.w	r3, [r3, #1298]	; 0x512
 80035ee:	f003 0305 	and.w	r3, r3, #5
 80035f2:	2b05      	cmp	r3, #5
 80035f4:	d10f      	bne.n	8003616 <vl53l5cx_check_data_ready+0x78>
			&& ((p_dev->temp_buffer[3] & (uint8_t)0x10) ==(uint8_t)0x10)
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	f893 3513 	ldrb.w	r3, [r3, #1299]	; 0x513
 80035fc:	f003 0310 	and.w	r3, r3, #16
 8003600:	2b00      	cmp	r3, #0
 8003602:	d008      	beq.n	8003616 <vl53l5cx_check_data_ready+0x78>
			)
	{
		*p_isReady = (uint8_t)1;
 8003604:	683b      	ldr	r3, [r7, #0]
 8003606:	2201      	movs	r2, #1
 8003608:	701a      	strb	r2, [r3, #0]
		 p_dev->streamcount = p_dev->temp_buffer[0];
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	f893 2510 	ldrb.w	r2, [r3, #1296]	; 0x510
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	741a      	strb	r2, [r3, #16]
 8003614:	e00e      	b.n	8003634 <vl53l5cx_check_data_ready+0x96>
	}
	else
	{
        if ((p_dev->temp_buffer[3] & (uint8_t)0x80) != (uint8_t)0)
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	f893 3513 	ldrb.w	r3, [r3, #1299]	; 0x513
 800361c:	b25b      	sxtb	r3, r3
 800361e:	2b00      	cmp	r3, #0
 8003620:	da05      	bge.n	800362e <vl53l5cx_check_data_ready+0x90>
        {
        	status |= p_dev->temp_buffer[2];	/* Return GO2 error status */
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	f893 2512 	ldrb.w	r2, [r3, #1298]	; 0x512
 8003628:	7bfb      	ldrb	r3, [r7, #15]
 800362a:	4313      	orrs	r3, r2
 800362c:	73fb      	strb	r3, [r7, #15]
        }

		*p_isReady = 0;
 800362e:	683b      	ldr	r3, [r7, #0]
 8003630:	2200      	movs	r2, #0
 8003632:	701a      	strb	r2, [r3, #0]
	}

	return status;
 8003634:	7bfb      	ldrb	r3, [r7, #15]
}
 8003636:	4618      	mov	r0, r3
 8003638:	3710      	adds	r7, #16
 800363a:	46bd      	mov	sp, r7
 800363c:	bd80      	pop	{r7, pc}
	...

08003640 <vl53l5cx_get_ranging_data>:

uint8_t vl53l5cx_get_ranging_data(
		VL53L5CX_Configuration		*p_dev,
		VL53L5CX_ResultsData		*p_results)
{
 8003640:	b580      	push	{r7, lr}
 8003642:	b088      	sub	sp, #32
 8003644:	af00      	add	r7, sp, #0
 8003646:	6078      	str	r0, [r7, #4]
 8003648:	6039      	str	r1, [r7, #0]
	uint8_t status = VL53L5CX_STATUS_OK;
 800364a:	2300      	movs	r3, #0
 800364c:	77fb      	strb	r3, [r7, #31]
	union Block_header *bh_ptr;
	uint16_t header_id, footer_id;
	uint32_t i, j, msize;

	status |= RdMulti(&(p_dev->platform), 0x0,
 800364e:	6878      	ldr	r0, [r7, #4]
			p_dev->temp_buffer, p_dev->data_read_size);
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	f503 62a2 	add.w	r2, r3, #1296	; 0x510
	status |= RdMulti(&(p_dev->platform), 0x0,
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	695b      	ldr	r3, [r3, #20]
 800365a:	2100      	movs	r1, #0
 800365c:	f001 fba6 	bl	8004dac <RdMulti>
 8003660:	4603      	mov	r3, r0
 8003662:	461a      	mov	r2, r3
 8003664:	7ffb      	ldrb	r3, [r7, #31]
 8003666:	4313      	orrs	r3, r2
 8003668:	77fb      	strb	r3, [r7, #31]
	p_dev->streamcount = p_dev->temp_buffer[0];
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	f893 2510 	ldrb.w	r2, [r3, #1296]	; 0x510
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	741a      	strb	r2, [r3, #16]
	SwapBuffer(p_dev->temp_buffer, (uint16_t)p_dev->data_read_size);
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	f503 62a2 	add.w	r2, r3, #1296	; 0x510
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	695b      	ldr	r3, [r3, #20]
 800367e:	b29b      	uxth	r3, r3
 8003680:	4619      	mov	r1, r3
 8003682:	4610      	mov	r0, r2
 8003684:	f001 fba9 	bl	8004dda <SwapBuffer>

	/* Start conversion at position 16 to avoid headers */
	for (i = 16U; i < (uint32_t)p_dev->data_read_size; i+=4U)
 8003688:	2310      	movs	r3, #16
 800368a:	61bb      	str	r3, [r7, #24]
 800368c:	e0db      	b.n	8003846 <vl53l5cx_get_ranging_data+0x206>
	{
		bh_ptr = (union Block_header *)&(p_dev->temp_buffer[i]);
 800368e:	69bb      	ldr	r3, [r7, #24]
 8003690:	f503 63a2 	add.w	r3, r3, #1296	; 0x510
 8003694:	687a      	ldr	r2, [r7, #4]
 8003696:	4413      	add	r3, r2
 8003698:	60bb      	str	r3, [r7, #8]
		if ((bh_ptr->type > 0x1U) 
 800369a:	68bb      	ldr	r3, [r7, #8]
 800369c:	781b      	ldrb	r3, [r3, #0]
 800369e:	f3c3 0303 	ubfx	r3, r3, #0, #4
 80036a2:	b2db      	uxtb	r3, r3
 80036a4:	2b01      	cmp	r3, #1
 80036a6:	d915      	bls.n	80036d4 <vl53l5cx_get_ranging_data+0x94>
                    && (bh_ptr->type < 0xdU))
 80036a8:	68bb      	ldr	r3, [r7, #8]
 80036aa:	781b      	ldrb	r3, [r3, #0]
 80036ac:	f3c3 0303 	ubfx	r3, r3, #0, #4
 80036b0:	b2db      	uxtb	r3, r3
 80036b2:	2b0c      	cmp	r3, #12
 80036b4:	d80e      	bhi.n	80036d4 <vl53l5cx_get_ranging_data+0x94>
		{
			msize = bh_ptr->type * bh_ptr->size;
 80036b6:	68bb      	ldr	r3, [r7, #8]
 80036b8:	781b      	ldrb	r3, [r3, #0]
 80036ba:	f3c3 0303 	ubfx	r3, r3, #0, #4
 80036be:	b2db      	uxtb	r3, r3
 80036c0:	461a      	mov	r2, r3
 80036c2:	68bb      	ldr	r3, [r7, #8]
 80036c4:	881b      	ldrh	r3, [r3, #0]
 80036c6:	f3c3 130b 	ubfx	r3, r3, #4, #12
 80036ca:	b29b      	uxth	r3, r3
 80036cc:	fb02 f303 	mul.w	r3, r2, r3
 80036d0:	613b      	str	r3, [r7, #16]
 80036d2:	e005      	b.n	80036e0 <vl53l5cx_get_ranging_data+0xa0>
		}
		else
		{
			msize = bh_ptr->size;
 80036d4:	68bb      	ldr	r3, [r7, #8]
 80036d6:	881b      	ldrh	r3, [r3, #0]
 80036d8:	f3c3 130b 	ubfx	r3, r3, #4, #12
 80036dc:	b29b      	uxth	r3, r3
 80036de:	613b      	str	r3, [r7, #16]
		}

		switch(bh_ptr->idx){
 80036e0:	68bb      	ldr	r3, [r7, #8]
 80036e2:	885b      	ldrh	r3, [r3, #2]
 80036e4:	f24e 0284 	movw	r2, #57476	; 0xe084
 80036e8:	4293      	cmp	r3, r2
 80036ea:	f000 8088 	beq.w	80037fe <vl53l5cx_get_ranging_data+0x1be>
 80036ee:	f24e 0284 	movw	r2, #57476	; 0xe084
 80036f2:	4293      	cmp	r3, r2
 80036f4:	f300 809f 	bgt.w	8003836 <vl53l5cx_get_ranging_data+0x1f6>
 80036f8:	f24e 0244 	movw	r2, #57412	; 0xe044
 80036fc:	4293      	cmp	r3, r2
 80036fe:	d070      	beq.n	80037e2 <vl53l5cx_get_ranging_data+0x1a2>
 8003700:	f24e 0244 	movw	r2, #57412	; 0xe044
 8003704:	4293      	cmp	r3, r2
 8003706:	f300 8096 	bgt.w	8003836 <vl53l5cx_get_ranging_data+0x1f6>
 800370a:	f64d 7244 	movw	r2, #57156	; 0xdf44
 800370e:	4293      	cmp	r3, r2
 8003710:	d059      	beq.n	80037c6 <vl53l5cx_get_ranging_data+0x186>
 8003712:	f64d 7244 	movw	r2, #57156	; 0xdf44
 8003716:	4293      	cmp	r3, r2
 8003718:	f300 808d 	bgt.w	8003836 <vl53l5cx_get_ranging_data+0x1f6>
 800371c:	f64d 32c4 	movw	r2, #56260	; 0xdbc4
 8003720:	4293      	cmp	r3, r2
 8003722:	d042      	beq.n	80037aa <vl53l5cx_get_ranging_data+0x16a>
 8003724:	f64d 32c4 	movw	r2, #56260	; 0xdbc4
 8003728:	4293      	cmp	r3, r2
 800372a:	f300 8084 	bgt.w	8003836 <vl53l5cx_get_ranging_data+0x1f6>
 800372e:	f64d 3284 	movw	r2, #56196	; 0xdb84
 8003732:	4293      	cmp	r3, r2
 8003734:	d02b      	beq.n	800378e <vl53l5cx_get_ranging_data+0x14e>
 8003736:	f64d 3284 	movw	r2, #56196	; 0xdb84
 800373a:	4293      	cmp	r3, r2
 800373c:	dc7b      	bgt.n	8003836 <vl53l5cx_get_ranging_data+0x1f6>
 800373e:	f64d 0258 	movw	r2, #55384	; 0xd858
 8003742:	4293      	cmp	r3, r2
 8003744:	d069      	beq.n	800381a <vl53l5cx_get_ranging_data+0x1da>
 8003746:	f64d 0258 	movw	r2, #55384	; 0xd858
 800374a:	4293      	cmp	r3, r2
 800374c:	dc73      	bgt.n	8003836 <vl53l5cx_get_ranging_data+0x1f6>
 800374e:	f245 42b4 	movw	r2, #21684	; 0x54b4
 8003752:	4293      	cmp	r3, r2
 8003754:	d004      	beq.n	8003760 <vl53l5cx_get_ranging_data+0x120>
 8003756:	f245 42d0 	movw	r2, #21712	; 0x54d0
 800375a:	4293      	cmp	r3, r2
 800375c:	d00a      	beq.n	8003774 <vl53l5cx_get_ranging_data+0x134>
				(void)memcpy(&p_results->motion_indicator,
				&(p_dev->temp_buffer[i + (uint32_t)4]), msize);
				break;
#endif
			default:
				break;
 800375e:	e06a      	b.n	8003836 <vl53l5cx_get_ranging_data+0x1f6>
						(int8_t)p_dev->temp_buffer[i + (uint32_t)12];
 8003760:	69bb      	ldr	r3, [r7, #24]
 8003762:	330c      	adds	r3, #12
 8003764:	687a      	ldr	r2, [r7, #4]
 8003766:	4413      	add	r3, r2
 8003768:	f893 3510 	ldrb.w	r3, [r3, #1296]	; 0x510
 800376c:	b25a      	sxtb	r2, r3
				p_results->silicon_temp_degc =
 800376e:	683b      	ldr	r3, [r7, #0]
 8003770:	701a      	strb	r2, [r3, #0]
				break;
 8003772:	e061      	b.n	8003838 <vl53l5cx_get_ranging_data+0x1f8>
				(void)memcpy(p_results->ambient_per_spad,
 8003774:	683b      	ldr	r3, [r7, #0]
 8003776:	1d18      	adds	r0, r3, #4
				&(p_dev->temp_buffer[i + (uint32_t)4]), msize);
 8003778:	69bb      	ldr	r3, [r7, #24]
 800377a:	3304      	adds	r3, #4
 800377c:	f503 63a2 	add.w	r3, r3, #1296	; 0x510
 8003780:	687a      	ldr	r2, [r7, #4]
 8003782:	4413      	add	r3, r2
				(void)memcpy(p_results->ambient_per_spad,
 8003784:	693a      	ldr	r2, [r7, #16]
 8003786:	4619      	mov	r1, r3
 8003788:	f006 fe06 	bl	800a398 <memcpy>
				break;
 800378c:	e054      	b.n	8003838 <vl53l5cx_get_ranging_data+0x1f8>
				(void)memcpy(p_results->nb_target_detected,
 800378e:	683b      	ldr	r3, [r7, #0]
 8003790:	f503 7082 	add.w	r0, r3, #260	; 0x104
				&(p_dev->temp_buffer[i + (uint32_t)4]), msize);
 8003794:	69bb      	ldr	r3, [r7, #24]
 8003796:	3304      	adds	r3, #4
 8003798:	f503 63a2 	add.w	r3, r3, #1296	; 0x510
 800379c:	687a      	ldr	r2, [r7, #4]
 800379e:	4413      	add	r3, r2
				(void)memcpy(p_results->nb_target_detected,
 80037a0:	693a      	ldr	r2, [r7, #16]
 80037a2:	4619      	mov	r1, r3
 80037a4:	f006 fdf8 	bl	800a398 <memcpy>
				break;
 80037a8:	e046      	b.n	8003838 <vl53l5cx_get_ranging_data+0x1f8>
				(void)memcpy(p_results->signal_per_spad,
 80037aa:	683b      	ldr	r3, [r7, #0]
 80037ac:	f503 70a2 	add.w	r0, r3, #324	; 0x144
				&(p_dev->temp_buffer[i + (uint32_t)4]), msize);
 80037b0:	69bb      	ldr	r3, [r7, #24]
 80037b2:	3304      	adds	r3, #4
 80037b4:	f503 63a2 	add.w	r3, r3, #1296	; 0x510
 80037b8:	687a      	ldr	r2, [r7, #4]
 80037ba:	4413      	add	r3, r2
				(void)memcpy(p_results->signal_per_spad,
 80037bc:	693a      	ldr	r2, [r7, #16]
 80037be:	4619      	mov	r1, r3
 80037c0:	f006 fdea 	bl	800a398 <memcpy>
				break;
 80037c4:	e038      	b.n	8003838 <vl53l5cx_get_ranging_data+0x1f8>
				(void)memcpy(p_results->distance_mm,
 80037c6:	683b      	ldr	r3, [r7, #0]
 80037c8:	f503 7011 	add.w	r0, r3, #580	; 0x244
				&(p_dev->temp_buffer[i + (uint32_t)4]), msize);
 80037cc:	69bb      	ldr	r3, [r7, #24]
 80037ce:	3304      	adds	r3, #4
 80037d0:	f503 63a2 	add.w	r3, r3, #1296	; 0x510
 80037d4:	687a      	ldr	r2, [r7, #4]
 80037d6:	4413      	add	r3, r2
				(void)memcpy(p_results->distance_mm,
 80037d8:	693a      	ldr	r2, [r7, #16]
 80037da:	4619      	mov	r1, r3
 80037dc:	f006 fddc 	bl	800a398 <memcpy>
				break;
 80037e0:	e02a      	b.n	8003838 <vl53l5cx_get_ranging_data+0x1f8>
				(void)memcpy(p_results->reflectance,
 80037e2:	683b      	ldr	r3, [r7, #0]
 80037e4:	f503 7031 	add.w	r0, r3, #708	; 0x2c4
				&(p_dev->temp_buffer[i + (uint32_t)4]), msize);
 80037e8:	69bb      	ldr	r3, [r7, #24]
 80037ea:	3304      	adds	r3, #4
 80037ec:	f503 63a2 	add.w	r3, r3, #1296	; 0x510
 80037f0:	687a      	ldr	r2, [r7, #4]
 80037f2:	4413      	add	r3, r2
				(void)memcpy(p_results->reflectance,
 80037f4:	693a      	ldr	r2, [r7, #16]
 80037f6:	4619      	mov	r1, r3
 80037f8:	f006 fdce 	bl	800a398 <memcpy>
				break;
 80037fc:	e01c      	b.n	8003838 <vl53l5cx_get_ranging_data+0x1f8>
				(void)memcpy(p_results->target_status,
 80037fe:	683b      	ldr	r3, [r7, #0]
 8003800:	f503 7041 	add.w	r0, r3, #772	; 0x304
				&(p_dev->temp_buffer[i + (uint32_t)4]), msize);
 8003804:	69bb      	ldr	r3, [r7, #24]
 8003806:	3304      	adds	r3, #4
 8003808:	f503 63a2 	add.w	r3, r3, #1296	; 0x510
 800380c:	687a      	ldr	r2, [r7, #4]
 800380e:	4413      	add	r3, r2
				(void)memcpy(p_results->target_status,
 8003810:	693a      	ldr	r2, [r7, #16]
 8003812:	4619      	mov	r1, r3
 8003814:	f006 fdc0 	bl	800a398 <memcpy>
				break;
 8003818:	e00e      	b.n	8003838 <vl53l5cx_get_ranging_data+0x1f8>
				(void)memcpy(&p_results->motion_indicator,
 800381a:	683b      	ldr	r3, [r7, #0]
 800381c:	f503 7051 	add.w	r0, r3, #836	; 0x344
				&(p_dev->temp_buffer[i + (uint32_t)4]), msize);
 8003820:	69bb      	ldr	r3, [r7, #24]
 8003822:	3304      	adds	r3, #4
 8003824:	f503 63a2 	add.w	r3, r3, #1296	; 0x510
 8003828:	687a      	ldr	r2, [r7, #4]
 800382a:	4413      	add	r3, r2
				(void)memcpy(&p_results->motion_indicator,
 800382c:	693a      	ldr	r2, [r7, #16]
 800382e:	4619      	mov	r1, r3
 8003830:	f006 fdb2 	bl	800a398 <memcpy>
				break;
 8003834:	e000      	b.n	8003838 <vl53l5cx_get_ranging_data+0x1f8>
				break;
 8003836:	bf00      	nop
		}
		i += msize;
 8003838:	69ba      	ldr	r2, [r7, #24]
 800383a:	693b      	ldr	r3, [r7, #16]
 800383c:	4413      	add	r3, r2
 800383e:	61bb      	str	r3, [r7, #24]
	for (i = 16U; i < (uint32_t)p_dev->data_read_size; i+=4U)
 8003840:	69bb      	ldr	r3, [r7, #24]
 8003842:	3304      	adds	r3, #4
 8003844:	61bb      	str	r3, [r7, #24]
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	695b      	ldr	r3, [r3, #20]
 800384a:	69ba      	ldr	r2, [r7, #24]
 800384c:	429a      	cmp	r2, r3
 800384e:	f4ff af1e 	bcc.w	800368e <vl53l5cx_get_ranging_data+0x4e>

#ifndef VL53L5CX_USE_RAW_FORMAT

	/* Convert data into their real format */
#ifndef VL53L5CX_DISABLE_AMBIENT_PER_SPAD
	for(i = 0; i < (uint32_t)VL53L5CX_RESOLUTION_8X8; i++)
 8003852:	2300      	movs	r3, #0
 8003854:	61bb      	str	r3, [r7, #24]
 8003856:	e00d      	b.n	8003874 <vl53l5cx_get_ranging_data+0x234>
	{
		p_results->ambient_per_spad[i] /= (uint32_t)2048;
 8003858:	683a      	ldr	r2, [r7, #0]
 800385a:	69bb      	ldr	r3, [r7, #24]
 800385c:	009b      	lsls	r3, r3, #2
 800385e:	4413      	add	r3, r2
 8003860:	685b      	ldr	r3, [r3, #4]
 8003862:	0ada      	lsrs	r2, r3, #11
 8003864:	6839      	ldr	r1, [r7, #0]
 8003866:	69bb      	ldr	r3, [r7, #24]
 8003868:	009b      	lsls	r3, r3, #2
 800386a:	440b      	add	r3, r1
 800386c:	605a      	str	r2, [r3, #4]
	for(i = 0; i < (uint32_t)VL53L5CX_RESOLUTION_8X8; i++)
 800386e:	69bb      	ldr	r3, [r7, #24]
 8003870:	3301      	adds	r3, #1
 8003872:	61bb      	str	r3, [r7, #24]
 8003874:	69bb      	ldr	r3, [r7, #24]
 8003876:	2b3f      	cmp	r3, #63	; 0x3f
 8003878:	d9ee      	bls.n	8003858 <vl53l5cx_get_ranging_data+0x218>
	}
#endif

	for(i = 0; i < (uint32_t)(VL53L5CX_RESOLUTION_8X8
 800387a:	2300      	movs	r3, #0
 800387c:	61bb      	str	r3, [r7, #24]
 800387e:	e045      	b.n	800390c <vl53l5cx_get_ranging_data+0x2cc>
			*VL53L5CX_NB_TARGET_PER_ZONE); i++)
	{
#ifndef VL53L5CX_DISABLE_DISTANCE_MM
		p_results->distance_mm[i] /= 4;
 8003880:	683a      	ldr	r2, [r7, #0]
 8003882:	69bb      	ldr	r3, [r7, #24]
 8003884:	f503 7390 	add.w	r3, r3, #288	; 0x120
 8003888:	005b      	lsls	r3, r3, #1
 800388a:	4413      	add	r3, r2
 800388c:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8003890:	2b00      	cmp	r3, #0
 8003892:	da00      	bge.n	8003896 <vl53l5cx_get_ranging_data+0x256>
 8003894:	3303      	adds	r3, #3
 8003896:	109b      	asrs	r3, r3, #2
 8003898:	b219      	sxth	r1, r3
 800389a:	683a      	ldr	r2, [r7, #0]
 800389c:	69bb      	ldr	r3, [r7, #24]
 800389e:	f503 7390 	add.w	r3, r3, #288	; 0x120
 80038a2:	005b      	lsls	r3, r3, #1
 80038a4:	4413      	add	r3, r2
 80038a6:	460a      	mov	r2, r1
 80038a8:	809a      	strh	r2, [r3, #4]
		if(p_results->distance_mm[i] < 0)
 80038aa:	683a      	ldr	r2, [r7, #0]
 80038ac:	69bb      	ldr	r3, [r7, #24]
 80038ae:	f503 7390 	add.w	r3, r3, #288	; 0x120
 80038b2:	005b      	lsls	r3, r3, #1
 80038b4:	4413      	add	r3, r2
 80038b6:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80038ba:	2b00      	cmp	r3, #0
 80038bc:	da07      	bge.n	80038ce <vl53l5cx_get_ranging_data+0x28e>
		{
			p_results->distance_mm[i] = 0;
 80038be:	683a      	ldr	r2, [r7, #0]
 80038c0:	69bb      	ldr	r3, [r7, #24]
 80038c2:	f503 7390 	add.w	r3, r3, #288	; 0x120
 80038c6:	005b      	lsls	r3, r3, #1
 80038c8:	4413      	add	r3, r2
 80038ca:	2200      	movs	r2, #0
 80038cc:	809a      	strh	r2, [r3, #4]
		}
#endif
#ifndef VL53L5CX_DISABLE_REFLECTANCE_PERCENT
		p_results->reflectance[i] /= (uint8_t)2;
 80038ce:	683a      	ldr	r2, [r7, #0]
 80038d0:	69bb      	ldr	r3, [r7, #24]
 80038d2:	4413      	add	r3, r2
 80038d4:	f503 7331 	add.w	r3, r3, #708	; 0x2c4
 80038d8:	781b      	ldrb	r3, [r3, #0]
 80038da:	085b      	lsrs	r3, r3, #1
 80038dc:	b2d9      	uxtb	r1, r3
 80038de:	683a      	ldr	r2, [r7, #0]
 80038e0:	69bb      	ldr	r3, [r7, #24]
 80038e2:	4413      	add	r3, r2
 80038e4:	f503 7331 	add.w	r3, r3, #708	; 0x2c4
 80038e8:	460a      	mov	r2, r1
 80038ea:	701a      	strb	r2, [r3, #0]
#endif
#ifndef VL53L5CX_DISABLE_RANGE_SIGMA_MM
		p_results->range_sigma_mm[i] /= (uint16_t)128;
#endif
#ifndef VL53L5CX_DISABLE_SIGNAL_PER_SPAD
		p_results->signal_per_spad[i] /= (uint32_t)2048;
 80038ec:	683a      	ldr	r2, [r7, #0]
 80038ee:	69bb      	ldr	r3, [r7, #24]
 80038f0:	3350      	adds	r3, #80	; 0x50
 80038f2:	009b      	lsls	r3, r3, #2
 80038f4:	4413      	add	r3, r2
 80038f6:	685b      	ldr	r3, [r3, #4]
 80038f8:	0ada      	lsrs	r2, r3, #11
 80038fa:	6839      	ldr	r1, [r7, #0]
 80038fc:	69bb      	ldr	r3, [r7, #24]
 80038fe:	3350      	adds	r3, #80	; 0x50
 8003900:	009b      	lsls	r3, r3, #2
 8003902:	440b      	add	r3, r1
 8003904:	605a      	str	r2, [r3, #4]
			*VL53L5CX_NB_TARGET_PER_ZONE); i++)
 8003906:	69bb      	ldr	r3, [r7, #24]
 8003908:	3301      	adds	r3, #1
 800390a:	61bb      	str	r3, [r7, #24]
	for(i = 0; i < (uint32_t)(VL53L5CX_RESOLUTION_8X8
 800390c:	69bb      	ldr	r3, [r7, #24]
 800390e:	2b3f      	cmp	r3, #63	; 0x3f
 8003910:	d9b6      	bls.n	8003880 <vl53l5cx_get_ranging_data+0x240>
#endif
	}

	/* Set target status to 255 if no target is detected for this zone */
#ifndef VL53L5CX_DISABLE_NB_TARGET_DETECTED
	for(i = 0; i < (uint32_t)VL53L5CX_RESOLUTION_8X8; i++)
 8003912:	2300      	movs	r3, #0
 8003914:	61bb      	str	r3, [r7, #24]
 8003916:	e01b      	b.n	8003950 <vl53l5cx_get_ranging_data+0x310>
	{
		if(p_results->nb_target_detected[i] == (uint8_t)0){
 8003918:	683a      	ldr	r2, [r7, #0]
 800391a:	69bb      	ldr	r3, [r7, #24]
 800391c:	4413      	add	r3, r2
 800391e:	f503 7382 	add.w	r3, r3, #260	; 0x104
 8003922:	781b      	ldrb	r3, [r3, #0]
 8003924:	2b00      	cmp	r3, #0
 8003926:	d110      	bne.n	800394a <vl53l5cx_get_ranging_data+0x30a>
			for(j = 0; j < (uint32_t)
 8003928:	2300      	movs	r3, #0
 800392a:	617b      	str	r3, [r7, #20]
 800392c:	e00a      	b.n	8003944 <vl53l5cx_get_ranging_data+0x304>
				VL53L5CX_NB_TARGET_PER_ZONE; j++)
			{
#ifndef VL53L5CX_DISABLE_TARGET_STATUS
				p_results->target_status
				[((uint32_t)VL53L5CX_NB_TARGET_PER_ZONE
					*(uint32_t)i) + j]=(uint8_t)255;
 800392e:	69ba      	ldr	r2, [r7, #24]
 8003930:	697b      	ldr	r3, [r7, #20]
 8003932:	4413      	add	r3, r2
 8003934:	683a      	ldr	r2, [r7, #0]
 8003936:	4413      	add	r3, r2
 8003938:	22ff      	movs	r2, #255	; 0xff
 800393a:	f883 2304 	strb.w	r2, [r3, #772]	; 0x304
				VL53L5CX_NB_TARGET_PER_ZONE; j++)
 800393e:	697b      	ldr	r3, [r7, #20]
 8003940:	3301      	adds	r3, #1
 8003942:	617b      	str	r3, [r7, #20]
			for(j = 0; j < (uint32_t)
 8003944:	697b      	ldr	r3, [r7, #20]
 8003946:	2b00      	cmp	r3, #0
 8003948:	d0f1      	beq.n	800392e <vl53l5cx_get_ranging_data+0x2ee>
	for(i = 0; i < (uint32_t)VL53L5CX_RESOLUTION_8X8; i++)
 800394a:	69bb      	ldr	r3, [r7, #24]
 800394c:	3301      	adds	r3, #1
 800394e:	61bb      	str	r3, [r7, #24]
 8003950:	69bb      	ldr	r3, [r7, #24]
 8003952:	2b3f      	cmp	r3, #63	; 0x3f
 8003954:	d9e0      	bls.n	8003918 <vl53l5cx_get_ranging_data+0x2d8>
		}
	}
#endif

#ifndef VL53L5CX_DISABLE_MOTION_INDICATOR
	for(i = 0; i < (uint32_t)32; i++)
 8003956:	2300      	movs	r3, #0
 8003958:	61bb      	str	r3, [r7, #24]
 800395a:	e012      	b.n	8003982 <vl53l5cx_get_ranging_data+0x342>
	{
		p_results->motion_indicator.motion[i] /= (uint32_t)65535;
 800395c:	683a      	ldr	r2, [r7, #0]
 800395e:	69bb      	ldr	r3, [r7, #24]
 8003960:	33d2      	adds	r3, #210	; 0xd2
 8003962:	009b      	lsls	r3, r3, #2
 8003964:	4413      	add	r3, r2
 8003966:	689b      	ldr	r3, [r3, #8]
 8003968:	4a1f      	ldr	r2, [pc, #124]	; (80039e8 <vl53l5cx_get_ranging_data+0x3a8>)
 800396a:	fba2 2303 	umull	r2, r3, r2, r3
 800396e:	0bda      	lsrs	r2, r3, #15
 8003970:	6839      	ldr	r1, [r7, #0]
 8003972:	69bb      	ldr	r3, [r7, #24]
 8003974:	33d2      	adds	r3, #210	; 0xd2
 8003976:	009b      	lsls	r3, r3, #2
 8003978:	440b      	add	r3, r1
 800397a:	609a      	str	r2, [r3, #8]
	for(i = 0; i < (uint32_t)32; i++)
 800397c:	69bb      	ldr	r3, [r7, #24]
 800397e:	3301      	adds	r3, #1
 8003980:	61bb      	str	r3, [r7, #24]
 8003982:	69bb      	ldr	r3, [r7, #24]
 8003984:	2b1f      	cmp	r3, #31
 8003986:	d9e9      	bls.n	800395c <vl53l5cx_get_ranging_data+0x31c>

#endif

	/* Check if footer id and header id are matching. This allows to detect
	 * corrupted frames */
	header_id = ((uint16_t)(p_dev->temp_buffer[0x8])<<8) & 0xFF00U;
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	f893 3518 	ldrb.w	r3, [r3, #1304]	; 0x518
 800398e:	b29b      	uxth	r3, r3
 8003990:	021b      	lsls	r3, r3, #8
 8003992:	81fb      	strh	r3, [r7, #14]
	header_id |= ((uint16_t)(p_dev->temp_buffer[0x9])) & 0x00FFU;
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	f893 3519 	ldrb.w	r3, [r3, #1305]	; 0x519
 800399a:	b29a      	uxth	r2, r3
 800399c:	89fb      	ldrh	r3, [r7, #14]
 800399e:	4313      	orrs	r3, r2
 80039a0:	81fb      	strh	r3, [r7, #14]

	footer_id = ((uint16_t)(p_dev->temp_buffer[p_dev->data_read_size
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	695b      	ldr	r3, [r3, #20]
		- (uint32_t)4]) << 8) & 0xFF00U;
 80039a6:	3b04      	subs	r3, #4
	footer_id = ((uint16_t)(p_dev->temp_buffer[p_dev->data_read_size
 80039a8:	687a      	ldr	r2, [r7, #4]
 80039aa:	4413      	add	r3, r2
 80039ac:	f893 3510 	ldrb.w	r3, [r3, #1296]	; 0x510
 80039b0:	b29b      	uxth	r3, r3
 80039b2:	021b      	lsls	r3, r3, #8
 80039b4:	81bb      	strh	r3, [r7, #12]
	footer_id |= ((uint16_t)(p_dev->temp_buffer[p_dev->data_read_size
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	695b      	ldr	r3, [r3, #20]
		- (uint32_t)3])) & 0xFFU;
 80039ba:	3b03      	subs	r3, #3
	footer_id |= ((uint16_t)(p_dev->temp_buffer[p_dev->data_read_size
 80039bc:	687a      	ldr	r2, [r7, #4]
 80039be:	4413      	add	r3, r2
 80039c0:	f893 3510 	ldrb.w	r3, [r3, #1296]	; 0x510
 80039c4:	b29a      	uxth	r2, r3
 80039c6:	89bb      	ldrh	r3, [r7, #12]
 80039c8:	4313      	orrs	r3, r2
 80039ca:	81bb      	strh	r3, [r7, #12]

	if(header_id != footer_id)
 80039cc:	89fa      	ldrh	r2, [r7, #14]
 80039ce:	89bb      	ldrh	r3, [r7, #12]
 80039d0:	429a      	cmp	r2, r3
 80039d2:	d003      	beq.n	80039dc <vl53l5cx_get_ranging_data+0x39c>
	{
		status |= VL53L5CX_STATUS_CORRUPTED_FRAME;
 80039d4:	7ffb      	ldrb	r3, [r7, #31]
 80039d6:	f043 0302 	orr.w	r3, r3, #2
 80039da:	77fb      	strb	r3, [r7, #31]
	}

	return status;
 80039dc:	7ffb      	ldrb	r3, [r7, #31]
}
 80039de:	4618      	mov	r0, r3
 80039e0:	3720      	adds	r7, #32
 80039e2:	46bd      	mov	sp, r7
 80039e4:	bd80      	pop	{r7, pc}
 80039e6:	bf00      	nop
 80039e8:	80008001 	.word	0x80008001

080039ec <vl53l5cx_get_resolution>:

uint8_t vl53l5cx_get_resolution(
		VL53L5CX_Configuration		*p_dev,
		uint8_t				*p_resolution)
{
 80039ec:	b580      	push	{r7, lr}
 80039ee:	b084      	sub	sp, #16
 80039f0:	af00      	add	r7, sp, #0
 80039f2:	6078      	str	r0, [r7, #4]
 80039f4:	6039      	str	r1, [r7, #0]
	uint8_t status = VL53L5CX_STATUS_OK;
 80039f6:	2300      	movs	r3, #0
 80039f8:	73fb      	strb	r3, [r7, #15]

	status |= vl53l5cx_dci_read_data(p_dev, p_dev->temp_buffer,
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	f503 61a2 	add.w	r1, r3, #1296	; 0x510
 8003a00:	2308      	movs	r3, #8
 8003a02:	f245 4250 	movw	r2, #21584	; 0x5450
 8003a06:	6878      	ldr	r0, [r7, #4]
 8003a08:	f000 faba 	bl	8003f80 <vl53l5cx_dci_read_data>
 8003a0c:	4603      	mov	r3, r0
 8003a0e:	461a      	mov	r2, r3
 8003a10:	7bfb      	ldrb	r3, [r7, #15]
 8003a12:	4313      	orrs	r3, r2
 8003a14:	73fb      	strb	r3, [r7, #15]
			VL53L5CX_DCI_ZONE_CONFIG, 8);
	*p_resolution = p_dev->temp_buffer[0x00]*p_dev->temp_buffer[0x01];
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	f893 2510 	ldrb.w	r2, [r3, #1296]	; 0x510
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	f893 3511 	ldrb.w	r3, [r3, #1297]	; 0x511
 8003a22:	fb12 f303 	smulbb	r3, r2, r3
 8003a26:	b2da      	uxtb	r2, r3
 8003a28:	683b      	ldr	r3, [r7, #0]
 8003a2a:	701a      	strb	r2, [r3, #0]

	return status;
 8003a2c:	7bfb      	ldrb	r3, [r7, #15]
}
 8003a2e:	4618      	mov	r0, r3
 8003a30:	3710      	adds	r7, #16
 8003a32:	46bd      	mov	sp, r7
 8003a34:	bd80      	pop	{r7, pc}

08003a36 <vl53l5cx_set_resolution>:


uint8_t vl53l5cx_set_resolution(
		VL53L5CX_Configuration 		 *p_dev,
		uint8_t				resolution)
{
 8003a36:	b580      	push	{r7, lr}
 8003a38:	b084      	sub	sp, #16
 8003a3a:	af00      	add	r7, sp, #0
 8003a3c:	6078      	str	r0, [r7, #4]
 8003a3e:	460b      	mov	r3, r1
 8003a40:	70fb      	strb	r3, [r7, #3]
	uint8_t status = VL53L5CX_STATUS_OK;
 8003a42:	2300      	movs	r3, #0
 8003a44:	73fb      	strb	r3, [r7, #15]

	switch(resolution){
 8003a46:	78fb      	ldrb	r3, [r7, #3]
 8003a48:	2b10      	cmp	r3, #16
 8003a4a:	d002      	beq.n	8003a52 <vl53l5cx_set_resolution+0x1c>
 8003a4c:	2b40      	cmp	r3, #64	; 0x40
 8003a4e:	d055      	beq.n	8003afc <vl53l5cx_set_resolution+0xc6>
 8003a50:	e0a9      	b.n	8003ba6 <vl53l5cx_set_resolution+0x170>
		case VL53L5CX_RESOLUTION_4X4:
			status |= vl53l5cx_dci_read_data(p_dev,
					p_dev->temp_buffer,
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	f503 61a2 	add.w	r1, r3, #1296	; 0x510
			status |= vl53l5cx_dci_read_data(p_dev,
 8003a58:	2310      	movs	r3, #16
 8003a5a:	f64a 5238 	movw	r2, #44344	; 0xad38
 8003a5e:	6878      	ldr	r0, [r7, #4]
 8003a60:	f000 fa8e 	bl	8003f80 <vl53l5cx_dci_read_data>
 8003a64:	4603      	mov	r3, r0
 8003a66:	461a      	mov	r2, r3
 8003a68:	7bfb      	ldrb	r3, [r7, #15]
 8003a6a:	4313      	orrs	r3, r2
 8003a6c:	73fb      	strb	r3, [r7, #15]
					VL53L5CX_DCI_DSS_CONFIG, 16);
			p_dev->temp_buffer[0x04] = 64;
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	2240      	movs	r2, #64	; 0x40
 8003a72:	f883 2514 	strb.w	r2, [r3, #1300]	; 0x514
			p_dev->temp_buffer[0x06] = 64;
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	2240      	movs	r2, #64	; 0x40
 8003a7a:	f883 2516 	strb.w	r2, [r3, #1302]	; 0x516
			p_dev->temp_buffer[0x09] = 4;
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	2204      	movs	r2, #4
 8003a82:	f883 2519 	strb.w	r2, [r3, #1305]	; 0x519
			status |= vl53l5cx_dci_write_data(p_dev,
					p_dev->temp_buffer,
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	f503 61a2 	add.w	r1, r3, #1296	; 0x510
			status |= vl53l5cx_dci_write_data(p_dev,
 8003a8c:	2310      	movs	r3, #16
 8003a8e:	f64a 5238 	movw	r2, #44344	; 0xad38
 8003a92:	6878      	ldr	r0, [r7, #4]
 8003a94:	f000 fafe 	bl	8004094 <vl53l5cx_dci_write_data>
 8003a98:	4603      	mov	r3, r0
 8003a9a:	461a      	mov	r2, r3
 8003a9c:	7bfb      	ldrb	r3, [r7, #15]
 8003a9e:	4313      	orrs	r3, r2
 8003aa0:	73fb      	strb	r3, [r7, #15]
					VL53L5CX_DCI_DSS_CONFIG, 16);

			status |= vl53l5cx_dci_read_data(p_dev,
					p_dev->temp_buffer,
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	f503 61a2 	add.w	r1, r3, #1296	; 0x510
			status |= vl53l5cx_dci_read_data(p_dev,
 8003aa8:	2308      	movs	r3, #8
 8003aaa:	f245 4250 	movw	r2, #21584	; 0x5450
 8003aae:	6878      	ldr	r0, [r7, #4]
 8003ab0:	f000 fa66 	bl	8003f80 <vl53l5cx_dci_read_data>
 8003ab4:	4603      	mov	r3, r0
 8003ab6:	461a      	mov	r2, r3
 8003ab8:	7bfb      	ldrb	r3, [r7, #15]
 8003aba:	4313      	orrs	r3, r2
 8003abc:	73fb      	strb	r3, [r7, #15]
					VL53L5CX_DCI_ZONE_CONFIG, 8);
			p_dev->temp_buffer[0x00] = 4;
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	2204      	movs	r2, #4
 8003ac2:	f883 2510 	strb.w	r2, [r3, #1296]	; 0x510
			p_dev->temp_buffer[0x01] = 4;
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	2204      	movs	r2, #4
 8003aca:	f883 2511 	strb.w	r2, [r3, #1297]	; 0x511
			p_dev->temp_buffer[0x04] = 8;
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	2208      	movs	r2, #8
 8003ad2:	f883 2514 	strb.w	r2, [r3, #1300]	; 0x514
			p_dev->temp_buffer[0x05] = 8;
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	2208      	movs	r2, #8
 8003ada:	f883 2515 	strb.w	r2, [r3, #1301]	; 0x515
			status |= vl53l5cx_dci_write_data(p_dev,
					p_dev->temp_buffer,
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	f503 61a2 	add.w	r1, r3, #1296	; 0x510
			status |= vl53l5cx_dci_write_data(p_dev,
 8003ae4:	2308      	movs	r3, #8
 8003ae6:	f245 4250 	movw	r2, #21584	; 0x5450
 8003aea:	6878      	ldr	r0, [r7, #4]
 8003aec:	f000 fad2 	bl	8004094 <vl53l5cx_dci_write_data>
 8003af0:	4603      	mov	r3, r0
 8003af2:	461a      	mov	r2, r3
 8003af4:	7bfb      	ldrb	r3, [r7, #15]
 8003af6:	4313      	orrs	r3, r2
 8003af8:	73fb      	strb	r3, [r7, #15]
					VL53L5CX_DCI_ZONE_CONFIG, 8);
			break;
 8003afa:	e057      	b.n	8003bac <vl53l5cx_set_resolution+0x176>

		case VL53L5CX_RESOLUTION_8X8:
			status |= vl53l5cx_dci_read_data(p_dev,
					p_dev->temp_buffer,
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	f503 61a2 	add.w	r1, r3, #1296	; 0x510
			status |= vl53l5cx_dci_read_data(p_dev,
 8003b02:	2310      	movs	r3, #16
 8003b04:	f64a 5238 	movw	r2, #44344	; 0xad38
 8003b08:	6878      	ldr	r0, [r7, #4]
 8003b0a:	f000 fa39 	bl	8003f80 <vl53l5cx_dci_read_data>
 8003b0e:	4603      	mov	r3, r0
 8003b10:	461a      	mov	r2, r3
 8003b12:	7bfb      	ldrb	r3, [r7, #15]
 8003b14:	4313      	orrs	r3, r2
 8003b16:	73fb      	strb	r3, [r7, #15]
					VL53L5CX_DCI_DSS_CONFIG, 16);
			p_dev->temp_buffer[0x04] = 16;
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	2210      	movs	r2, #16
 8003b1c:	f883 2514 	strb.w	r2, [r3, #1300]	; 0x514
			p_dev->temp_buffer[0x06] = 16;
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	2210      	movs	r2, #16
 8003b24:	f883 2516 	strb.w	r2, [r3, #1302]	; 0x516
			p_dev->temp_buffer[0x09] = 1;
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	2201      	movs	r2, #1
 8003b2c:	f883 2519 	strb.w	r2, [r3, #1305]	; 0x519
			status |= vl53l5cx_dci_write_data(p_dev,
					p_dev->temp_buffer,
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	f503 61a2 	add.w	r1, r3, #1296	; 0x510
			status |= vl53l5cx_dci_write_data(p_dev,
 8003b36:	2310      	movs	r3, #16
 8003b38:	f64a 5238 	movw	r2, #44344	; 0xad38
 8003b3c:	6878      	ldr	r0, [r7, #4]
 8003b3e:	f000 faa9 	bl	8004094 <vl53l5cx_dci_write_data>
 8003b42:	4603      	mov	r3, r0
 8003b44:	461a      	mov	r2, r3
 8003b46:	7bfb      	ldrb	r3, [r7, #15]
 8003b48:	4313      	orrs	r3, r2
 8003b4a:	73fb      	strb	r3, [r7, #15]
					VL53L5CX_DCI_DSS_CONFIG, 16);

			status |= vl53l5cx_dci_read_data(p_dev,
					p_dev->temp_buffer,
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	f503 61a2 	add.w	r1, r3, #1296	; 0x510
			status |= vl53l5cx_dci_read_data(p_dev,
 8003b52:	2308      	movs	r3, #8
 8003b54:	f245 4250 	movw	r2, #21584	; 0x5450
 8003b58:	6878      	ldr	r0, [r7, #4]
 8003b5a:	f000 fa11 	bl	8003f80 <vl53l5cx_dci_read_data>
 8003b5e:	4603      	mov	r3, r0
 8003b60:	461a      	mov	r2, r3
 8003b62:	7bfb      	ldrb	r3, [r7, #15]
 8003b64:	4313      	orrs	r3, r2
 8003b66:	73fb      	strb	r3, [r7, #15]
					VL53L5CX_DCI_ZONE_CONFIG, 8);
			p_dev->temp_buffer[0x00] = 8;
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	2208      	movs	r2, #8
 8003b6c:	f883 2510 	strb.w	r2, [r3, #1296]	; 0x510
			p_dev->temp_buffer[0x01] = 8;
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	2208      	movs	r2, #8
 8003b74:	f883 2511 	strb.w	r2, [r3, #1297]	; 0x511
			p_dev->temp_buffer[0x04] = 4;
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	2204      	movs	r2, #4
 8003b7c:	f883 2514 	strb.w	r2, [r3, #1300]	; 0x514
			p_dev->temp_buffer[0x05] = 4;
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	2204      	movs	r2, #4
 8003b84:	f883 2515 	strb.w	r2, [r3, #1301]	; 0x515
			status |= vl53l5cx_dci_write_data(p_dev,
					p_dev->temp_buffer,
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	f503 61a2 	add.w	r1, r3, #1296	; 0x510
			status |= vl53l5cx_dci_write_data(p_dev,
 8003b8e:	2308      	movs	r3, #8
 8003b90:	f245 4250 	movw	r2, #21584	; 0x5450
 8003b94:	6878      	ldr	r0, [r7, #4]
 8003b96:	f000 fa7d 	bl	8004094 <vl53l5cx_dci_write_data>
 8003b9a:	4603      	mov	r3, r0
 8003b9c:	461a      	mov	r2, r3
 8003b9e:	7bfb      	ldrb	r3, [r7, #15]
 8003ba0:	4313      	orrs	r3, r2
 8003ba2:	73fb      	strb	r3, [r7, #15]
					VL53L5CX_DCI_ZONE_CONFIG, 8);

			break;
 8003ba4:	e002      	b.n	8003bac <vl53l5cx_set_resolution+0x176>

		default:
			status = VL53L5CX_STATUS_INVALID_PARAM;
 8003ba6:	237f      	movs	r3, #127	; 0x7f
 8003ba8:	73fb      	strb	r3, [r7, #15]
			break;
 8003baa:	bf00      	nop
		}

	status |= _vl53l5cx_send_offset_data(p_dev, resolution);
 8003bac:	78fb      	ldrb	r3, [r7, #3]
 8003bae:	4619      	mov	r1, r3
 8003bb0:	6878      	ldr	r0, [r7, #4]
 8003bb2:	f7fe fa6b 	bl	800208c <_vl53l5cx_send_offset_data>
 8003bb6:	4603      	mov	r3, r0
 8003bb8:	461a      	mov	r2, r3
 8003bba:	7bfb      	ldrb	r3, [r7, #15]
 8003bbc:	4313      	orrs	r3, r2
 8003bbe:	73fb      	strb	r3, [r7, #15]
	status |= _vl53l5cx_send_xtalk_data(p_dev, resolution);
 8003bc0:	78fb      	ldrb	r3, [r7, #3]
 8003bc2:	4619      	mov	r1, r3
 8003bc4:	6878      	ldr	r0, [r7, #4]
 8003bc6:	f7fe fc2d 	bl	8002424 <_vl53l5cx_send_xtalk_data>
 8003bca:	4603      	mov	r3, r0
 8003bcc:	461a      	mov	r2, r3
 8003bce:	7bfb      	ldrb	r3, [r7, #15]
 8003bd0:	4313      	orrs	r3, r2
 8003bd2:	73fb      	strb	r3, [r7, #15]

	return status;
 8003bd4:	7bfb      	ldrb	r3, [r7, #15]
}
 8003bd6:	4618      	mov	r0, r3
 8003bd8:	3710      	adds	r7, #16
 8003bda:	46bd      	mov	sp, r7
 8003bdc:	bd80      	pop	{r7, pc}

08003bde <vl53l5cx_get_ranging_frequency_hz>:

uint8_t vl53l5cx_get_ranging_frequency_hz(
		VL53L5CX_Configuration		*p_dev,
		uint8_t				*p_frequency_hz)
{
 8003bde:	b580      	push	{r7, lr}
 8003be0:	b084      	sub	sp, #16
 8003be2:	af00      	add	r7, sp, #0
 8003be4:	6078      	str	r0, [r7, #4]
 8003be6:	6039      	str	r1, [r7, #0]
	uint8_t status = VL53L5CX_STATUS_OK;
 8003be8:	2300      	movs	r3, #0
 8003bea:	73fb      	strb	r3, [r7, #15]

	status |= vl53l5cx_dci_read_data(p_dev, (uint8_t*)p_dev->temp_buffer,
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	f503 61a2 	add.w	r1, r3, #1296	; 0x510
 8003bf2:	2304      	movs	r3, #4
 8003bf4:	f245 4258 	movw	r2, #21592	; 0x5458
 8003bf8:	6878      	ldr	r0, [r7, #4]
 8003bfa:	f000 f9c1 	bl	8003f80 <vl53l5cx_dci_read_data>
 8003bfe:	4603      	mov	r3, r0
 8003c00:	461a      	mov	r2, r3
 8003c02:	7bfb      	ldrb	r3, [r7, #15]
 8003c04:	4313      	orrs	r3, r2
 8003c06:	73fb      	strb	r3, [r7, #15]
			VL53L5CX_DCI_FREQ_HZ, 4);
	*p_frequency_hz = p_dev->temp_buffer[0x01];
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	f893 2511 	ldrb.w	r2, [r3, #1297]	; 0x511
 8003c0e:	683b      	ldr	r3, [r7, #0]
 8003c10:	701a      	strb	r2, [r3, #0]

	return status;
 8003c12:	7bfb      	ldrb	r3, [r7, #15]
}
 8003c14:	4618      	mov	r0, r3
 8003c16:	3710      	adds	r7, #16
 8003c18:	46bd      	mov	sp, r7
 8003c1a:	bd80      	pop	{r7, pc}

08003c1c <vl53l5cx_set_ranging_frequency_hz>:

uint8_t vl53l5cx_set_ranging_frequency_hz(
		VL53L5CX_Configuration		*p_dev,
		uint8_t				frequency_hz)
{
 8003c1c:	b580      	push	{r7, lr}
 8003c1e:	b088      	sub	sp, #32
 8003c20:	af04      	add	r7, sp, #16
 8003c22:	6078      	str	r0, [r7, #4]
 8003c24:	460b      	mov	r3, r1
 8003c26:	70fb      	strb	r3, [r7, #3]
	uint8_t status = VL53L5CX_STATUS_OK;
 8003c28:	2300      	movs	r3, #0
 8003c2a:	73fb      	strb	r3, [r7, #15]

	status |= vl53l5cx_dci_replace_data(p_dev, p_dev->temp_buffer,
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	f503 61a2 	add.w	r1, r3, #1296	; 0x510
 8003c32:	2301      	movs	r3, #1
 8003c34:	9302      	str	r3, [sp, #8]
 8003c36:	2301      	movs	r3, #1
 8003c38:	9301      	str	r3, [sp, #4]
 8003c3a:	1cfb      	adds	r3, r7, #3
 8003c3c:	9300      	str	r3, [sp, #0]
 8003c3e:	2304      	movs	r3, #4
 8003c40:	f245 4258 	movw	r2, #21592	; 0x5458
 8003c44:	6878      	ldr	r0, [r7, #4]
 8003c46:	f000 fac3 	bl	80041d0 <vl53l5cx_dci_replace_data>
 8003c4a:	4603      	mov	r3, r0
 8003c4c:	461a      	mov	r2, r3
 8003c4e:	7bfb      	ldrb	r3, [r7, #15]
 8003c50:	4313      	orrs	r3, r2
 8003c52:	73fb      	strb	r3, [r7, #15]
					VL53L5CX_DCI_FREQ_HZ, 4,
					(uint8_t*)&frequency_hz, 1, 0x01);

	return status;
 8003c54:	7bfb      	ldrb	r3, [r7, #15]
}
 8003c56:	4618      	mov	r0, r3
 8003c58:	3710      	adds	r7, #16
 8003c5a:	46bd      	mov	sp, r7
 8003c5c:	bd80      	pop	{r7, pc}
	...

08003c60 <vl53l5cx_get_integration_time_ms>:

uint8_t vl53l5cx_get_integration_time_ms(
		VL53L5CX_Configuration		*p_dev,
		uint32_t			*p_time_ms)
{
 8003c60:	b580      	push	{r7, lr}
 8003c62:	b084      	sub	sp, #16
 8003c64:	af00      	add	r7, sp, #0
 8003c66:	6078      	str	r0, [r7, #4]
 8003c68:	6039      	str	r1, [r7, #0]
	uint8_t status = VL53L5CX_STATUS_OK;
 8003c6a:	2300      	movs	r3, #0
 8003c6c:	73fb      	strb	r3, [r7, #15]

	status |= vl53l5cx_dci_read_data(p_dev, (uint8_t*)p_dev->temp_buffer,
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	f503 61a2 	add.w	r1, r3, #1296	; 0x510
 8003c74:	2314      	movs	r3, #20
 8003c76:	f245 425c 	movw	r2, #21596	; 0x545c
 8003c7a:	6878      	ldr	r0, [r7, #4]
 8003c7c:	f000 f980 	bl	8003f80 <vl53l5cx_dci_read_data>
 8003c80:	4603      	mov	r3, r0
 8003c82:	461a      	mov	r2, r3
 8003c84:	7bfb      	ldrb	r3, [r7, #15]
 8003c86:	4313      	orrs	r3, r2
 8003c88:	73fb      	strb	r3, [r7, #15]
			VL53L5CX_DCI_INT_TIME, 20);

	(void)memcpy(p_time_ms, &(p_dev->temp_buffer[0x0]), 4);
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	f503 63a2 	add.w	r3, r3, #1296	; 0x510
 8003c90:	681b      	ldr	r3, [r3, #0]
 8003c92:	461a      	mov	r2, r3
 8003c94:	683b      	ldr	r3, [r7, #0]
 8003c96:	601a      	str	r2, [r3, #0]
	*p_time_ms /= (uint32_t)1000;
 8003c98:	683b      	ldr	r3, [r7, #0]
 8003c9a:	681b      	ldr	r3, [r3, #0]
 8003c9c:	4a05      	ldr	r2, [pc, #20]	; (8003cb4 <vl53l5cx_get_integration_time_ms+0x54>)
 8003c9e:	fba2 2303 	umull	r2, r3, r2, r3
 8003ca2:	099a      	lsrs	r2, r3, #6
 8003ca4:	683b      	ldr	r3, [r7, #0]
 8003ca6:	601a      	str	r2, [r3, #0]

	return status;
 8003ca8:	7bfb      	ldrb	r3, [r7, #15]
}
 8003caa:	4618      	mov	r0, r3
 8003cac:	3710      	adds	r7, #16
 8003cae:	46bd      	mov	sp, r7
 8003cb0:	bd80      	pop	{r7, pc}
 8003cb2:	bf00      	nop
 8003cb4:	10624dd3 	.word	0x10624dd3

08003cb8 <vl53l5cx_set_integration_time_ms>:

uint8_t vl53l5cx_set_integration_time_ms(
		VL53L5CX_Configuration		*p_dev,
		uint32_t			integration_time_ms)
{
 8003cb8:	b580      	push	{r7, lr}
 8003cba:	b088      	sub	sp, #32
 8003cbc:	af04      	add	r7, sp, #16
 8003cbe:	6078      	str	r0, [r7, #4]
 8003cc0:	6039      	str	r1, [r7, #0]
	uint8_t status = VL53L5CX_STATUS_OK;
 8003cc2:	2300      	movs	r3, #0
 8003cc4:	73fb      	strb	r3, [r7, #15]
        uint32_t integration = integration_time_ms;
 8003cc6:	683b      	ldr	r3, [r7, #0]
 8003cc8:	60bb      	str	r3, [r7, #8]

	/* Integration time must be between 2ms and 1000ms */
	if((integration < (uint32_t)2)
 8003cca:	68bb      	ldr	r3, [r7, #8]
 8003ccc:	2b01      	cmp	r3, #1
 8003cce:	d903      	bls.n	8003cd8 <vl53l5cx_set_integration_time_ms+0x20>
           || (integration > (uint32_t)1000))
 8003cd0:	68bb      	ldr	r3, [r7, #8]
 8003cd2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003cd6:	d904      	bls.n	8003ce2 <vl53l5cx_set_integration_time_ms+0x2a>
	{
		status |= VL53L5CX_STATUS_INVALID_PARAM;
 8003cd8:	7bfb      	ldrb	r3, [r7, #15]
 8003cda:	f043 037f 	orr.w	r3, r3, #127	; 0x7f
 8003cde:	73fb      	strb	r3, [r7, #15]
 8003ce0:	e01a      	b.n	8003d18 <vl53l5cx_set_integration_time_ms+0x60>
	}else
	{
		integration *= (uint32_t)1000;
 8003ce2:	68bb      	ldr	r3, [r7, #8]
 8003ce4:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8003ce8:	fb02 f303 	mul.w	r3, r2, r3
 8003cec:	60bb      	str	r3, [r7, #8]

		status |= vl53l5cx_dci_replace_data(p_dev, p_dev->temp_buffer,
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	f503 61a2 	add.w	r1, r3, #1296	; 0x510
 8003cf4:	2300      	movs	r3, #0
 8003cf6:	9302      	str	r3, [sp, #8]
 8003cf8:	2304      	movs	r3, #4
 8003cfa:	9301      	str	r3, [sp, #4]
 8003cfc:	f107 0308 	add.w	r3, r7, #8
 8003d00:	9300      	str	r3, [sp, #0]
 8003d02:	2314      	movs	r3, #20
 8003d04:	f245 425c 	movw	r2, #21596	; 0x545c
 8003d08:	6878      	ldr	r0, [r7, #4]
 8003d0a:	f000 fa61 	bl	80041d0 <vl53l5cx_dci_replace_data>
 8003d0e:	4603      	mov	r3, r0
 8003d10:	461a      	mov	r2, r3
 8003d12:	7bfb      	ldrb	r3, [r7, #15]
 8003d14:	4313      	orrs	r3, r2
 8003d16:	73fb      	strb	r3, [r7, #15]
				VL53L5CX_DCI_INT_TIME, 20,
				(uint8_t*)&integration, 4, 0x00);
	}

	return status;
 8003d18:	7bfb      	ldrb	r3, [r7, #15]
}
 8003d1a:	4618      	mov	r0, r3
 8003d1c:	3710      	adds	r7, #16
 8003d1e:	46bd      	mov	sp, r7
 8003d20:	bd80      	pop	{r7, pc}
	...

08003d24 <vl53l5cx_get_sharpener_percent>:

uint8_t vl53l5cx_get_sharpener_percent(
		VL53L5CX_Configuration		*p_dev,
		uint8_t				*p_sharpener_percent)
{
 8003d24:	b580      	push	{r7, lr}
 8003d26:	b084      	sub	sp, #16
 8003d28:	af00      	add	r7, sp, #0
 8003d2a:	6078      	str	r0, [r7, #4]
 8003d2c:	6039      	str	r1, [r7, #0]
	uint8_t status = VL53L5CX_STATUS_OK;
 8003d2e:	2300      	movs	r3, #0
 8003d30:	73fb      	strb	r3, [r7, #15]

	status |= vl53l5cx_dci_read_data(p_dev,p_dev->temp_buffer,
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	f503 61a2 	add.w	r1, r3, #1296	; 0x510
 8003d38:	2310      	movs	r3, #16
 8003d3a:	f64a 62d8 	movw	r2, #44760	; 0xaed8
 8003d3e:	6878      	ldr	r0, [r7, #4]
 8003d40:	f000 f91e 	bl	8003f80 <vl53l5cx_dci_read_data>
 8003d44:	4603      	mov	r3, r0
 8003d46:	461a      	mov	r2, r3
 8003d48:	7bfb      	ldrb	r3, [r7, #15]
 8003d4a:	4313      	orrs	r3, r2
 8003d4c:	73fb      	strb	r3, [r7, #15]
			VL53L5CX_DCI_SHARPENER, 16);

	*p_sharpener_percent = (p_dev->temp_buffer[0xD]
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	f893 351d 	ldrb.w	r3, [r3, #1309]	; 0x51d
 8003d54:	461a      	mov	r2, r3
                                *(uint8_t)100)/(uint8_t)255;
 8003d56:	2364      	movs	r3, #100	; 0x64
 8003d58:	fb02 f303 	mul.w	r3, r2, r3
 8003d5c:	4a07      	ldr	r2, [pc, #28]	; (8003d7c <vl53l5cx_get_sharpener_percent+0x58>)
 8003d5e:	fb82 1203 	smull	r1, r2, r2, r3
 8003d62:	441a      	add	r2, r3
 8003d64:	11d2      	asrs	r2, r2, #7
 8003d66:	17db      	asrs	r3, r3, #31
 8003d68:	1ad3      	subs	r3, r2, r3
	*p_sharpener_percent = (p_dev->temp_buffer[0xD]
 8003d6a:	b2da      	uxtb	r2, r3
 8003d6c:	683b      	ldr	r3, [r7, #0]
 8003d6e:	701a      	strb	r2, [r3, #0]

	return status;
 8003d70:	7bfb      	ldrb	r3, [r7, #15]
}
 8003d72:	4618      	mov	r0, r3
 8003d74:	3710      	adds	r7, #16
 8003d76:	46bd      	mov	sp, r7
 8003d78:	bd80      	pop	{r7, pc}
 8003d7a:	bf00      	nop
 8003d7c:	80808081 	.word	0x80808081

08003d80 <vl53l5cx_set_sharpener_percent>:

uint8_t vl53l5cx_set_sharpener_percent(
		VL53L5CX_Configuration		*p_dev,
		uint8_t				sharpener_percent)
{
 8003d80:	b580      	push	{r7, lr}
 8003d82:	b088      	sub	sp, #32
 8003d84:	af04      	add	r7, sp, #16
 8003d86:	6078      	str	r0, [r7, #4]
 8003d88:	460b      	mov	r3, r1
 8003d8a:	70fb      	strb	r3, [r7, #3]
	uint8_t status = VL53L5CX_STATUS_OK;
 8003d8c:	2300      	movs	r3, #0
 8003d8e:	73fb      	strb	r3, [r7, #15]
        uint8_t sharpener;

	if(sharpener_percent >= (uint8_t)100)
 8003d90:	78fb      	ldrb	r3, [r7, #3]
 8003d92:	2b63      	cmp	r3, #99	; 0x63
 8003d94:	d904      	bls.n	8003da0 <vl53l5cx_set_sharpener_percent+0x20>
	{
		status |= VL53L5CX_STATUS_INVALID_PARAM;
 8003d96:	7bfb      	ldrb	r3, [r7, #15]
 8003d98:	f043 037f 	orr.w	r3, r3, #127	; 0x7f
 8003d9c:	73fb      	strb	r3, [r7, #15]
 8003d9e:	e020      	b.n	8003de2 <vl53l5cx_set_sharpener_percent+0x62>
	}
	else
	{
		sharpener = (sharpener_percent*(uint8_t)255)/(uint8_t)100;
 8003da0:	78fa      	ldrb	r2, [r7, #3]
 8003da2:	4613      	mov	r3, r2
 8003da4:	021b      	lsls	r3, r3, #8
 8003da6:	1a9b      	subs	r3, r3, r2
 8003da8:	4a10      	ldr	r2, [pc, #64]	; (8003dec <vl53l5cx_set_sharpener_percent+0x6c>)
 8003daa:	fb82 1203 	smull	r1, r2, r2, r3
 8003dae:	1152      	asrs	r2, r2, #5
 8003db0:	17db      	asrs	r3, r3, #31
 8003db2:	1ad3      	subs	r3, r2, r3
 8003db4:	b2db      	uxtb	r3, r3
 8003db6:	73bb      	strb	r3, [r7, #14]
		status |= vl53l5cx_dci_replace_data(p_dev, p_dev->temp_buffer,
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	f503 61a2 	add.w	r1, r3, #1296	; 0x510
 8003dbe:	230d      	movs	r3, #13
 8003dc0:	9302      	str	r3, [sp, #8]
 8003dc2:	2301      	movs	r3, #1
 8003dc4:	9301      	str	r3, [sp, #4]
 8003dc6:	f107 030e 	add.w	r3, r7, #14
 8003dca:	9300      	str	r3, [sp, #0]
 8003dcc:	2310      	movs	r3, #16
 8003dce:	f64a 62d8 	movw	r2, #44760	; 0xaed8
 8003dd2:	6878      	ldr	r0, [r7, #4]
 8003dd4:	f000 f9fc 	bl	80041d0 <vl53l5cx_dci_replace_data>
 8003dd8:	4603      	mov	r3, r0
 8003dda:	461a      	mov	r2, r3
 8003ddc:	7bfb      	ldrb	r3, [r7, #15]
 8003dde:	4313      	orrs	r3, r2
 8003de0:	73fb      	strb	r3, [r7, #15]
				VL53L5CX_DCI_SHARPENER, 16,
                                (uint8_t*)&sharpener, 1, 0xD);
	}

	return status;
 8003de2:	7bfb      	ldrb	r3, [r7, #15]
}
 8003de4:	4618      	mov	r0, r3
 8003de6:	3710      	adds	r7, #16
 8003de8:	46bd      	mov	sp, r7
 8003dea:	bd80      	pop	{r7, pc}
 8003dec:	51eb851f 	.word	0x51eb851f

08003df0 <vl53l5cx_get_target_order>:

uint8_t vl53l5cx_get_target_order(
		VL53L5CX_Configuration		*p_dev,
		uint8_t				*p_target_order)
{
 8003df0:	b580      	push	{r7, lr}
 8003df2:	b084      	sub	sp, #16
 8003df4:	af00      	add	r7, sp, #0
 8003df6:	6078      	str	r0, [r7, #4]
 8003df8:	6039      	str	r1, [r7, #0]
	uint8_t status = VL53L5CX_STATUS_OK;
 8003dfa:	2300      	movs	r3, #0
 8003dfc:	73fb      	strb	r3, [r7, #15]

	status |= vl53l5cx_dci_read_data(p_dev, (uint8_t*)p_dev->temp_buffer,
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	f503 61a2 	add.w	r1, r3, #1296	; 0x510
 8003e04:	2304      	movs	r3, #4
 8003e06:	f64a 6264 	movw	r2, #44644	; 0xae64
 8003e0a:	6878      	ldr	r0, [r7, #4]
 8003e0c:	f000 f8b8 	bl	8003f80 <vl53l5cx_dci_read_data>
 8003e10:	4603      	mov	r3, r0
 8003e12:	461a      	mov	r2, r3
 8003e14:	7bfb      	ldrb	r3, [r7, #15]
 8003e16:	4313      	orrs	r3, r2
 8003e18:	73fb      	strb	r3, [r7, #15]
			VL53L5CX_DCI_TARGET_ORDER, 4);
	*p_target_order = (uint8_t)p_dev->temp_buffer[0x0];
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	f893 2510 	ldrb.w	r2, [r3, #1296]	; 0x510
 8003e20:	683b      	ldr	r3, [r7, #0]
 8003e22:	701a      	strb	r2, [r3, #0]

	return status;
 8003e24:	7bfb      	ldrb	r3, [r7, #15]
}
 8003e26:	4618      	mov	r0, r3
 8003e28:	3710      	adds	r7, #16
 8003e2a:	46bd      	mov	sp, r7
 8003e2c:	bd80      	pop	{r7, pc}

08003e2e <vl53l5cx_set_target_order>:

uint8_t vl53l5cx_set_target_order(
		VL53L5CX_Configuration		*p_dev,
		uint8_t				target_order)
{
 8003e2e:	b580      	push	{r7, lr}
 8003e30:	b088      	sub	sp, #32
 8003e32:	af04      	add	r7, sp, #16
 8003e34:	6078      	str	r0, [r7, #4]
 8003e36:	460b      	mov	r3, r1
 8003e38:	70fb      	strb	r3, [r7, #3]
	uint8_t status = VL53L5CX_STATUS_OK;
 8003e3a:	2300      	movs	r3, #0
 8003e3c:	73fb      	strb	r3, [r7, #15]

	if((target_order == (uint8_t)VL53L5CX_TARGET_ORDER_CLOSEST)
 8003e3e:	78fb      	ldrb	r3, [r7, #3]
 8003e40:	2b01      	cmp	r3, #1
 8003e42:	d002      	beq.n	8003e4a <vl53l5cx_set_target_order+0x1c>
		|| (target_order == (uint8_t)VL53L5CX_TARGET_ORDER_STRONGEST))
 8003e44:	78fb      	ldrb	r3, [r7, #3]
 8003e46:	2b02      	cmp	r3, #2
 8003e48:	d114      	bne.n	8003e74 <vl53l5cx_set_target_order+0x46>
	{
		status |= vl53l5cx_dci_replace_data(p_dev, p_dev->temp_buffer,
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	f503 61a2 	add.w	r1, r3, #1296	; 0x510
 8003e50:	2300      	movs	r3, #0
 8003e52:	9302      	str	r3, [sp, #8]
 8003e54:	2301      	movs	r3, #1
 8003e56:	9301      	str	r3, [sp, #4]
 8003e58:	1cfb      	adds	r3, r7, #3
 8003e5a:	9300      	str	r3, [sp, #0]
 8003e5c:	2304      	movs	r3, #4
 8003e5e:	f64a 6264 	movw	r2, #44644	; 0xae64
 8003e62:	6878      	ldr	r0, [r7, #4]
 8003e64:	f000 f9b4 	bl	80041d0 <vl53l5cx_dci_replace_data>
 8003e68:	4603      	mov	r3, r0
 8003e6a:	461a      	mov	r2, r3
 8003e6c:	7bfb      	ldrb	r3, [r7, #15]
 8003e6e:	4313      	orrs	r3, r2
 8003e70:	73fb      	strb	r3, [r7, #15]
				VL53L5CX_DCI_TARGET_ORDER, 4,
                                (uint8_t*)&target_order, 1, 0x0);
 8003e72:	e003      	b.n	8003e7c <vl53l5cx_set_target_order+0x4e>
	}else
	{
		status |= VL53L5CX_STATUS_INVALID_PARAM;
 8003e74:	7bfb      	ldrb	r3, [r7, #15]
 8003e76:	f043 037f 	orr.w	r3, r3, #127	; 0x7f
 8003e7a:	73fb      	strb	r3, [r7, #15]
	}

	return status;
 8003e7c:	7bfb      	ldrb	r3, [r7, #15]
}
 8003e7e:	4618      	mov	r0, r3
 8003e80:	3710      	adds	r7, #16
 8003e82:	46bd      	mov	sp, r7
 8003e84:	bd80      	pop	{r7, pc}

08003e86 <vl53l5cx_get_ranging_mode>:

uint8_t vl53l5cx_get_ranging_mode(
		VL53L5CX_Configuration		*p_dev,
		uint8_t				*p_ranging_mode)
{
 8003e86:	b580      	push	{r7, lr}
 8003e88:	b084      	sub	sp, #16
 8003e8a:	af00      	add	r7, sp, #0
 8003e8c:	6078      	str	r0, [r7, #4]
 8003e8e:	6039      	str	r1, [r7, #0]
	uint8_t status = VL53L5CX_STATUS_OK;
 8003e90:	2300      	movs	r3, #0
 8003e92:	73fb      	strb	r3, [r7, #15]

	status |= vl53l5cx_dci_read_data(p_dev, p_dev->temp_buffer,
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	f503 61a2 	add.w	r1, r3, #1296	; 0x510
 8003e9a:	2308      	movs	r3, #8
 8003e9c:	f64a 5230 	movw	r2, #44336	; 0xad30
 8003ea0:	6878      	ldr	r0, [r7, #4]
 8003ea2:	f000 f86d 	bl	8003f80 <vl53l5cx_dci_read_data>
 8003ea6:	4603      	mov	r3, r0
 8003ea8:	461a      	mov	r2, r3
 8003eaa:	7bfb      	ldrb	r3, [r7, #15]
 8003eac:	4313      	orrs	r3, r2
 8003eae:	73fb      	strb	r3, [r7, #15]
			VL53L5CX_DCI_RANGING_MODE, 8);

	if(p_dev->temp_buffer[0x01] == (uint8_t)0x1)
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	f893 3511 	ldrb.w	r3, [r3, #1297]	; 0x511
 8003eb6:	2b01      	cmp	r3, #1
 8003eb8:	d103      	bne.n	8003ec2 <vl53l5cx_get_ranging_mode+0x3c>
	{
		*p_ranging_mode = VL53L5CX_RANGING_MODE_CONTINUOUS;
 8003eba:	683b      	ldr	r3, [r7, #0]
 8003ebc:	2201      	movs	r2, #1
 8003ebe:	701a      	strb	r2, [r3, #0]
 8003ec0:	e002      	b.n	8003ec8 <vl53l5cx_get_ranging_mode+0x42>
	}
	else
	{
		*p_ranging_mode = VL53L5CX_RANGING_MODE_AUTONOMOUS;
 8003ec2:	683b      	ldr	r3, [r7, #0]
 8003ec4:	2203      	movs	r2, #3
 8003ec6:	701a      	strb	r2, [r3, #0]
	}

	return status;
 8003ec8:	7bfb      	ldrb	r3, [r7, #15]
}
 8003eca:	4618      	mov	r0, r3
 8003ecc:	3710      	adds	r7, #16
 8003ece:	46bd      	mov	sp, r7
 8003ed0:	bd80      	pop	{r7, pc}

08003ed2 <vl53l5cx_set_ranging_mode>:

uint8_t vl53l5cx_set_ranging_mode(
		VL53L5CX_Configuration		*p_dev,
		uint8_t				ranging_mode)
{
 8003ed2:	b580      	push	{r7, lr}
 8003ed4:	b084      	sub	sp, #16
 8003ed6:	af00      	add	r7, sp, #0
 8003ed8:	6078      	str	r0, [r7, #4]
 8003eda:	460b      	mov	r3, r1
 8003edc:	70fb      	strb	r3, [r7, #3]
	uint8_t status = VL53L5CX_STATUS_OK;
 8003ede:	2300      	movs	r3, #0
 8003ee0:	73fb      	strb	r3, [r7, #15]
	uint32_t single_range = 0x00;
 8003ee2:	2300      	movs	r3, #0
 8003ee4:	60bb      	str	r3, [r7, #8]

	status |= vl53l5cx_dci_read_data(p_dev, p_dev->temp_buffer,
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	f503 61a2 	add.w	r1, r3, #1296	; 0x510
 8003eec:	2308      	movs	r3, #8
 8003eee:	f64a 5230 	movw	r2, #44336	; 0xad30
 8003ef2:	6878      	ldr	r0, [r7, #4]
 8003ef4:	f000 f844 	bl	8003f80 <vl53l5cx_dci_read_data>
 8003ef8:	4603      	mov	r3, r0
 8003efa:	461a      	mov	r2, r3
 8003efc:	7bfb      	ldrb	r3, [r7, #15]
 8003efe:	4313      	orrs	r3, r2
 8003f00:	73fb      	strb	r3, [r7, #15]
			VL53L5CX_DCI_RANGING_MODE, 8);

	switch(ranging_mode)
 8003f02:	78fb      	ldrb	r3, [r7, #3]
 8003f04:	2b01      	cmp	r3, #1
 8003f06:	d002      	beq.n	8003f0e <vl53l5cx_set_ranging_mode+0x3c>
 8003f08:	2b03      	cmp	r3, #3
 8003f0a:	d00b      	beq.n	8003f24 <vl53l5cx_set_ranging_mode+0x52>
 8003f0c:	e015      	b.n	8003f3a <vl53l5cx_set_ranging_mode+0x68>
	{
		case VL53L5CX_RANGING_MODE_CONTINUOUS:
			p_dev->temp_buffer[0x01] = 0x1;
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	2201      	movs	r2, #1
 8003f12:	f883 2511 	strb.w	r2, [r3, #1297]	; 0x511
			p_dev->temp_buffer[0x03] = 0x3;
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	2203      	movs	r2, #3
 8003f1a:	f883 2513 	strb.w	r2, [r3, #1299]	; 0x513
			single_range = 0x00;
 8003f1e:	2300      	movs	r3, #0
 8003f20:	60bb      	str	r3, [r7, #8]
			break;
 8003f22:	e00d      	b.n	8003f40 <vl53l5cx_set_ranging_mode+0x6e>

		case VL53L5CX_RANGING_MODE_AUTONOMOUS:
			p_dev->temp_buffer[0x01] = 0x3;
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	2203      	movs	r2, #3
 8003f28:	f883 2511 	strb.w	r2, [r3, #1297]	; 0x511
			p_dev->temp_buffer[0x03] = 0x2;
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	2202      	movs	r2, #2
 8003f30:	f883 2513 	strb.w	r2, [r3, #1299]	; 0x513
			single_range = 0x01;
 8003f34:	2301      	movs	r3, #1
 8003f36:	60bb      	str	r3, [r7, #8]
			break;
 8003f38:	e002      	b.n	8003f40 <vl53l5cx_set_ranging_mode+0x6e>

		default:
			status = VL53L5CX_STATUS_INVALID_PARAM;
 8003f3a:	237f      	movs	r3, #127	; 0x7f
 8003f3c:	73fb      	strb	r3, [r7, #15]
			break;
 8003f3e:	bf00      	nop
	}

	status |= vl53l5cx_dci_write_data(p_dev, p_dev->temp_buffer,
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	f503 61a2 	add.w	r1, r3, #1296	; 0x510
 8003f46:	2308      	movs	r3, #8
 8003f48:	f64a 5230 	movw	r2, #44336	; 0xad30
 8003f4c:	6878      	ldr	r0, [r7, #4]
 8003f4e:	f000 f8a1 	bl	8004094 <vl53l5cx_dci_write_data>
 8003f52:	4603      	mov	r3, r0
 8003f54:	461a      	mov	r2, r3
 8003f56:	7bfb      	ldrb	r3, [r7, #15]
 8003f58:	4313      	orrs	r3, r2
 8003f5a:	73fb      	strb	r3, [r7, #15]
			VL53L5CX_DCI_RANGING_MODE, (uint16_t)8);

	status |= vl53l5cx_dci_write_data(p_dev, (uint8_t*)&single_range,
 8003f5c:	f107 0108 	add.w	r1, r7, #8
 8003f60:	2304      	movs	r3, #4
 8003f62:	f64d 1264 	movw	r2, #55652	; 0xd964
 8003f66:	6878      	ldr	r0, [r7, #4]
 8003f68:	f000 f894 	bl	8004094 <vl53l5cx_dci_write_data>
 8003f6c:	4603      	mov	r3, r0
 8003f6e:	461a      	mov	r2, r3
 8003f70:	7bfb      	ldrb	r3, [r7, #15]
 8003f72:	4313      	orrs	r3, r2
 8003f74:	73fb      	strb	r3, [r7, #15]
			VL53L5CX_DCI_SINGLE_RANGE, 
                        (uint16_t)sizeof(single_range));

	return status;
 8003f76:	7bfb      	ldrb	r3, [r7, #15]
}
 8003f78:	4618      	mov	r0, r3
 8003f7a:	3710      	adds	r7, #16
 8003f7c:	46bd      	mov	sp, r7
 8003f7e:	bd80      	pop	{r7, pc}

08003f80 <vl53l5cx_dci_read_data>:
uint8_t vl53l5cx_dci_read_data(
		VL53L5CX_Configuration		*p_dev,
		uint8_t				*data,
		uint32_t			index,
		uint16_t			data_size)
{
 8003f80:	b580      	push	{r7, lr}
 8003f82:	b08c      	sub	sp, #48	; 0x30
 8003f84:	af02      	add	r7, sp, #8
 8003f86:	60f8      	str	r0, [r7, #12]
 8003f88:	60b9      	str	r1, [r7, #8]
 8003f8a:	607a      	str	r2, [r7, #4]
 8003f8c:	807b      	strh	r3, [r7, #2]
	int16_t i;
	uint8_t status = VL53L5CX_STATUS_OK;
 8003f8e:	2300      	movs	r3, #0
 8003f90:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
        uint32_t rd_size = (uint32_t) data_size + (uint32_t)12;
 8003f94:	887b      	ldrh	r3, [r7, #2]
 8003f96:	330c      	adds	r3, #12
 8003f98:	623b      	str	r3, [r7, #32]
	uint8_t cmd[] = {0x00, 0x00, 0x00, 0x00,
 8003f9a:	4a3d      	ldr	r2, [pc, #244]	; (8004090 <vl53l5cx_dci_read_data+0x110>)
 8003f9c:	f107 0314 	add.w	r3, r7, #20
 8003fa0:	ca07      	ldmia	r2, {r0, r1, r2}
 8003fa2:	e883 0007 	stmia.w	r3, {r0, r1, r2}
			0x00, 0x00, 0x00, 0x0f,
			0x00, 0x02, 0x00, 0x08};

	/* Check if tmp buffer is large enough */
	if((data_size + (uint16_t)12)>(uint16_t)VL53L5CX_TEMPORARY_BUFFER_SIZE)
 8003fa6:	887b      	ldrh	r3, [r7, #2]
 8003fa8:	f5b3 6f83 	cmp.w	r3, #1048	; 0x418
 8003fac:	d903      	bls.n	8003fb6 <vl53l5cx_dci_read_data+0x36>
	{
		status |= VL53L5CX_STATUS_ERROR;
 8003fae:	23ff      	movs	r3, #255	; 0xff
 8003fb0:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
 8003fb4:	e065      	b.n	8004082 <vl53l5cx_dci_read_data+0x102>
	}
	else
	{
		cmd[0] = (uint8_t)(index >> 8);	
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	0a1b      	lsrs	r3, r3, #8
 8003fba:	b2db      	uxtb	r3, r3
 8003fbc:	753b      	strb	r3, [r7, #20]
		cmd[1] = (uint8_t)(index & (uint32_t)0xff);			
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	b2db      	uxtb	r3, r3
 8003fc2:	757b      	strb	r3, [r7, #21]
		cmd[2] = (uint8_t)((data_size & (uint16_t)0xff0) >> 4);
 8003fc4:	887b      	ldrh	r3, [r7, #2]
 8003fc6:	111b      	asrs	r3, r3, #4
 8003fc8:	b2db      	uxtb	r3, r3
 8003fca:	75bb      	strb	r3, [r7, #22]
		cmd[3] = (uint8_t)((data_size & (uint16_t)0xf) << 4);
 8003fcc:	887b      	ldrh	r3, [r7, #2]
 8003fce:	b2db      	uxtb	r3, r3
 8003fd0:	011b      	lsls	r3, r3, #4
 8003fd2:	b2db      	uxtb	r3, r3
 8003fd4:	75fb      	strb	r3, [r7, #23]

	/* Request data reading from FW */
		status |= WrMulti(&(p_dev->platform),
 8003fd6:	68f8      	ldr	r0, [r7, #12]
 8003fd8:	f107 0214 	add.w	r2, r7, #20
 8003fdc:	230c      	movs	r3, #12
 8003fde:	f642 71f4 	movw	r1, #12276	; 0x2ff4
 8003fe2:	f000 fecc 	bl	8004d7e <WrMulti>
 8003fe6:	4603      	mov	r3, r0
 8003fe8:	461a      	mov	r2, r3
 8003fea:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8003fee:	4313      	orrs	r3, r2
 8003ff0:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
			(VL53L5CX_UI_CMD_END-(uint16_t)11),cmd, sizeof(cmd));
		status |= _vl53l5cx_poll_for_answer(p_dev, 4, 1,
 8003ff4:	2303      	movs	r3, #3
 8003ff6:	9301      	str	r3, [sp, #4]
 8003ff8:	23ff      	movs	r3, #255	; 0xff
 8003ffa:	9300      	str	r3, [sp, #0]
 8003ffc:	f44f 5330 	mov.w	r3, #11264	; 0x2c00
 8004000:	2201      	movs	r2, #1
 8004002:	2104      	movs	r1, #4
 8004004:	68f8      	ldr	r0, [r7, #12]
 8004006:	f7fd ffaf 	bl	8001f68 <_vl53l5cx_poll_for_answer>
 800400a:	4603      	mov	r3, r0
 800400c:	461a      	mov	r2, r3
 800400e:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8004012:	4313      	orrs	r3, r2
 8004014:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
			VL53L5CX_UI_CMD_STATUS,
			0xff, 0x03);

	/* Read new data sent (4 bytes header + data_size + 8 bytes footer) */
		status |= RdMulti(&(p_dev->platform), VL53L5CX_UI_CMD_START,
 8004018:	68f8      	ldr	r0, [r7, #12]
			p_dev->temp_buffer, rd_size);
 800401a:	68fb      	ldr	r3, [r7, #12]
 800401c:	f503 62a2 	add.w	r2, r3, #1296	; 0x510
		status |= RdMulti(&(p_dev->platform), VL53L5CX_UI_CMD_START,
 8004020:	6a3b      	ldr	r3, [r7, #32]
 8004022:	f642 4104 	movw	r1, #11268	; 0x2c04
 8004026:	f000 fec1 	bl	8004dac <RdMulti>
 800402a:	4603      	mov	r3, r0
 800402c:	461a      	mov	r2, r3
 800402e:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8004032:	4313      	orrs	r3, r2
 8004034:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
		SwapBuffer(p_dev->temp_buffer, data_size + (uint16_t)12);
 8004038:	68fb      	ldr	r3, [r7, #12]
 800403a:	f503 62a2 	add.w	r2, r3, #1296	; 0x510
 800403e:	887b      	ldrh	r3, [r7, #2]
 8004040:	330c      	adds	r3, #12
 8004042:	b29b      	uxth	r3, r3
 8004044:	4619      	mov	r1, r3
 8004046:	4610      	mov	r0, r2
 8004048:	f000 fec7 	bl	8004dda <SwapBuffer>

	/* Copy data from FW into input structure (-4 bytes to remove header) */
		for(i = 0 ; i < (int16_t)data_size;i++){
 800404c:	2300      	movs	r3, #0
 800404e:	84fb      	strh	r3, [r7, #38]	; 0x26
 8004050:	e011      	b.n	8004076 <vl53l5cx_dci_read_data+0xf6>
			data[i] = p_dev->temp_buffer[i + 4];
 8004052:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 8004056:	1d1a      	adds	r2, r3, #4
 8004058:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 800405c:	68b9      	ldr	r1, [r7, #8]
 800405e:	440b      	add	r3, r1
 8004060:	68f9      	ldr	r1, [r7, #12]
 8004062:	440a      	add	r2, r1
 8004064:	f892 2510 	ldrb.w	r2, [r2, #1296]	; 0x510
 8004068:	701a      	strb	r2, [r3, #0]
		for(i = 0 ; i < (int16_t)data_size;i++){
 800406a:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 800406e:	b29b      	uxth	r3, r3
 8004070:	3301      	adds	r3, #1
 8004072:	b29b      	uxth	r3, r3
 8004074:	84fb      	strh	r3, [r7, #38]	; 0x26
 8004076:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800407a:	f9b7 2026 	ldrsh.w	r2, [r7, #38]	; 0x26
 800407e:	429a      	cmp	r2, r3
 8004080:	dbe7      	blt.n	8004052 <vl53l5cx_dci_read_data+0xd2>
		}
	}

	return status;
 8004082:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
}
 8004086:	4618      	mov	r0, r3
 8004088:	3728      	adds	r7, #40	; 0x28
 800408a:	46bd      	mov	sp, r7
 800408c:	bd80      	pop	{r7, pc}
 800408e:	bf00      	nop
 8004090:	0800ae74 	.word	0x0800ae74

08004094 <vl53l5cx_dci_write_data>:
uint8_t vl53l5cx_dci_write_data(
		VL53L5CX_Configuration		*p_dev,
		uint8_t				*data,
		uint32_t			index,
		uint16_t			data_size)
{
 8004094:	b580      	push	{r7, lr}
 8004096:	b08c      	sub	sp, #48	; 0x30
 8004098:	af02      	add	r7, sp, #8
 800409a:	60f8      	str	r0, [r7, #12]
 800409c:	60b9      	str	r1, [r7, #8]
 800409e:	607a      	str	r2, [r7, #4]
 80040a0:	807b      	strh	r3, [r7, #2]
	uint8_t status = VL53L5CX_STATUS_OK;
 80040a2:	2300      	movs	r3, #0
 80040a4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	int16_t i;

	uint8_t headers[] = {0x00, 0x00, 0x00, 0x00};
 80040a8:	2300      	movs	r3, #0
 80040aa:	61fb      	str	r3, [r7, #28]
	uint8_t footer[] = {0x00, 0x00, 0x00, 0x0f, 0x05, 0x01,
 80040ac:	2300      	movs	r3, #0
 80040ae:	753b      	strb	r3, [r7, #20]
 80040b0:	2300      	movs	r3, #0
 80040b2:	757b      	strb	r3, [r7, #21]
 80040b4:	2300      	movs	r3, #0
 80040b6:	75bb      	strb	r3, [r7, #22]
 80040b8:	230f      	movs	r3, #15
 80040ba:	75fb      	strb	r3, [r7, #23]
 80040bc:	2305      	movs	r3, #5
 80040be:	763b      	strb	r3, [r7, #24]
 80040c0:	2301      	movs	r3, #1
 80040c2:	767b      	strb	r3, [r7, #25]
			(uint8_t)((data_size + (uint16_t)8) >> 8), 
 80040c4:	887b      	ldrh	r3, [r7, #2]
 80040c6:	3308      	adds	r3, #8
 80040c8:	121b      	asrs	r3, r3, #8
 80040ca:	b2db      	uxtb	r3, r3
	uint8_t footer[] = {0x00, 0x00, 0x00, 0x0f, 0x05, 0x01,
 80040cc:	76bb      	strb	r3, [r7, #26]
			(uint8_t)((data_size + (uint16_t)8) & (uint8_t)0xFF)};
 80040ce:	887b      	ldrh	r3, [r7, #2]
 80040d0:	b2db      	uxtb	r3, r3
 80040d2:	3308      	adds	r3, #8
 80040d4:	b2db      	uxtb	r3, r3
	uint8_t footer[] = {0x00, 0x00, 0x00, 0x0f, 0x05, 0x01,
 80040d6:	76fb      	strb	r3, [r7, #27]

	uint16_t address = (uint16_t)VL53L5CX_UI_CMD_END - 
 80040d8:	887b      	ldrh	r3, [r7, #2]
 80040da:	f5c3 533f 	rsb	r3, r3, #12224	; 0x2fc0
 80040de:	3334      	adds	r3, #52	; 0x34
 80040e0:	847b      	strh	r3, [r7, #34]	; 0x22
		(data_size + (uint16_t)12) + (uint16_t)1;

	/* Check if cmd buffer is large enough */
	if((data_size + (uint16_t)12) 
 80040e2:	887b      	ldrh	r3, [r7, #2]
 80040e4:	f5b3 6f83 	cmp.w	r3, #1048	; 0x418
 80040e8:	d903      	bls.n	80040f2 <vl53l5cx_dci_write_data+0x5e>
           > (uint16_t)VL53L5CX_TEMPORARY_BUFFER_SIZE)
	{
		status |= VL53L5CX_STATUS_ERROR;
 80040ea:	23ff      	movs	r3, #255	; 0xff
 80040ec:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80040f0:	e068      	b.n	80041c4 <vl53l5cx_dci_write_data+0x130>
	}
	else
	{
		headers[0] = (uint8_t)(index >> 8);
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	0a1b      	lsrs	r3, r3, #8
 80040f6:	b2db      	uxtb	r3, r3
 80040f8:	773b      	strb	r3, [r7, #28]
		headers[1] = (uint8_t)(index & (uint32_t)0xff);
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	b2db      	uxtb	r3, r3
 80040fe:	777b      	strb	r3, [r7, #29]
		headers[2] = (uint8_t)(((data_size & (uint16_t)0xff0) >> 4));
 8004100:	887b      	ldrh	r3, [r7, #2]
 8004102:	111b      	asrs	r3, r3, #4
 8004104:	b2db      	uxtb	r3, r3
 8004106:	77bb      	strb	r3, [r7, #30]
		headers[3] = (uint8_t)((data_size & (uint16_t)0xf) << 4);
 8004108:	887b      	ldrh	r3, [r7, #2]
 800410a:	b2db      	uxtb	r3, r3
 800410c:	011b      	lsls	r3, r3, #4
 800410e:	b2db      	uxtb	r3, r3
 8004110:	77fb      	strb	r3, [r7, #31]

	/* Copy data from structure to FW format (+4 bytes to add header) */
		SwapBuffer(data, data_size);
 8004112:	887b      	ldrh	r3, [r7, #2]
 8004114:	4619      	mov	r1, r3
 8004116:	68b8      	ldr	r0, [r7, #8]
 8004118:	f000 fe5f 	bl	8004dda <SwapBuffer>
		for(i = (int16_t)data_size - (int16_t)1 ; i >= 0; i--)
 800411c:	887b      	ldrh	r3, [r7, #2]
 800411e:	3b01      	subs	r3, #1
 8004120:	b29b      	uxth	r3, r3
 8004122:	84bb      	strh	r3, [r7, #36]	; 0x24
 8004124:	e012      	b.n	800414c <vl53l5cx_dci_write_data+0xb8>
		{
			p_dev->temp_buffer[i + 4] = data[i];
 8004126:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 800412a:	68ba      	ldr	r2, [r7, #8]
 800412c:	441a      	add	r2, r3
 800412e:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 8004132:	3304      	adds	r3, #4
 8004134:	7811      	ldrb	r1, [r2, #0]
 8004136:	68fa      	ldr	r2, [r7, #12]
 8004138:	4413      	add	r3, r2
 800413a:	460a      	mov	r2, r1
 800413c:	f883 2510 	strb.w	r2, [r3, #1296]	; 0x510
		for(i = (int16_t)data_size - (int16_t)1 ; i >= 0; i--)
 8004140:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 8004144:	b29b      	uxth	r3, r3
 8004146:	3b01      	subs	r3, #1
 8004148:	b29b      	uxth	r3, r3
 800414a:	84bb      	strh	r3, [r7, #36]	; 0x24
 800414c:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 8004150:	2b00      	cmp	r3, #0
 8004152:	dae8      	bge.n	8004126 <vl53l5cx_dci_write_data+0x92>
		}

	/* Add headers and footer */
		(void)memcpy(&p_dev->temp_buffer[0], headers, sizeof(headers));
 8004154:	68fb      	ldr	r3, [r7, #12]
 8004156:	f503 63a2 	add.w	r3, r3, #1296	; 0x510
 800415a:	69fa      	ldr	r2, [r7, #28]
 800415c:	601a      	str	r2, [r3, #0]
		(void)memcpy(&p_dev->temp_buffer[data_size + (uint16_t)4],
 800415e:	887b      	ldrh	r3, [r7, #2]
 8004160:	3304      	adds	r3, #4
 8004162:	f503 63a2 	add.w	r3, r3, #1296	; 0x510
 8004166:	68fa      	ldr	r2, [r7, #12]
 8004168:	4413      	add	r3, r2
 800416a:	461a      	mov	r2, r3
 800416c:	f107 0314 	add.w	r3, r7, #20
 8004170:	cb03      	ldmia	r3!, {r0, r1}
 8004172:	6010      	str	r0, [r2, #0]
 8004174:	6051      	str	r1, [r2, #4]
			footer, sizeof(footer));

	/* Send data to FW */
		status |= WrMulti(&(p_dev->platform),address,
 8004176:	68f8      	ldr	r0, [r7, #12]
			p_dev->temp_buffer,
 8004178:	68fb      	ldr	r3, [r7, #12]
 800417a:	f503 62a2 	add.w	r2, r3, #1296	; 0x510
			(uint32_t)((uint32_t)data_size + (uint32_t)12));
 800417e:	887b      	ldrh	r3, [r7, #2]
		status |= WrMulti(&(p_dev->platform),address,
 8004180:	330c      	adds	r3, #12
 8004182:	8c79      	ldrh	r1, [r7, #34]	; 0x22
 8004184:	f000 fdfb 	bl	8004d7e <WrMulti>
 8004188:	4603      	mov	r3, r0
 800418a:	461a      	mov	r2, r3
 800418c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8004190:	4313      	orrs	r3, r2
 8004192:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		status |= _vl53l5cx_poll_for_answer(p_dev, 4, 1,
 8004196:	2303      	movs	r3, #3
 8004198:	9301      	str	r3, [sp, #4]
 800419a:	23ff      	movs	r3, #255	; 0xff
 800419c:	9300      	str	r3, [sp, #0]
 800419e:	f44f 5330 	mov.w	r3, #11264	; 0x2c00
 80041a2:	2201      	movs	r2, #1
 80041a4:	2104      	movs	r1, #4
 80041a6:	68f8      	ldr	r0, [r7, #12]
 80041a8:	f7fd fede 	bl	8001f68 <_vl53l5cx_poll_for_answer>
 80041ac:	4603      	mov	r3, r0
 80041ae:	461a      	mov	r2, r3
 80041b0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80041b4:	4313      	orrs	r3, r2
 80041b6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			VL53L5CX_UI_CMD_STATUS, 0xff, 0x03);

		SwapBuffer(data, data_size);
 80041ba:	887b      	ldrh	r3, [r7, #2]
 80041bc:	4619      	mov	r1, r3
 80041be:	68b8      	ldr	r0, [r7, #8]
 80041c0:	f000 fe0b 	bl	8004dda <SwapBuffer>
	}

	return status;
 80041c4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 80041c8:	4618      	mov	r0, r3
 80041ca:	3728      	adds	r7, #40	; 0x28
 80041cc:	46bd      	mov	sp, r7
 80041ce:	bd80      	pop	{r7, pc}

080041d0 <vl53l5cx_dci_replace_data>:
		uint32_t			index,
		uint16_t			data_size,
		uint8_t				*new_data,
		uint16_t			new_data_size,
		uint16_t			new_data_pos)
{
 80041d0:	b580      	push	{r7, lr}
 80041d2:	b086      	sub	sp, #24
 80041d4:	af00      	add	r7, sp, #0
 80041d6:	60f8      	str	r0, [r7, #12]
 80041d8:	60b9      	str	r1, [r7, #8]
 80041da:	607a      	str	r2, [r7, #4]
 80041dc:	807b      	strh	r3, [r7, #2]
	uint8_t status = VL53L5CX_STATUS_OK;
 80041de:	2300      	movs	r3, #0
 80041e0:	75fb      	strb	r3, [r7, #23]

	status |= vl53l5cx_dci_read_data(p_dev, data, index, data_size);
 80041e2:	887b      	ldrh	r3, [r7, #2]
 80041e4:	687a      	ldr	r2, [r7, #4]
 80041e6:	68b9      	ldr	r1, [r7, #8]
 80041e8:	68f8      	ldr	r0, [r7, #12]
 80041ea:	f7ff fec9 	bl	8003f80 <vl53l5cx_dci_read_data>
 80041ee:	4603      	mov	r3, r0
 80041f0:	461a      	mov	r2, r3
 80041f2:	7dfb      	ldrb	r3, [r7, #23]
 80041f4:	4313      	orrs	r3, r2
 80041f6:	75fb      	strb	r3, [r7, #23]
	(void)memcpy(&(data[new_data_pos]), new_data, new_data_size);
 80041f8:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80041fa:	68ba      	ldr	r2, [r7, #8]
 80041fc:	4413      	add	r3, r2
 80041fe:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8004200:	6a39      	ldr	r1, [r7, #32]
 8004202:	4618      	mov	r0, r3
 8004204:	f006 f8c8 	bl	800a398 <memcpy>
	status |= vl53l5cx_dci_write_data(p_dev, data, index, data_size);
 8004208:	887b      	ldrh	r3, [r7, #2]
 800420a:	687a      	ldr	r2, [r7, #4]
 800420c:	68b9      	ldr	r1, [r7, #8]
 800420e:	68f8      	ldr	r0, [r7, #12]
 8004210:	f7ff ff40 	bl	8004094 <vl53l5cx_dci_write_data>
 8004214:	4603      	mov	r3, r0
 8004216:	461a      	mov	r2, r3
 8004218:	7dfb      	ldrb	r3, [r7, #23]
 800421a:	4313      	orrs	r3, r2
 800421c:	75fb      	strb	r3, [r7, #23]

	return status;
 800421e:	7dfb      	ldrb	r3, [r7, #23]
}
 8004220:	4618      	mov	r0, r3
 8004222:	3718      	adds	r7, #24
 8004224:	46bd      	mov	sp, r7
 8004226:	bd80      	pop	{r7, pc}

08004228 <vl53l5cx_set_detection_thresholds_enable>:
}

uint8_t vl53l5cx_set_detection_thresholds_enable(
		VL53L5CX_Configuration		*p_dev,
		uint8_t				enabled)
{
 8004228:	b580      	push	{r7, lr}
 800422a:	b088      	sub	sp, #32
 800422c:	af04      	add	r7, sp, #16
 800422e:	6078      	str	r0, [r7, #4]
 8004230:	460b      	mov	r3, r1
 8004232:	70fb      	strb	r3, [r7, #3]
	uint8_t tmp, status = VL53L5CX_STATUS_OK;
 8004234:	2300      	movs	r3, #0
 8004236:	73fb      	strb	r3, [r7, #15]
	uint8_t grp_global_config[] = {0x01, 0x00, 0x01, 0x00};
 8004238:	f04f 1301 	mov.w	r3, #65537	; 0x10001
 800423c:	60bb      	str	r3, [r7, #8]

	if(enabled == (uint8_t)1)
 800423e:	78fb      	ldrb	r3, [r7, #3]
 8004240:	2b01      	cmp	r3, #1
 8004242:	d104      	bne.n	800424e <vl53l5cx_set_detection_thresholds_enable+0x26>
	{
		grp_global_config[0x01] = 0x01;
 8004244:	2301      	movs	r3, #1
 8004246:	727b      	strb	r3, [r7, #9]
		tmp = 0x04;
 8004248:	2304      	movs	r3, #4
 800424a:	73bb      	strb	r3, [r7, #14]
 800424c:	e003      	b.n	8004256 <vl53l5cx_set_detection_thresholds_enable+0x2e>
	}
	else
	{
		grp_global_config[0x01] = 0x00;
 800424e:	2300      	movs	r3, #0
 8004250:	727b      	strb	r3, [r7, #9]
		tmp = 0x0C;
 8004252:	230c      	movs	r3, #12
 8004254:	73bb      	strb	r3, [r7, #14]
	}

	/* Set global interrupt config */
	status |= vl53l5cx_dci_replace_data(p_dev, p_dev->temp_buffer,
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	f503 61a2 	add.w	r1, r3, #1296	; 0x510
 800425c:	2300      	movs	r3, #0
 800425e:	9302      	str	r3, [sp, #8]
 8004260:	2304      	movs	r3, #4
 8004262:	9301      	str	r3, [sp, #4]
 8004264:	f107 0308 	add.w	r3, r7, #8
 8004268:	9300      	str	r3, [sp, #0]
 800426a:	2308      	movs	r3, #8
 800426c:	f24b 62e0 	movw	r2, #46816	; 0xb6e0
 8004270:	6878      	ldr	r0, [r7, #4]
 8004272:	f7ff ffad 	bl	80041d0 <vl53l5cx_dci_replace_data>
 8004276:	4603      	mov	r3, r0
 8004278:	461a      	mov	r2, r3
 800427a:	7bfb      	ldrb	r3, [r7, #15]
 800427c:	4313      	orrs	r3, r2
 800427e:	73fb      	strb	r3, [r7, #15]
			VL53L5CX_DCI_DET_THRESH_GLOBAL_CONFIG, 8,
			(uint8_t*)&grp_global_config, 4, 0x00);

	/* Update interrupt config */
	status |= vl53l5cx_dci_replace_data(p_dev, p_dev->temp_buffer,
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	f503 61a2 	add.w	r1, r3, #1296	; 0x510
 8004286:	2311      	movs	r3, #17
 8004288:	9302      	str	r3, [sp, #8]
 800428a:	2301      	movs	r3, #1
 800428c:	9301      	str	r3, [sp, #4]
 800428e:	f107 030e 	add.w	r3, r7, #14
 8004292:	9300      	str	r3, [sp, #0]
 8004294:	2314      	movs	r3, #20
 8004296:	f245 4288 	movw	r2, #21640	; 0x5488
 800429a:	6878      	ldr	r0, [r7, #4]
 800429c:	f7ff ff98 	bl	80041d0 <vl53l5cx_dci_replace_data>
 80042a0:	4603      	mov	r3, r0
 80042a2:	461a      	mov	r2, r3
 80042a4:	7bfb      	ldrb	r3, [r7, #15]
 80042a6:	4313      	orrs	r3, r2
 80042a8:	73fb      	strb	r3, [r7, #15]
			VL53L5CX_DCI_DET_THRESH_CONFIG, 20,
			(uint8_t*)&tmp, 1, 0x11);

	return status;
 80042aa:	7bfb      	ldrb	r3, [r7, #15]
}
 80042ac:	4618      	mov	r0, r3
 80042ae:	3710      	adds	r7, #16
 80042b0:	46bd      	mov	sp, r7
 80042b2:	bd80      	pop	{r7, pc}

080042b4 <vl53l5cx_set_detection_thresholds>:
}

uint8_t vl53l5cx_set_detection_thresholds(
		VL53L5CX_Configuration			*p_dev,
		VL53L5CX_DetectionThresholds	*p_thresholds)
{
 80042b4:	b580      	push	{r7, lr}
 80042b6:	b086      	sub	sp, #24
 80042b8:	af00      	add	r7, sp, #0
 80042ba:	6078      	str	r0, [r7, #4]
 80042bc:	6039      	str	r1, [r7, #0]
	uint8_t i, status = VL53L5CX_STATUS_OK;
 80042be:	2300      	movs	r3, #0
 80042c0:	75bb      	strb	r3, [r7, #22]
	uint8_t grp_valid_target_cfg[] = {0x05, 0x05, 0x05, 0x05,
 80042c2:	4aab      	ldr	r2, [pc, #684]	; (8004570 <vl53l5cx_set_detection_thresholds+0x2bc>)
 80042c4:	f107 030c 	add.w	r3, r7, #12
 80042c8:	e892 0003 	ldmia.w	r2, {r0, r1}
 80042cc:	e883 0003 	stmia.w	r3, {r0, r1}
					0x05, 0x05, 0x05, 0x05};

	for(i = 0; i < (uint8_t) VL53L5CX_NB_THRESHOLDS; i++)
 80042d0:	2300      	movs	r3, #0
 80042d2:	75fb      	strb	r3, [r7, #23]
 80042d4:	e128      	b.n	8004528 <vl53l5cx_set_detection_thresholds+0x274>
	{
		switch(p_thresholds[i].measurement)
 80042d6:	7dfa      	ldrb	r2, [r7, #23]
 80042d8:	4613      	mov	r3, r2
 80042da:	005b      	lsls	r3, r3, #1
 80042dc:	4413      	add	r3, r2
 80042de:	009b      	lsls	r3, r3, #2
 80042e0:	461a      	mov	r2, r3
 80042e2:	683b      	ldr	r3, [r7, #0]
 80042e4:	4413      	add	r3, r2
 80042e6:	7a1b      	ldrb	r3, [r3, #8]
 80042e8:	3b01      	subs	r3, #1
 80042ea:	2b12      	cmp	r3, #18
 80042ec:	f200 8118 	bhi.w	8004520 <vl53l5cx_set_detection_thresholds+0x26c>
 80042f0:	a201      	add	r2, pc, #4	; (adr r2, 80042f8 <vl53l5cx_set_detection_thresholds+0x44>)
 80042f2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80042f6:	bf00      	nop
 80042f8:	08004345 	.word	0x08004345
 80042fc:	08004393 	.word	0x08004393
 8004300:	08004521 	.word	0x08004521
 8004304:	080043e1 	.word	0x080043e1
 8004308:	08004521 	.word	0x08004521
 800430c:	08004521 	.word	0x08004521
 8004310:	08004521 	.word	0x08004521
 8004314:	0800442f 	.word	0x0800442f
 8004318:	08004521 	.word	0x08004521
 800431c:	08004521 	.word	0x08004521
 8004320:	08004521 	.word	0x08004521
 8004324:	08004521 	.word	0x08004521
 8004328:	0800447d 	.word	0x0800447d
 800432c:	08004521 	.word	0x08004521
 8004330:	08004521 	.word	0x08004521
 8004334:	08004521 	.word	0x08004521
 8004338:	08004521 	.word	0x08004521
 800433c:	08004521 	.word	0x08004521
 8004340:	080044cb 	.word	0x080044cb
		{
			case VL53L5CX_DISTANCE_MM:
				p_thresholds[i].param_low_thresh  *= 4;
 8004344:	7dfa      	ldrb	r2, [r7, #23]
 8004346:	4613      	mov	r3, r2
 8004348:	005b      	lsls	r3, r3, #1
 800434a:	4413      	add	r3, r2
 800434c:	009b      	lsls	r3, r3, #2
 800434e:	461a      	mov	r2, r3
 8004350:	683b      	ldr	r3, [r7, #0]
 8004352:	4413      	add	r3, r2
 8004354:	6819      	ldr	r1, [r3, #0]
 8004356:	7dfa      	ldrb	r2, [r7, #23]
 8004358:	4613      	mov	r3, r2
 800435a:	005b      	lsls	r3, r3, #1
 800435c:	4413      	add	r3, r2
 800435e:	009b      	lsls	r3, r3, #2
 8004360:	461a      	mov	r2, r3
 8004362:	683b      	ldr	r3, [r7, #0]
 8004364:	4413      	add	r3, r2
 8004366:	008a      	lsls	r2, r1, #2
 8004368:	601a      	str	r2, [r3, #0]
				p_thresholds[i].param_high_thresh *= 4;
 800436a:	7dfa      	ldrb	r2, [r7, #23]
 800436c:	4613      	mov	r3, r2
 800436e:	005b      	lsls	r3, r3, #1
 8004370:	4413      	add	r3, r2
 8004372:	009b      	lsls	r3, r3, #2
 8004374:	461a      	mov	r2, r3
 8004376:	683b      	ldr	r3, [r7, #0]
 8004378:	4413      	add	r3, r2
 800437a:	6859      	ldr	r1, [r3, #4]
 800437c:	7dfa      	ldrb	r2, [r7, #23]
 800437e:	4613      	mov	r3, r2
 8004380:	005b      	lsls	r3, r3, #1
 8004382:	4413      	add	r3, r2
 8004384:	009b      	lsls	r3, r3, #2
 8004386:	461a      	mov	r2, r3
 8004388:	683b      	ldr	r3, [r7, #0]
 800438a:	4413      	add	r3, r2
 800438c:	008a      	lsls	r2, r1, #2
 800438e:	605a      	str	r2, [r3, #4]
				break;
 8004390:	e0c7      	b.n	8004522 <vl53l5cx_set_detection_thresholds+0x26e>
			case VL53L5CX_SIGNAL_PER_SPAD_KCPS:
				p_thresholds[i].param_low_thresh  *= 2048;
 8004392:	7dfa      	ldrb	r2, [r7, #23]
 8004394:	4613      	mov	r3, r2
 8004396:	005b      	lsls	r3, r3, #1
 8004398:	4413      	add	r3, r2
 800439a:	009b      	lsls	r3, r3, #2
 800439c:	461a      	mov	r2, r3
 800439e:	683b      	ldr	r3, [r7, #0]
 80043a0:	4413      	add	r3, r2
 80043a2:	6819      	ldr	r1, [r3, #0]
 80043a4:	7dfa      	ldrb	r2, [r7, #23]
 80043a6:	4613      	mov	r3, r2
 80043a8:	005b      	lsls	r3, r3, #1
 80043aa:	4413      	add	r3, r2
 80043ac:	009b      	lsls	r3, r3, #2
 80043ae:	461a      	mov	r2, r3
 80043b0:	683b      	ldr	r3, [r7, #0]
 80043b2:	4413      	add	r3, r2
 80043b4:	02ca      	lsls	r2, r1, #11
 80043b6:	601a      	str	r2, [r3, #0]
				p_thresholds[i].param_high_thresh *= 2048;
 80043b8:	7dfa      	ldrb	r2, [r7, #23]
 80043ba:	4613      	mov	r3, r2
 80043bc:	005b      	lsls	r3, r3, #1
 80043be:	4413      	add	r3, r2
 80043c0:	009b      	lsls	r3, r3, #2
 80043c2:	461a      	mov	r2, r3
 80043c4:	683b      	ldr	r3, [r7, #0]
 80043c6:	4413      	add	r3, r2
 80043c8:	6859      	ldr	r1, [r3, #4]
 80043ca:	7dfa      	ldrb	r2, [r7, #23]
 80043cc:	4613      	mov	r3, r2
 80043ce:	005b      	lsls	r3, r3, #1
 80043d0:	4413      	add	r3, r2
 80043d2:	009b      	lsls	r3, r3, #2
 80043d4:	461a      	mov	r2, r3
 80043d6:	683b      	ldr	r3, [r7, #0]
 80043d8:	4413      	add	r3, r2
 80043da:	02ca      	lsls	r2, r1, #11
 80043dc:	605a      	str	r2, [r3, #4]
				break;
 80043de:	e0a0      	b.n	8004522 <vl53l5cx_set_detection_thresholds+0x26e>
			case VL53L5CX_RANGE_SIGMA_MM:
				p_thresholds[i].param_low_thresh  *= 128;
 80043e0:	7dfa      	ldrb	r2, [r7, #23]
 80043e2:	4613      	mov	r3, r2
 80043e4:	005b      	lsls	r3, r3, #1
 80043e6:	4413      	add	r3, r2
 80043e8:	009b      	lsls	r3, r3, #2
 80043ea:	461a      	mov	r2, r3
 80043ec:	683b      	ldr	r3, [r7, #0]
 80043ee:	4413      	add	r3, r2
 80043f0:	6819      	ldr	r1, [r3, #0]
 80043f2:	7dfa      	ldrb	r2, [r7, #23]
 80043f4:	4613      	mov	r3, r2
 80043f6:	005b      	lsls	r3, r3, #1
 80043f8:	4413      	add	r3, r2
 80043fa:	009b      	lsls	r3, r3, #2
 80043fc:	461a      	mov	r2, r3
 80043fe:	683b      	ldr	r3, [r7, #0]
 8004400:	4413      	add	r3, r2
 8004402:	01ca      	lsls	r2, r1, #7
 8004404:	601a      	str	r2, [r3, #0]
				p_thresholds[i].param_high_thresh *= 128;
 8004406:	7dfa      	ldrb	r2, [r7, #23]
 8004408:	4613      	mov	r3, r2
 800440a:	005b      	lsls	r3, r3, #1
 800440c:	4413      	add	r3, r2
 800440e:	009b      	lsls	r3, r3, #2
 8004410:	461a      	mov	r2, r3
 8004412:	683b      	ldr	r3, [r7, #0]
 8004414:	4413      	add	r3, r2
 8004416:	6859      	ldr	r1, [r3, #4]
 8004418:	7dfa      	ldrb	r2, [r7, #23]
 800441a:	4613      	mov	r3, r2
 800441c:	005b      	lsls	r3, r3, #1
 800441e:	4413      	add	r3, r2
 8004420:	009b      	lsls	r3, r3, #2
 8004422:	461a      	mov	r2, r3
 8004424:	683b      	ldr	r3, [r7, #0]
 8004426:	4413      	add	r3, r2
 8004428:	01ca      	lsls	r2, r1, #7
 800442a:	605a      	str	r2, [r3, #4]
				break;
 800442c:	e079      	b.n	8004522 <vl53l5cx_set_detection_thresholds+0x26e>
			case VL53L5CX_AMBIENT_PER_SPAD_KCPS:
				p_thresholds[i].param_low_thresh  *= 2048;
 800442e:	7dfa      	ldrb	r2, [r7, #23]
 8004430:	4613      	mov	r3, r2
 8004432:	005b      	lsls	r3, r3, #1
 8004434:	4413      	add	r3, r2
 8004436:	009b      	lsls	r3, r3, #2
 8004438:	461a      	mov	r2, r3
 800443a:	683b      	ldr	r3, [r7, #0]
 800443c:	4413      	add	r3, r2
 800443e:	6819      	ldr	r1, [r3, #0]
 8004440:	7dfa      	ldrb	r2, [r7, #23]
 8004442:	4613      	mov	r3, r2
 8004444:	005b      	lsls	r3, r3, #1
 8004446:	4413      	add	r3, r2
 8004448:	009b      	lsls	r3, r3, #2
 800444a:	461a      	mov	r2, r3
 800444c:	683b      	ldr	r3, [r7, #0]
 800444e:	4413      	add	r3, r2
 8004450:	02ca      	lsls	r2, r1, #11
 8004452:	601a      	str	r2, [r3, #0]
				p_thresholds[i].param_high_thresh *= 2048;
 8004454:	7dfa      	ldrb	r2, [r7, #23]
 8004456:	4613      	mov	r3, r2
 8004458:	005b      	lsls	r3, r3, #1
 800445a:	4413      	add	r3, r2
 800445c:	009b      	lsls	r3, r3, #2
 800445e:	461a      	mov	r2, r3
 8004460:	683b      	ldr	r3, [r7, #0]
 8004462:	4413      	add	r3, r2
 8004464:	6859      	ldr	r1, [r3, #4]
 8004466:	7dfa      	ldrb	r2, [r7, #23]
 8004468:	4613      	mov	r3, r2
 800446a:	005b      	lsls	r3, r3, #1
 800446c:	4413      	add	r3, r2
 800446e:	009b      	lsls	r3, r3, #2
 8004470:	461a      	mov	r2, r3
 8004472:	683b      	ldr	r3, [r7, #0]
 8004474:	4413      	add	r3, r2
 8004476:	02ca      	lsls	r2, r1, #11
 8004478:	605a      	str	r2, [r3, #4]
				break;
 800447a:	e052      	b.n	8004522 <vl53l5cx_set_detection_thresholds+0x26e>
			case VL53L5CX_NB_SPADS_ENABLED:
				p_thresholds[i].param_low_thresh  *= 256;
 800447c:	7dfa      	ldrb	r2, [r7, #23]
 800447e:	4613      	mov	r3, r2
 8004480:	005b      	lsls	r3, r3, #1
 8004482:	4413      	add	r3, r2
 8004484:	009b      	lsls	r3, r3, #2
 8004486:	461a      	mov	r2, r3
 8004488:	683b      	ldr	r3, [r7, #0]
 800448a:	4413      	add	r3, r2
 800448c:	6819      	ldr	r1, [r3, #0]
 800448e:	7dfa      	ldrb	r2, [r7, #23]
 8004490:	4613      	mov	r3, r2
 8004492:	005b      	lsls	r3, r3, #1
 8004494:	4413      	add	r3, r2
 8004496:	009b      	lsls	r3, r3, #2
 8004498:	461a      	mov	r2, r3
 800449a:	683b      	ldr	r3, [r7, #0]
 800449c:	4413      	add	r3, r2
 800449e:	020a      	lsls	r2, r1, #8
 80044a0:	601a      	str	r2, [r3, #0]
				p_thresholds[i].param_high_thresh *= 256;
 80044a2:	7dfa      	ldrb	r2, [r7, #23]
 80044a4:	4613      	mov	r3, r2
 80044a6:	005b      	lsls	r3, r3, #1
 80044a8:	4413      	add	r3, r2
 80044aa:	009b      	lsls	r3, r3, #2
 80044ac:	461a      	mov	r2, r3
 80044ae:	683b      	ldr	r3, [r7, #0]
 80044b0:	4413      	add	r3, r2
 80044b2:	6859      	ldr	r1, [r3, #4]
 80044b4:	7dfa      	ldrb	r2, [r7, #23]
 80044b6:	4613      	mov	r3, r2
 80044b8:	005b      	lsls	r3, r3, #1
 80044ba:	4413      	add	r3, r2
 80044bc:	009b      	lsls	r3, r3, #2
 80044be:	461a      	mov	r2, r3
 80044c0:	683b      	ldr	r3, [r7, #0]
 80044c2:	4413      	add	r3, r2
 80044c4:	020a      	lsls	r2, r1, #8
 80044c6:	605a      	str	r2, [r3, #4]
				break;
 80044c8:	e02b      	b.n	8004522 <vl53l5cx_set_detection_thresholds+0x26e>
			case VL53L5CX_MOTION_INDICATOR:
				p_thresholds[i].param_low_thresh  *= 65535;
 80044ca:	7dfa      	ldrb	r2, [r7, #23]
 80044cc:	4613      	mov	r3, r2
 80044ce:	005b      	lsls	r3, r3, #1
 80044d0:	4413      	add	r3, r2
 80044d2:	009b      	lsls	r3, r3, #2
 80044d4:	461a      	mov	r2, r3
 80044d6:	683b      	ldr	r3, [r7, #0]
 80044d8:	4413      	add	r3, r2
 80044da:	681a      	ldr	r2, [r3, #0]
 80044dc:	7df9      	ldrb	r1, [r7, #23]
 80044de:	460b      	mov	r3, r1
 80044e0:	005b      	lsls	r3, r3, #1
 80044e2:	440b      	add	r3, r1
 80044e4:	009b      	lsls	r3, r3, #2
 80044e6:	4619      	mov	r1, r3
 80044e8:	683b      	ldr	r3, [r7, #0]
 80044ea:	4419      	add	r1, r3
 80044ec:	4613      	mov	r3, r2
 80044ee:	041b      	lsls	r3, r3, #16
 80044f0:	1a9b      	subs	r3, r3, r2
 80044f2:	600b      	str	r3, [r1, #0]
				p_thresholds[i].param_high_thresh *= 65535;
 80044f4:	7dfa      	ldrb	r2, [r7, #23]
 80044f6:	4613      	mov	r3, r2
 80044f8:	005b      	lsls	r3, r3, #1
 80044fa:	4413      	add	r3, r2
 80044fc:	009b      	lsls	r3, r3, #2
 80044fe:	461a      	mov	r2, r3
 8004500:	683b      	ldr	r3, [r7, #0]
 8004502:	4413      	add	r3, r2
 8004504:	685a      	ldr	r2, [r3, #4]
 8004506:	7df9      	ldrb	r1, [r7, #23]
 8004508:	460b      	mov	r3, r1
 800450a:	005b      	lsls	r3, r3, #1
 800450c:	440b      	add	r3, r1
 800450e:	009b      	lsls	r3, r3, #2
 8004510:	4619      	mov	r1, r3
 8004512:	683b      	ldr	r3, [r7, #0]
 8004514:	4419      	add	r1, r3
 8004516:	4613      	mov	r3, r2
 8004518:	041b      	lsls	r3, r3, #16
 800451a:	1a9b      	subs	r3, r3, r2
 800451c:	604b      	str	r3, [r1, #4]
				break;
 800451e:	e000      	b.n	8004522 <vl53l5cx_set_detection_thresholds+0x26e>
			default:
				break;
 8004520:	bf00      	nop
	for(i = 0; i < (uint8_t) VL53L5CX_NB_THRESHOLDS; i++)
 8004522:	7dfb      	ldrb	r3, [r7, #23]
 8004524:	3301      	adds	r3, #1
 8004526:	75fb      	strb	r3, [r7, #23]
 8004528:	7dfb      	ldrb	r3, [r7, #23]
 800452a:	2b3f      	cmp	r3, #63	; 0x3f
 800452c:	f67f aed3 	bls.w	80042d6 <vl53l5cx_set_detection_thresholds+0x22>
		}
	}

	/* Set valid target list */
	status |= vl53l5cx_dci_write_data(p_dev, (uint8_t*)grp_valid_target_cfg,
 8004530:	f107 010c 	add.w	r1, r7, #12
 8004534:	2308      	movs	r3, #8
 8004536:	f64b 12f0 	movw	r2, #47600	; 0xb9f0
 800453a:	6878      	ldr	r0, [r7, #4]
 800453c:	f7ff fdaa 	bl	8004094 <vl53l5cx_dci_write_data>
 8004540:	4603      	mov	r3, r0
 8004542:	461a      	mov	r2, r3
 8004544:	7dbb      	ldrb	r3, [r7, #22]
 8004546:	4313      	orrs	r3, r2
 8004548:	75bb      	strb	r3, [r7, #22]
			VL53L5CX_DCI_DET_THRESH_VALID_STATUS, 
			(uint16_t)sizeof(grp_valid_target_cfg));

	/* Set thresholds configuration */
	status |= vl53l5cx_dci_write_data(p_dev, (uint8_t*)p_thresholds,
 800454a:	f44f 7340 	mov.w	r3, #768	; 0x300
 800454e:	f24b 62e8 	movw	r2, #46824	; 0xb6e8
 8004552:	6839      	ldr	r1, [r7, #0]
 8004554:	6878      	ldr	r0, [r7, #4]
 8004556:	f7ff fd9d 	bl	8004094 <vl53l5cx_dci_write_data>
 800455a:	4603      	mov	r3, r0
 800455c:	461a      	mov	r2, r3
 800455e:	7dbb      	ldrb	r3, [r7, #22]
 8004560:	4313      	orrs	r3, r2
 8004562:	75bb      	strb	r3, [r7, #22]
			VL53L5CX_DCI_DET_THRESH_START, 
			(uint16_t)(VL53L5CX_NB_THRESHOLDS
			*sizeof(VL53L5CX_DetectionThresholds)));

	return status;
 8004564:	7dbb      	ldrb	r3, [r7, #22]
}
 8004566:	4618      	mov	r0, r3
 8004568:	3718      	adds	r7, #24
 800456a:	46bd      	mov	sp, r7
 800456c:	bd80      	pop	{r7, pc}
 800456e:	bf00      	nop
 8004570:	0800ae80 	.word	0x0800ae80

08004574 <_vl53l5cx_poll_for_answer>:

static uint8_t _vl53l5cx_poll_for_answer(
		VL53L5CX_Configuration   *p_dev,
		uint16_t 				address,
		uint8_t 				expected_value)
{
 8004574:	b580      	push	{r7, lr}
 8004576:	b084      	sub	sp, #16
 8004578:	af00      	add	r7, sp, #0
 800457a:	6078      	str	r0, [r7, #4]
 800457c:	460b      	mov	r3, r1
 800457e:	807b      	strh	r3, [r7, #2]
 8004580:	4613      	mov	r3, r2
 8004582:	707b      	strb	r3, [r7, #1]
	uint8_t status = VL53L5CX_STATUS_OK;
 8004584:	2300      	movs	r3, #0
 8004586:	73fb      	strb	r3, [r7, #15]
	uint8_t timeout = 0;
 8004588:	2300      	movs	r3, #0
 800458a:	73bb      	strb	r3, [r7, #14]

	do {
		status |= RdMulti(&(p_dev->platform), 
 800458c:	6878      	ldr	r0, [r7, #4]
                                  address, p_dev->temp_buffer, 4);
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	f503 62a2 	add.w	r2, r3, #1296	; 0x510
		status |= RdMulti(&(p_dev->platform), 
 8004594:	8879      	ldrh	r1, [r7, #2]
 8004596:	2304      	movs	r3, #4
 8004598:	f000 fc08 	bl	8004dac <RdMulti>
 800459c:	4603      	mov	r3, r0
 800459e:	461a      	mov	r2, r3
 80045a0:	7bfb      	ldrb	r3, [r7, #15]
 80045a2:	4313      	orrs	r3, r2
 80045a4:	73fb      	strb	r3, [r7, #15]
		status |= WaitMs(&(p_dev->platform), 10);
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	210a      	movs	r1, #10
 80045aa:	4618      	mov	r0, r3
 80045ac:	f000 fc4b 	bl	8004e46 <WaitMs>
 80045b0:	4603      	mov	r3, r0
 80045b2:	461a      	mov	r2, r3
 80045b4:	7bfb      	ldrb	r3, [r7, #15]
 80045b6:	4313      	orrs	r3, r2
 80045b8:	73fb      	strb	r3, [r7, #15]
		
                /* 2s timeout or FW error*/
		if((timeout >= (uint8_t)200) 
 80045ba:	7bbb      	ldrb	r3, [r7, #14]
 80045bc:	2bc7      	cmp	r3, #199	; 0xc7
 80045be:	d804      	bhi.n	80045ca <_vl53l5cx_poll_for_answer+0x56>
                   || (p_dev->temp_buffer[2] >= (uint8_t) 0x7f))
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	f893 3512 	ldrb.w	r3, [r3, #1298]	; 0x512
 80045c6:	2b7e      	cmp	r3, #126	; 0x7e
 80045c8:	d904      	bls.n	80045d4 <_vl53l5cx_poll_for_answer+0x60>
		{
			status |= VL53L5CX_MCU_ERROR;		
 80045ca:	7bfb      	ldrb	r3, [r7, #15]
 80045cc:	f043 0342 	orr.w	r3, r3, #66	; 0x42
 80045d0:	73fb      	strb	r3, [r7, #15]
			break;
 80045d2:	e008      	b.n	80045e6 <_vl53l5cx_poll_for_answer+0x72>
		}
		else
		{
		  timeout++;
 80045d4:	7bbb      	ldrb	r3, [r7, #14]
 80045d6:	3301      	adds	r3, #1
 80045d8:	73bb      	strb	r3, [r7, #14]
		}
	}while ((p_dev->temp_buffer[0x1]) != expected_value);
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	f893 3511 	ldrb.w	r3, [r3, #1297]	; 0x511
 80045e0:	787a      	ldrb	r2, [r7, #1]
 80045e2:	429a      	cmp	r2, r3
 80045e4:	d1d2      	bne.n	800458c <_vl53l5cx_poll_for_answer+0x18>
        
	return status;
 80045e6:	7bfb      	ldrb	r3, [r7, #15]
}
 80045e8:	4618      	mov	r0, r3
 80045ea:	3710      	adds	r7, #16
 80045ec:	46bd      	mov	sp, r7
 80045ee:	bd80      	pop	{r7, pc}

080045f0 <_vl53l5cx_program_output_config>:
 * program the output using the macro defined into the 'platform.h' file.
 */

static uint8_t _vl53l5cx_program_output_config(
		VL53L5CX_Configuration 		 *p_dev)
{
 80045f0:	b590      	push	{r4, r7, lr}
 80045f2:	b09f      	sub	sp, #124	; 0x7c
 80045f4:	af00      	add	r7, sp, #0
 80045f6:	6078      	str	r0, [r7, #4]
	uint8_t resolution, status = VL53L5CX_STATUS_OK;
 80045f8:	2300      	movs	r3, #0
 80045fa:	f887 3073 	strb.w	r3, [r7, #115]	; 0x73
	uint32_t i;
	union Block_header *bh_ptr;
	uint32_t header_config[2] = {0, 0};
 80045fe:	2300      	movs	r3, #0
 8004600:	663b      	str	r3, [r7, #96]	; 0x60
 8004602:	2300      	movs	r3, #0
 8004604:	667b      	str	r3, [r7, #100]	; 0x64

	status |= vl53l5cx_get_resolution(p_dev, &resolution);
 8004606:	f107 036b 	add.w	r3, r7, #107	; 0x6b
 800460a:	4619      	mov	r1, r3
 800460c:	6878      	ldr	r0, [r7, #4]
 800460e:	f7ff f9ed 	bl	80039ec <vl53l5cx_get_resolution>
 8004612:	4603      	mov	r3, r0
 8004614:	461a      	mov	r2, r3
 8004616:	f897 3073 	ldrb.w	r3, [r7, #115]	; 0x73
 800461a:	4313      	orrs	r3, r2
 800461c:	f887 3073 	strb.w	r3, [r7, #115]	; 0x73
	p_dev->data_read_size = 0;
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	2200      	movs	r2, #0
 8004624:	615a      	str	r2, [r3, #20]

	/* Enable mandatory output (meta and common data) */
	uint32_t output_bh_enable[] = {
 8004626:	4b63      	ldr	r3, [pc, #396]	; (80047b4 <_vl53l5cx_program_output_config+0x1c4>)
 8004628:	f107 0450 	add.w	r4, r7, #80	; 0x50
 800462c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800462e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
			0x00000000U,
			0x00000000U,
			0xC0000000U};

	/* Send addresses of possible output */
	uint32_t output[] ={
 8004632:	4a61      	ldr	r2, [pc, #388]	; (80047b8 <_vl53l5cx_program_output_config+0x1c8>)
 8004634:	f107 030c 	add.w	r3, r7, #12
 8004638:	4611      	mov	r1, r2
 800463a:	2244      	movs	r2, #68	; 0x44
 800463c:	4618      	mov	r0, r3
 800463e:	f005 feab 	bl	800a398 <memcpy>
			0xA2640081U,
			0xA26C0084U,
			0xA28C0082U};

	/* Update data size */
	for (i = 0; i < (uint32_t)(sizeof(output)/sizeof(uint32_t)); i++)
 8004642:	2300      	movs	r3, #0
 8004644:	677b      	str	r3, [r7, #116]	; 0x74
 8004646:	e073      	b.n	8004730 <_vl53l5cx_program_output_config+0x140>
	{
		if ((output[i] == (uint8_t)0) 
 8004648:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800464a:	009b      	lsls	r3, r3, #2
 800464c:	3378      	adds	r3, #120	; 0x78
 800464e:	443b      	add	r3, r7
 8004650:	f853 3c6c 	ldr.w	r3, [r3, #-108]
 8004654:	2b00      	cmp	r3, #0
 8004656:	d067      	beq.n	8004728 <_vl53l5cx_program_output_config+0x138>
                    || ((output_bh_enable[i/(uint32_t)32]
 8004658:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800465a:	095b      	lsrs	r3, r3, #5
 800465c:	009b      	lsls	r3, r3, #2
 800465e:	3378      	adds	r3, #120	; 0x78
 8004660:	443b      	add	r3, r7
 8004662:	f853 2c28 	ldr.w	r2, [r3, #-40]
                         &((uint32_t)1 << (i%(uint32_t)32))) == (uint32_t)0))
 8004666:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004668:	f003 031f 	and.w	r3, r3, #31
 800466c:	fa22 f303 	lsr.w	r3, r2, r3
 8004670:	f003 0301 	and.w	r3, r3, #1
                    || ((output_bh_enable[i/(uint32_t)32]
 8004674:	2b00      	cmp	r3, #0
 8004676:	d057      	beq.n	8004728 <_vl53l5cx_program_output_config+0x138>
		{
			continue;
		}

		bh_ptr = (union Block_header *)&(output[i]);
 8004678:	f107 020c 	add.w	r2, r7, #12
 800467c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800467e:	009b      	lsls	r3, r3, #2
 8004680:	4413      	add	r3, r2
 8004682:	66fb      	str	r3, [r7, #108]	; 0x6c
		if (((uint8_t)bh_ptr->type >= (uint8_t)0x1) 
 8004684:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004686:	781b      	ldrb	r3, [r3, #0]
 8004688:	f003 030f 	and.w	r3, r3, #15
 800468c:	b2db      	uxtb	r3, r3
 800468e:	2b00      	cmp	r3, #0
 8004690:	d03a      	beq.n	8004708 <_vl53l5cx_program_output_config+0x118>
                    && ((uint8_t)bh_ptr->type < (uint8_t)0x0d))
 8004692:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004694:	781b      	ldrb	r3, [r3, #0]
 8004696:	f3c3 0303 	ubfx	r3, r3, #0, #4
 800469a:	b2db      	uxtb	r3, r3
 800469c:	2b0c      	cmp	r3, #12
 800469e:	d833      	bhi.n	8004708 <_vl53l5cx_program_output_config+0x118>
		{
			if ((bh_ptr->idx >= (uint16_t)0x54d0) 
 80046a0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80046a2:	885b      	ldrh	r3, [r3, #2]
 80046a4:	f245 42cf 	movw	r2, #21711	; 0x54cf
 80046a8:	4293      	cmp	r3, r2
 80046aa:	d910      	bls.n	80046ce <_vl53l5cx_program_output_config+0xde>
                            && (bh_ptr->idx < (uint16_t)(0x54d0 + 960)))
 80046ac:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80046ae:	885b      	ldrh	r3, [r3, #2]
 80046b0:	f645 028f 	movw	r2, #22671	; 0x588f
 80046b4:	4293      	cmp	r3, r2
 80046b6:	d80a      	bhi.n	80046ce <_vl53l5cx_program_output_config+0xde>
			{
				bh_ptr->size = resolution;
 80046b8:	f897 306b 	ldrb.w	r3, [r7, #107]	; 0x6b
 80046bc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80046c0:	b299      	uxth	r1, r3
 80046c2:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80046c4:	8813      	ldrh	r3, [r2, #0]
 80046c6:	f361 130f 	bfi	r3, r1, #4, #12
 80046ca:	8013      	strh	r3, [r2, #0]
 80046cc:	e009      	b.n	80046e2 <_vl53l5cx_program_output_config+0xf2>
			}	
			else 
			{
				bh_ptr->size = (uint8_t)(resolution 
 80046ce:	f897 306b 	ldrb.w	r3, [r7, #107]	; 0x6b
 80046d2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80046d6:	b299      	uxth	r1, r3
 80046d8:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80046da:	8813      	ldrh	r3, [r2, #0]
 80046dc:	f361 130f 	bfi	r3, r1, #4, #12
 80046e0:	8013      	strh	r3, [r2, #0]
                                  * (uint8_t)VL53L5CX_NB_TARGET_PER_ZONE);
			}

                        
			p_dev->data_read_size += bh_ptr->type * bh_ptr->size;
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	695b      	ldr	r3, [r3, #20]
 80046e6:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80046e8:	7812      	ldrb	r2, [r2, #0]
 80046ea:	f3c2 0203 	ubfx	r2, r2, #0, #4
 80046ee:	b2d2      	uxtb	r2, r2
 80046f0:	4611      	mov	r1, r2
 80046f2:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80046f4:	8812      	ldrh	r2, [r2, #0]
 80046f6:	f3c2 120b 	ubfx	r2, r2, #4, #12
 80046fa:	b292      	uxth	r2, r2
 80046fc:	fb01 f202 	mul.w	r2, r1, r2
 8004700:	441a      	add	r2, r3
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	615a      	str	r2, [r3, #20]
 8004706:	e009      	b.n	800471c <_vl53l5cx_program_output_config+0x12c>
		}
		else
		{
			p_dev->data_read_size += bh_ptr->size;
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	695b      	ldr	r3, [r3, #20]
 800470c:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800470e:	8812      	ldrh	r2, [r2, #0]
 8004710:	f3c2 120b 	ubfx	r2, r2, #4, #12
 8004714:	b292      	uxth	r2, r2
 8004716:	441a      	add	r2, r3
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	615a      	str	r2, [r3, #20]
		}
		p_dev->data_read_size += (uint32_t)4;
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	695b      	ldr	r3, [r3, #20]
 8004720:	1d1a      	adds	r2, r3, #4
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	615a      	str	r2, [r3, #20]
 8004726:	e000      	b.n	800472a <_vl53l5cx_program_output_config+0x13a>
			continue;
 8004728:	bf00      	nop
	for (i = 0; i < (uint32_t)(sizeof(output)/sizeof(uint32_t)); i++)
 800472a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800472c:	3301      	adds	r3, #1
 800472e:	677b      	str	r3, [r7, #116]	; 0x74
 8004730:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004732:	2b10      	cmp	r3, #16
 8004734:	d988      	bls.n	8004648 <_vl53l5cx_program_output_config+0x58>
	}
	p_dev->data_read_size += (uint32_t)24;
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	695b      	ldr	r3, [r3, #20]
 800473a:	f103 0218 	add.w	r2, r3, #24
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	615a      	str	r2, [r3, #20]

	status |= vl53l5cx_dci_write_data(p_dev,
 8004742:	f107 010c 	add.w	r1, r7, #12
 8004746:	2344      	movs	r3, #68	; 0x44
 8004748:	f64d 1280 	movw	r2, #55680	; 0xd980
 800474c:	6878      	ldr	r0, [r7, #4]
 800474e:	f7ff fca1 	bl	8004094 <vl53l5cx_dci_write_data>
 8004752:	4603      	mov	r3, r0
 8004754:	461a      	mov	r2, r3
 8004756:	f897 3073 	ldrb.w	r3, [r7, #115]	; 0x73
 800475a:	4313      	orrs	r3, r2
 800475c:	f887 3073 	strb.w	r3, [r7, #115]	; 0x73
			(uint8_t*)&(output), 
                        VL53L5CX_DCI_OUTPUT_LIST, (uint16_t)sizeof(output));
        
	header_config[0] = p_dev->data_read_size;
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	695b      	ldr	r3, [r3, #20]
 8004764:	663b      	str	r3, [r7, #96]	; 0x60
	header_config[1] = i + (uint32_t)1;
 8004766:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004768:	3301      	adds	r3, #1
 800476a:	667b      	str	r3, [r7, #100]	; 0x64

	status |= vl53l5cx_dci_write_data(p_dev,
 800476c:	f107 0160 	add.w	r1, r7, #96	; 0x60
 8004770:	2308      	movs	r3, #8
 8004772:	f64d 1268 	movw	r2, #55656	; 0xd968
 8004776:	6878      	ldr	r0, [r7, #4]
 8004778:	f7ff fc8c 	bl	8004094 <vl53l5cx_dci_write_data>
 800477c:	4603      	mov	r3, r0
 800477e:	461a      	mov	r2, r3
 8004780:	f897 3073 	ldrb.w	r3, [r7, #115]	; 0x73
 8004784:	4313      	orrs	r3, r2
 8004786:	f887 3073 	strb.w	r3, [r7, #115]	; 0x73
			(uint8_t*)&(header_config), VL53L5CX_DCI_OUTPUT_CONFIG,
			(uint16_t)sizeof(header_config));

	status |= vl53l5cx_dci_write_data(p_dev, (uint8_t*)&(output_bh_enable),
 800478a:	f107 0150 	add.w	r1, r7, #80	; 0x50
 800478e:	2310      	movs	r3, #16
 8004790:	f64d 1270 	movw	r2, #55664	; 0xd970
 8004794:	6878      	ldr	r0, [r7, #4]
 8004796:	f7ff fc7d 	bl	8004094 <vl53l5cx_dci_write_data>
 800479a:	4603      	mov	r3, r0
 800479c:	461a      	mov	r2, r3
 800479e:	f897 3073 	ldrb.w	r3, [r7, #115]	; 0x73
 80047a2:	4313      	orrs	r3, r2
 80047a4:	f887 3073 	strb.w	r3, [r7, #115]	; 0x73
			VL53L5CX_DCI_OUTPUT_ENABLES, 
                        (uint16_t)sizeof(output_bh_enable));

	return status;
 80047a8:	f897 3073 	ldrb.w	r3, [r7, #115]	; 0x73
}
 80047ac:	4618      	mov	r0, r3
 80047ae:	377c      	adds	r7, #124	; 0x7c
 80047b0:	46bd      	mov	sp, r7
 80047b2:	bd90      	pop	{r4, r7, pc}
 80047b4:	0800ae88 	.word	0x0800ae88
 80047b8:	0800ae98 	.word	0x0800ae98

080047bc <vl53l5cx_calibrate_xtalk>:
uint8_t vl53l5cx_calibrate_xtalk(
		VL53L5CX_Configuration		*p_dev,
		uint16_t			reflectance_percent,
		uint8_t				nb_samples,
		uint16_t			distance_mm)
{
 80047bc:	b580      	push	{r7, lr}
 80047be:	b094      	sub	sp, #80	; 0x50
 80047c0:	af04      	add	r7, sp, #16
 80047c2:	60f8      	str	r0, [r7, #12]
 80047c4:	4608      	mov	r0, r1
 80047c6:	4611      	mov	r1, r2
 80047c8:	461a      	mov	r2, r3
 80047ca:	4603      	mov	r3, r0
 80047cc:	817b      	strh	r3, [r7, #10]
 80047ce:	460b      	mov	r3, r1
 80047d0:	727b      	strb	r3, [r7, #9]
 80047d2:	4613      	mov	r3, r2
 80047d4:	80fb      	strh	r3, [r7, #6]
	uint16_t timeout = 0;
 80047d6:	2300      	movs	r3, #0
 80047d8:	87fb      	strh	r3, [r7, #62]	; 0x3e
	uint8_t cmd[] = {0x00, 0x03, 0x00, 0x00};
 80047da:	f44f 7340 	mov.w	r3, #768	; 0x300
 80047de:	637b      	str	r3, [r7, #52]	; 0x34
	uint8_t footer[] = {0x00, 0x00, 0x00, 0x0F, 0x00, 0x01, 0x03, 0x04};
 80047e0:	4ab5      	ldr	r2, [pc, #724]	; (8004ab8 <vl53l5cx_calibrate_xtalk+0x2fc>)
 80047e2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80047e6:	e892 0003 	ldmia.w	r2, {r0, r1}
 80047ea:	e883 0003 	stmia.w	r3, {r0, r1}
	uint8_t continue_loop = 1, status = VL53L5CX_STATUS_OK;
 80047ee:	2301      	movs	r3, #1
 80047f0:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
 80047f4:	2300      	movs	r3, #0
 80047f6:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c

	uint8_t resolution, frequency, target_order, sharp_prct, ranging_mode;
	uint32_t integration_time_ms, xtalk_margin;
        
	uint16_t reflectance = reflectance_percent;
 80047fa:	897b      	ldrh	r3, [r7, #10]
 80047fc:	837b      	strh	r3, [r7, #26]
	uint8_t	samples = nb_samples;
 80047fe:	7a7b      	ldrb	r3, [r7, #9]
 8004800:	767b      	strb	r3, [r7, #25]
	uint16_t distance = distance_mm;
 8004802:	88fb      	ldrh	r3, [r7, #6]
 8004804:	82fb      	strh	r3, [r7, #22]
	uint8_t *default_xtalk_ptr;

	/* Get initial configuration */
	status |= vl53l5cx_get_resolution(p_dev, &resolution);
 8004806:	f107 032b 	add.w	r3, r7, #43	; 0x2b
 800480a:	4619      	mov	r1, r3
 800480c:	68f8      	ldr	r0, [r7, #12]
 800480e:	f7ff f8ed 	bl	80039ec <vl53l5cx_get_resolution>
 8004812:	4603      	mov	r3, r0
 8004814:	461a      	mov	r2, r3
 8004816:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 800481a:	4313      	orrs	r3, r2
 800481c:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
	status |= vl53l5cx_get_ranging_frequency_hz(p_dev, &frequency);
 8004820:	f107 032a 	add.w	r3, r7, #42	; 0x2a
 8004824:	4619      	mov	r1, r3
 8004826:	68f8      	ldr	r0, [r7, #12]
 8004828:	f7ff f9d9 	bl	8003bde <vl53l5cx_get_ranging_frequency_hz>
 800482c:	4603      	mov	r3, r0
 800482e:	461a      	mov	r2, r3
 8004830:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 8004834:	4313      	orrs	r3, r2
 8004836:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
	status |= vl53l5cx_get_integration_time_ms(p_dev, &integration_time_ms);
 800483a:	f107 0320 	add.w	r3, r7, #32
 800483e:	4619      	mov	r1, r3
 8004840:	68f8      	ldr	r0, [r7, #12]
 8004842:	f7ff fa0d 	bl	8003c60 <vl53l5cx_get_integration_time_ms>
 8004846:	4603      	mov	r3, r0
 8004848:	461a      	mov	r2, r3
 800484a:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 800484e:	4313      	orrs	r3, r2
 8004850:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
	status |= vl53l5cx_get_sharpener_percent(p_dev, &sharp_prct);
 8004854:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8004858:	4619      	mov	r1, r3
 800485a:	68f8      	ldr	r0, [r7, #12]
 800485c:	f7ff fa62 	bl	8003d24 <vl53l5cx_get_sharpener_percent>
 8004860:	4603      	mov	r3, r0
 8004862:	461a      	mov	r2, r3
 8004864:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 8004868:	4313      	orrs	r3, r2
 800486a:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
	status |= vl53l5cx_get_target_order(p_dev, &target_order);
 800486e:	f107 0329 	add.w	r3, r7, #41	; 0x29
 8004872:	4619      	mov	r1, r3
 8004874:	68f8      	ldr	r0, [r7, #12]
 8004876:	f7ff fabb 	bl	8003df0 <vl53l5cx_get_target_order>
 800487a:	4603      	mov	r3, r0
 800487c:	461a      	mov	r2, r3
 800487e:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 8004882:	4313      	orrs	r3, r2
 8004884:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
	status |= vl53l5cx_get_xtalk_margin(p_dev, &xtalk_margin);
 8004888:	f107 031c 	add.w	r3, r7, #28
 800488c:	4619      	mov	r1, r3
 800488e:	68f8      	ldr	r0, [r7, #12]
 8004890:	f000 f9f4 	bl	8004c7c <vl53l5cx_get_xtalk_margin>
 8004894:	4603      	mov	r3, r0
 8004896:	461a      	mov	r2, r3
 8004898:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 800489c:	4313      	orrs	r3, r2
 800489e:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
	status |= vl53l5cx_get_ranging_mode(p_dev, &ranging_mode);
 80048a2:	f107 0327 	add.w	r3, r7, #39	; 0x27
 80048a6:	4619      	mov	r1, r3
 80048a8:	68f8      	ldr	r0, [r7, #12]
 80048aa:	f7ff faec 	bl	8003e86 <vl53l5cx_get_ranging_mode>
 80048ae:	4603      	mov	r3, r0
 80048b0:	461a      	mov	r2, r3
 80048b2:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 80048b6:	4313      	orrs	r3, r2
 80048b8:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c

	/* Check input arguments validity */
	if(((reflectance < (uint16_t)1) || (reflectance > (uint16_t)99))
 80048bc:	8b7b      	ldrh	r3, [r7, #26]
 80048be:	2b00      	cmp	r3, #0
 80048c0:	d011      	beq.n	80048e6 <vl53l5cx_calibrate_xtalk+0x12a>
 80048c2:	8b7b      	ldrh	r3, [r7, #26]
 80048c4:	2b63      	cmp	r3, #99	; 0x63
 80048c6:	d80e      	bhi.n	80048e6 <vl53l5cx_calibrate_xtalk+0x12a>
		|| ((distance < (uint16_t)600) || (distance > (uint16_t)3000))
 80048c8:	8afb      	ldrh	r3, [r7, #22]
 80048ca:	f5b3 7f16 	cmp.w	r3, #600	; 0x258
 80048ce:	d30a      	bcc.n	80048e6 <vl53l5cx_calibrate_xtalk+0x12a>
 80048d0:	8afb      	ldrh	r3, [r7, #22]
 80048d2:	f640 32b8 	movw	r2, #3000	; 0xbb8
 80048d6:	4293      	cmp	r3, r2
 80048d8:	d805      	bhi.n	80048e6 <vl53l5cx_calibrate_xtalk+0x12a>
		|| ((samples < (uint8_t)1) || (samples > (uint8_t)16)))
 80048da:	7e7b      	ldrb	r3, [r7, #25]
 80048dc:	2b00      	cmp	r3, #0
 80048de:	d002      	beq.n	80048e6 <vl53l5cx_calibrate_xtalk+0x12a>
 80048e0:	7e7b      	ldrb	r3, [r7, #25]
 80048e2:	2b10      	cmp	r3, #16
 80048e4:	d906      	bls.n	80048f4 <vl53l5cx_calibrate_xtalk+0x138>
	{
		status |= VL53L5CX_STATUS_INVALID_PARAM;
 80048e6:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 80048ea:	f043 037f 	orr.w	r3, r3, #127	; 0x7f
 80048ee:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
 80048f2:	e0f8      	b.n	8004ae6 <vl53l5cx_calibrate_xtalk+0x32a>
	}
	else
	{
		status |= vl53l5cx_set_resolution(p_dev, 
 80048f4:	2140      	movs	r1, #64	; 0x40
 80048f6:	68f8      	ldr	r0, [r7, #12]
 80048f8:	f7ff f89d 	bl	8003a36 <vl53l5cx_set_resolution>
 80048fc:	4603      	mov	r3, r0
 80048fe:	461a      	mov	r2, r3
 8004900:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 8004904:	4313      	orrs	r3, r2
 8004906:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
				VL53L5CX_RESOLUTION_8X8);

		/* Send Xtalk calibration buffer */
                (void)memcpy(p_dev->temp_buffer, VL53L5CX_CALIBRATE_XTALK, 
 800490a:	68fb      	ldr	r3, [r7, #12]
 800490c:	f503 63a2 	add.w	r3, r3, #1296	; 0x510
 8004910:	4a6a      	ldr	r2, [pc, #424]	; (8004abc <vl53l5cx_calibrate_xtalk+0x300>)
 8004912:	4618      	mov	r0, r3
 8004914:	4611      	mov	r1, r2
 8004916:	f44f 7376 	mov.w	r3, #984	; 0x3d8
 800491a:	461a      	mov	r2, r3
 800491c:	f005 fd3c 	bl	800a398 <memcpy>
                       sizeof(VL53L5CX_CALIBRATE_XTALK));
		status |= WrMulti(&(p_dev->platform), 0x2c28,
 8004920:	68f8      	ldr	r0, [r7, #12]
				p_dev->temp_buffer, 
 8004922:	68fb      	ldr	r3, [r7, #12]
 8004924:	f503 62a2 	add.w	r2, r3, #1296	; 0x510
		status |= WrMulti(&(p_dev->platform), 0x2c28,
 8004928:	f44f 7376 	mov.w	r3, #984	; 0x3d8
 800492c:	f642 4128 	movw	r1, #11304	; 0x2c28
 8004930:	f000 fa25 	bl	8004d7e <WrMulti>
 8004934:	4603      	mov	r3, r0
 8004936:	461a      	mov	r2, r3
 8004938:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 800493c:	4313      	orrs	r3, r2
 800493e:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
                       (uint16_t)sizeof(VL53L5CX_CALIBRATE_XTALK));
		status |= _vl53l5cx_poll_for_answer(p_dev, 
 8004942:	2203      	movs	r2, #3
 8004944:	f44f 5130 	mov.w	r1, #11264	; 0x2c00
 8004948:	68f8      	ldr	r0, [r7, #12]
 800494a:	f7ff fe13 	bl	8004574 <_vl53l5cx_poll_for_answer>
 800494e:	4603      	mov	r3, r0
 8004950:	461a      	mov	r2, r3
 8004952:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 8004956:	4313      	orrs	r3, r2
 8004958:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
				VL53L5CX_UI_CMD_STATUS, 0x3);

		/* Format input argument */
		reflectance = reflectance * (uint16_t)16;
 800495c:	8b7b      	ldrh	r3, [r7, #26]
 800495e:	011b      	lsls	r3, r3, #4
 8004960:	b29b      	uxth	r3, r3
 8004962:	837b      	strh	r3, [r7, #26]
		distance = distance * (uint16_t)4;
 8004964:	8afb      	ldrh	r3, [r7, #22]
 8004966:	009b      	lsls	r3, r3, #2
 8004968:	b29b      	uxth	r3, r3
 800496a:	82fb      	strh	r3, [r7, #22]

		/* Update required fields */
		status |= vl53l5cx_dci_replace_data(p_dev, p_dev->temp_buffer,
 800496c:	68fb      	ldr	r3, [r7, #12]
 800496e:	f503 61a2 	add.w	r1, r3, #1296	; 0x510
 8004972:	2300      	movs	r3, #0
 8004974:	9302      	str	r3, [sp, #8]
 8004976:	2302      	movs	r3, #2
 8004978:	9301      	str	r3, [sp, #4]
 800497a:	f107 0316 	add.w	r3, r7, #22
 800497e:	9300      	str	r3, [sp, #0]
 8004980:	2308      	movs	r3, #8
 8004982:	f245 4270 	movw	r2, #21616	; 0x5470
 8004986:	68f8      	ldr	r0, [r7, #12]
 8004988:	f7ff fc22 	bl	80041d0 <vl53l5cx_dci_replace_data>
 800498c:	4603      	mov	r3, r0
 800498e:	461a      	mov	r2, r3
 8004990:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 8004994:	4313      	orrs	r3, r2
 8004996:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
				VL53L5CX_DCI_CAL_CFG, 8, 
                                (uint8_t*)&distance, 2, 0x00);

		status |= vl53l5cx_dci_replace_data(p_dev, p_dev->temp_buffer,
 800499a:	68fb      	ldr	r3, [r7, #12]
 800499c:	f503 61a2 	add.w	r1, r3, #1296	; 0x510
 80049a0:	2302      	movs	r3, #2
 80049a2:	9302      	str	r3, [sp, #8]
 80049a4:	2302      	movs	r3, #2
 80049a6:	9301      	str	r3, [sp, #4]
 80049a8:	f107 031a 	add.w	r3, r7, #26
 80049ac:	9300      	str	r3, [sp, #0]
 80049ae:	2308      	movs	r3, #8
 80049b0:	f245 4270 	movw	r2, #21616	; 0x5470
 80049b4:	68f8      	ldr	r0, [r7, #12]
 80049b6:	f7ff fc0b 	bl	80041d0 <vl53l5cx_dci_replace_data>
 80049ba:	4603      	mov	r3, r0
 80049bc:	461a      	mov	r2, r3
 80049be:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 80049c2:	4313      	orrs	r3, r2
 80049c4:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
				VL53L5CX_DCI_CAL_CFG, 8,
                                (uint8_t*)&reflectance, 2, 0x02);

		status |= vl53l5cx_dci_replace_data(p_dev, p_dev->temp_buffer,
 80049c8:	68fb      	ldr	r3, [r7, #12]
 80049ca:	f503 61a2 	add.w	r1, r3, #1296	; 0x510
 80049ce:	2304      	movs	r3, #4
 80049d0:	9302      	str	r3, [sp, #8]
 80049d2:	2301      	movs	r3, #1
 80049d4:	9301      	str	r3, [sp, #4]
 80049d6:	f107 0319 	add.w	r3, r7, #25
 80049da:	9300      	str	r3, [sp, #0]
 80049dc:	2308      	movs	r3, #8
 80049de:	f245 4270 	movw	r2, #21616	; 0x5470
 80049e2:	68f8      	ldr	r0, [r7, #12]
 80049e4:	f7ff fbf4 	bl	80041d0 <vl53l5cx_dci_replace_data>
 80049e8:	4603      	mov	r3, r0
 80049ea:	461a      	mov	r2, r3
 80049ec:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 80049f0:	4313      	orrs	r3, r2
 80049f2:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
				VL53L5CX_DCI_CAL_CFG, 8, 
                                (uint8_t*)&samples, 1, 0x04);

		/* Program output for Xtalk calibration */
		status |= _vl53l5cx_program_output_config(p_dev);
 80049f6:	68f8      	ldr	r0, [r7, #12]
 80049f8:	f7ff fdfa 	bl	80045f0 <_vl53l5cx_program_output_config>
 80049fc:	4603      	mov	r3, r0
 80049fe:	461a      	mov	r2, r3
 8004a00:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 8004a04:	4313      	orrs	r3, r2
 8004a06:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c

		/* Start ranging session */
		status |= WrMulti(&(p_dev->platform),
 8004a0a:	68f8      	ldr	r0, [r7, #12]
 8004a0c:	f107 0234 	add.w	r2, r7, #52	; 0x34
 8004a10:	2304      	movs	r3, #4
 8004a12:	f642 71fc 	movw	r1, #12284	; 0x2ffc
 8004a16:	f000 f9b2 	bl	8004d7e <WrMulti>
 8004a1a:	4603      	mov	r3, r0
 8004a1c:	461a      	mov	r2, r3
 8004a1e:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 8004a22:	4313      	orrs	r3, r2
 8004a24:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
				VL53L5CX_UI_CMD_END - (uint16_t)(4 - 1),
				(uint8_t*)cmd, sizeof(cmd));
		status |= _vl53l5cx_poll_for_answer(p_dev, 
 8004a28:	2203      	movs	r2, #3
 8004a2a:	f44f 5130 	mov.w	r1, #11264	; 0x2c00
 8004a2e:	68f8      	ldr	r0, [r7, #12]
 8004a30:	f7ff fda0 	bl	8004574 <_vl53l5cx_poll_for_answer>
 8004a34:	4603      	mov	r3, r0
 8004a36:	461a      	mov	r2, r3
 8004a38:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 8004a3c:	4313      	orrs	r3, r2
 8004a3e:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
				VL53L5CX_UI_CMD_STATUS, 0x3);

		/* Wait for end of calibration */
		do {
			status |= RdMulti(&(p_dev->platform), 
 8004a42:	68f8      	ldr	r0, [r7, #12]
                                          0x0, p_dev->temp_buffer, 4);
 8004a44:	68fb      	ldr	r3, [r7, #12]
 8004a46:	f503 62a2 	add.w	r2, r3, #1296	; 0x510
			status |= RdMulti(&(p_dev->platform), 
 8004a4a:	2304      	movs	r3, #4
 8004a4c:	2100      	movs	r1, #0
 8004a4e:	f000 f9ad 	bl	8004dac <RdMulti>
 8004a52:	4603      	mov	r3, r0
 8004a54:	461a      	mov	r2, r3
 8004a56:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 8004a5a:	4313      	orrs	r3, r2
 8004a5c:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c

			if(p_dev->temp_buffer[0] != VL53L5CX_STATUS_ERROR)
 8004a60:	68fb      	ldr	r3, [r7, #12]
 8004a62:	f893 3510 	ldrb.w	r3, [r3, #1296]	; 0x510
 8004a66:	2bff      	cmp	r3, #255	; 0xff
 8004a68:	d01b      	beq.n	8004aa2 <vl53l5cx_calibrate_xtalk+0x2e6>
			{
				/* Coverglass too good for Xtalk calibration */
				if((p_dev->temp_buffer[2] >= (uint8_t)0x7f) &&
 8004a6a:	68fb      	ldr	r3, [r7, #12]
 8004a6c:	f893 3512 	ldrb.w	r3, [r3, #1298]	; 0x512
 8004a70:	2b7e      	cmp	r3, #126	; 0x7e
 8004a72:	d912      	bls.n	8004a9a <vl53l5cx_calibrate_xtalk+0x2de>
				(((uint16_t)(p_dev->temp_buffer[3] & 
 8004a74:	68fb      	ldr	r3, [r7, #12]
 8004a76:	f893 3513 	ldrb.w	r3, [r3, #1299]	; 0x513
                                 (uint16_t)0x80) >> 7) == (uint16_t)1))
 8004a7a:	09db      	lsrs	r3, r3, #7
 8004a7c:	b2db      	uxtb	r3, r3
				if((p_dev->temp_buffer[2] >= (uint8_t)0x7f) &&
 8004a7e:	2b01      	cmp	r3, #1
 8004a80:	d10b      	bne.n	8004a9a <vl53l5cx_calibrate_xtalk+0x2de>
				{
					default_xtalk_ptr = p_dev->default_xtalk;
 8004a82:	68fb      	ldr	r3, [r7, #12]
 8004a84:	69db      	ldr	r3, [r3, #28]
 8004a86:	63bb      	str	r3, [r7, #56]	; 0x38
					(void)memcpy(p_dev->xtalk_data, 
 8004a88:	68fb      	ldr	r3, [r7, #12]
 8004a8a:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8004a8e:	f44f 7242 	mov.w	r2, #776	; 0x308
 8004a92:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8004a94:	4618      	mov	r0, r3
 8004a96:	f005 fc7f 	bl	800a398 <memcpy>
						default_xtalk_ptr,
						sizeof(p_dev->xtalk_data));
				}
				continue_loop = (uint8_t)0;
 8004a9a:	2300      	movs	r3, #0
 8004a9c:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
 8004aa0:	e01d      	b.n	8004ade <vl53l5cx_calibrate_xtalk+0x322>
			}
			else if(timeout >= (uint16_t)400)
 8004aa2:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8004aa4:	f5b3 7fc8 	cmp.w	r3, #400	; 0x190
 8004aa8:	d30a      	bcc.n	8004ac0 <vl53l5cx_calibrate_xtalk+0x304>
			{
				status |= VL53L5CX_STATUS_ERROR;
 8004aaa:	23ff      	movs	r3, #255	; 0xff
 8004aac:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
				continue_loop = (uint8_t)0;
 8004ab0:	2300      	movs	r3, #0
 8004ab2:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
 8004ab6:	e012      	b.n	8004ade <vl53l5cx_calibrate_xtalk+0x322>
 8004ab8:	0800aedc 	.word	0x0800aedc
 8004abc:	08020958 	.word	0x08020958
			}
			else
			{
				timeout++;
 8004ac0:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8004ac2:	3301      	adds	r3, #1
 8004ac4:	87fb      	strh	r3, [r7, #62]	; 0x3e
				status |= WaitMs(&(p_dev->platform), 50);
 8004ac6:	68fb      	ldr	r3, [r7, #12]
 8004ac8:	2132      	movs	r1, #50	; 0x32
 8004aca:	4618      	mov	r0, r3
 8004acc:	f000 f9bb 	bl	8004e46 <WaitMs>
 8004ad0:	4603      	mov	r3, r0
 8004ad2:	461a      	mov	r2, r3
 8004ad4:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 8004ad8:	4313      	orrs	r3, r2
 8004ada:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
			}

		}while (continue_loop == (uint8_t)1);
 8004ade:	f897 303d 	ldrb.w	r3, [r7, #61]	; 0x3d
 8004ae2:	2b01      	cmp	r3, #1
 8004ae4:	d0ad      	beq.n	8004a42 <vl53l5cx_calibrate_xtalk+0x286>
	}

	/* Save Xtalk data into the Xtalk buffer */
        (void)memcpy(p_dev->temp_buffer, VL53L5CX_GET_XTALK_CMD, 
 8004ae6:	68fb      	ldr	r3, [r7, #12]
 8004ae8:	f503 63a2 	add.w	r3, r3, #1296	; 0x510
 8004aec:	4a62      	ldr	r2, [pc, #392]	; (8004c78 <vl53l5cx_calibrate_xtalk+0x4bc>)
 8004aee:	4618      	mov	r0, r3
 8004af0:	4611      	mov	r1, r2
 8004af2:	2348      	movs	r3, #72	; 0x48
 8004af4:	461a      	mov	r2, r3
 8004af6:	f005 fc4f 	bl	800a398 <memcpy>
               sizeof(VL53L5CX_GET_XTALK_CMD));
	status |= WrMulti(&(p_dev->platform), 0x2fb8,
 8004afa:	68f8      	ldr	r0, [r7, #12]
			p_dev->temp_buffer, 
 8004afc:	68fb      	ldr	r3, [r7, #12]
 8004afe:	f503 62a2 	add.w	r2, r3, #1296	; 0x510
	status |= WrMulti(&(p_dev->platform), 0x2fb8,
 8004b02:	2348      	movs	r3, #72	; 0x48
 8004b04:	f642 71b8 	movw	r1, #12216	; 0x2fb8
 8004b08:	f000 f939 	bl	8004d7e <WrMulti>
 8004b0c:	4603      	mov	r3, r0
 8004b0e:	461a      	mov	r2, r3
 8004b10:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 8004b14:	4313      	orrs	r3, r2
 8004b16:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
                        (uint16_t)sizeof(VL53L5CX_GET_XTALK_CMD));
	status |= _vl53l5cx_poll_for_answer(p_dev,VL53L5CX_UI_CMD_STATUS, 0x03);
 8004b1a:	2203      	movs	r2, #3
 8004b1c:	f44f 5130 	mov.w	r1, #11264	; 0x2c00
 8004b20:	68f8      	ldr	r0, [r7, #12]
 8004b22:	f7ff fd27 	bl	8004574 <_vl53l5cx_poll_for_answer>
 8004b26:	4603      	mov	r3, r0
 8004b28:	461a      	mov	r2, r3
 8004b2a:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 8004b2e:	4313      	orrs	r3, r2
 8004b30:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
	status |= RdMulti(&(p_dev->platform), VL53L5CX_UI_CMD_START,
 8004b34:	68f8      	ldr	r0, [r7, #12]
			p_dev->temp_buffer, 
 8004b36:	68fb      	ldr	r3, [r7, #12]
 8004b38:	f503 62a2 	add.w	r2, r3, #1296	; 0x510
	status |= RdMulti(&(p_dev->platform), VL53L5CX_UI_CMD_START,
 8004b3c:	f44f 7343 	mov.w	r3, #780	; 0x30c
 8004b40:	f642 4104 	movw	r1, #11268	; 0x2c04
 8004b44:	f000 f932 	bl	8004dac <RdMulti>
 8004b48:	4603      	mov	r3, r0
 8004b4a:	461a      	mov	r2, r3
 8004b4c:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 8004b50:	4313      	orrs	r3, r2
 8004b52:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
                        VL53L5CX_XTALK_BUFFER_SIZE + (uint16_t)4);

	(void)memcpy(&(p_dev->xtalk_data[0]), &(p_dev->temp_buffer[8]),
 8004b56:	68fb      	ldr	r3, [r7, #12]
 8004b58:	f503 7002 	add.w	r0, r3, #520	; 0x208
 8004b5c:	68fb      	ldr	r3, [r7, #12]
 8004b5e:	f503 63a3 	add.w	r3, r3, #1304	; 0x518
 8004b62:	f44f 7240 	mov.w	r2, #768	; 0x300
 8004b66:	4619      	mov	r1, r3
 8004b68:	f005 fc16 	bl	800a398 <memcpy>
			VL53L5CX_XTALK_BUFFER_SIZE - (uint16_t)8);
	(void)memcpy(&(p_dev->xtalk_data[VL53L5CX_XTALK_BUFFER_SIZE 
 8004b6c:	68fb      	ldr	r3, [r7, #12]
 8004b6e:	f503 63a1 	add.w	r3, r3, #1288	; 0x508
 8004b72:	461a      	mov	r2, r3
 8004b74:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8004b78:	cb03      	ldmia	r3!, {r0, r1}
 8004b7a:	6010      	str	r0, [r2, #0]
 8004b7c:	6051      	str	r1, [r2, #4]
                       - (uint16_t)8]), footer, sizeof(footer));

	/* Reset default buffer */
	status |= WrMulti(&(p_dev->platform), 0x2c34,
 8004b7e:	68f8      	ldr	r0, [r7, #12]
 8004b80:	68fb      	ldr	r3, [r7, #12]
 8004b82:	699a      	ldr	r2, [r3, #24]
 8004b84:	f44f 7373 	mov.w	r3, #972	; 0x3cc
 8004b88:	f642 4134 	movw	r1, #11316	; 0x2c34
 8004b8c:	f000 f8f7 	bl	8004d7e <WrMulti>
 8004b90:	4603      	mov	r3, r0
 8004b92:	461a      	mov	r2, r3
 8004b94:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 8004b98:	4313      	orrs	r3, r2
 8004b9a:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
			p_dev->default_configuration,
			VL53L5CX_CONFIGURATION_SIZE);
	status |= _vl53l5cx_poll_for_answer(p_dev,VL53L5CX_UI_CMD_STATUS, 0x03);
 8004b9e:	2203      	movs	r2, #3
 8004ba0:	f44f 5130 	mov.w	r1, #11264	; 0x2c00
 8004ba4:	68f8      	ldr	r0, [r7, #12]
 8004ba6:	f7ff fce5 	bl	8004574 <_vl53l5cx_poll_for_answer>
 8004baa:	4603      	mov	r3, r0
 8004bac:	461a      	mov	r2, r3
 8004bae:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 8004bb2:	4313      	orrs	r3, r2
 8004bb4:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c

	/* Reset initial configuration */
	status |= vl53l5cx_set_resolution(p_dev, resolution);
 8004bb8:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8004bbc:	4619      	mov	r1, r3
 8004bbe:	68f8      	ldr	r0, [r7, #12]
 8004bc0:	f7fe ff39 	bl	8003a36 <vl53l5cx_set_resolution>
 8004bc4:	4603      	mov	r3, r0
 8004bc6:	461a      	mov	r2, r3
 8004bc8:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 8004bcc:	4313      	orrs	r3, r2
 8004bce:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
	status |= vl53l5cx_set_ranging_frequency_hz(p_dev, frequency);
 8004bd2:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 8004bd6:	4619      	mov	r1, r3
 8004bd8:	68f8      	ldr	r0, [r7, #12]
 8004bda:	f7ff f81f 	bl	8003c1c <vl53l5cx_set_ranging_frequency_hz>
 8004bde:	4603      	mov	r3, r0
 8004be0:	461a      	mov	r2, r3
 8004be2:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 8004be6:	4313      	orrs	r3, r2
 8004be8:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
	status |= vl53l5cx_set_integration_time_ms(p_dev, integration_time_ms);
 8004bec:	6a3b      	ldr	r3, [r7, #32]
 8004bee:	4619      	mov	r1, r3
 8004bf0:	68f8      	ldr	r0, [r7, #12]
 8004bf2:	f7ff f861 	bl	8003cb8 <vl53l5cx_set_integration_time_ms>
 8004bf6:	4603      	mov	r3, r0
 8004bf8:	461a      	mov	r2, r3
 8004bfa:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 8004bfe:	4313      	orrs	r3, r2
 8004c00:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
	status |= vl53l5cx_set_sharpener_percent(p_dev, sharp_prct);
 8004c04:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8004c08:	4619      	mov	r1, r3
 8004c0a:	68f8      	ldr	r0, [r7, #12]
 8004c0c:	f7ff f8b8 	bl	8003d80 <vl53l5cx_set_sharpener_percent>
 8004c10:	4603      	mov	r3, r0
 8004c12:	461a      	mov	r2, r3
 8004c14:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 8004c18:	4313      	orrs	r3, r2
 8004c1a:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
	status |= vl53l5cx_set_target_order(p_dev, target_order);
 8004c1e:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 8004c22:	4619      	mov	r1, r3
 8004c24:	68f8      	ldr	r0, [r7, #12]
 8004c26:	f7ff f902 	bl	8003e2e <vl53l5cx_set_target_order>
 8004c2a:	4603      	mov	r3, r0
 8004c2c:	461a      	mov	r2, r3
 8004c2e:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 8004c32:	4313      	orrs	r3, r2
 8004c34:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
	status |= vl53l5cx_set_xtalk_margin(p_dev, xtalk_margin);
 8004c38:	69fb      	ldr	r3, [r7, #28]
 8004c3a:	4619      	mov	r1, r3
 8004c3c:	68f8      	ldr	r0, [r7, #12]
 8004c3e:	f000 f843 	bl	8004cc8 <vl53l5cx_set_xtalk_margin>
 8004c42:	4603      	mov	r3, r0
 8004c44:	461a      	mov	r2, r3
 8004c46:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 8004c4a:	4313      	orrs	r3, r2
 8004c4c:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
	status |= vl53l5cx_set_ranging_mode(p_dev, ranging_mode);
 8004c50:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8004c54:	4619      	mov	r1, r3
 8004c56:	68f8      	ldr	r0, [r7, #12]
 8004c58:	f7ff f93b 	bl	8003ed2 <vl53l5cx_set_ranging_mode>
 8004c5c:	4603      	mov	r3, r0
 8004c5e:	461a      	mov	r2, r3
 8004c60:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 8004c64:	4313      	orrs	r3, r2
 8004c66:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c

	return status;
 8004c6a:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
}
 8004c6e:	4618      	mov	r0, r3
 8004c70:	3740      	adds	r7, #64	; 0x40
 8004c72:	46bd      	mov	sp, r7
 8004c74:	bd80      	pop	{r7, pc}
 8004c76:	bf00      	nop
 8004c78:	08020910 	.word	0x08020910

08004c7c <vl53l5cx_get_xtalk_margin>:
}

uint8_t vl53l5cx_get_xtalk_margin(
		VL53L5CX_Configuration		*p_dev,
		uint32_t			*p_xtalk_margin)
{
 8004c7c:	b580      	push	{r7, lr}
 8004c7e:	b084      	sub	sp, #16
 8004c80:	af00      	add	r7, sp, #0
 8004c82:	6078      	str	r0, [r7, #4]
 8004c84:	6039      	str	r1, [r7, #0]
	uint8_t status = VL53L5CX_STATUS_OK;
 8004c86:	2300      	movs	r3, #0
 8004c88:	73fb      	strb	r3, [r7, #15]

	status |= vl53l5cx_dci_read_data(p_dev, (uint8_t*)p_dev->temp_buffer,
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	f503 61a2 	add.w	r1, r3, #1296	; 0x510
 8004c90:	2310      	movs	r3, #16
 8004c92:	f64a 5294 	movw	r2, #44436	; 0xad94
 8004c96:	6878      	ldr	r0, [r7, #4]
 8004c98:	f7ff f972 	bl	8003f80 <vl53l5cx_dci_read_data>
 8004c9c:	4603      	mov	r3, r0
 8004c9e:	461a      	mov	r2, r3
 8004ca0:	7bfb      	ldrb	r3, [r7, #15]
 8004ca2:	4313      	orrs	r3, r2
 8004ca4:	73fb      	strb	r3, [r7, #15]
			VL53L5CX_DCI_XTALK_CFG, 16);

	(void)memcpy(p_xtalk_margin, p_dev->temp_buffer, 4);
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	f503 63a2 	add.w	r3, r3, #1296	; 0x510
 8004cac:	681b      	ldr	r3, [r3, #0]
 8004cae:	461a      	mov	r2, r3
 8004cb0:	683b      	ldr	r3, [r7, #0]
 8004cb2:	601a      	str	r2, [r3, #0]
	*p_xtalk_margin = *p_xtalk_margin/(uint32_t)2048;
 8004cb4:	683b      	ldr	r3, [r7, #0]
 8004cb6:	681b      	ldr	r3, [r3, #0]
 8004cb8:	0ada      	lsrs	r2, r3, #11
 8004cba:	683b      	ldr	r3, [r7, #0]
 8004cbc:	601a      	str	r2, [r3, #0]

	return status;
 8004cbe:	7bfb      	ldrb	r3, [r7, #15]
}
 8004cc0:	4618      	mov	r0, r3
 8004cc2:	3710      	adds	r7, #16
 8004cc4:	46bd      	mov	sp, r7
 8004cc6:	bd80      	pop	{r7, pc}

08004cc8 <vl53l5cx_set_xtalk_margin>:

uint8_t vl53l5cx_set_xtalk_margin(
		VL53L5CX_Configuration		*p_dev,
		uint32_t			xtalk_margin)
{
 8004cc8:	b580      	push	{r7, lr}
 8004cca:	b088      	sub	sp, #32
 8004ccc:	af04      	add	r7, sp, #16
 8004cce:	6078      	str	r0, [r7, #4]
 8004cd0:	6039      	str	r1, [r7, #0]
	uint8_t status = VL53L5CX_STATUS_OK;
 8004cd2:	2300      	movs	r3, #0
 8004cd4:	73fb      	strb	r3, [r7, #15]
        uint32_t margin_kcps = xtalk_margin;
 8004cd6:	683b      	ldr	r3, [r7, #0]
 8004cd8:	60bb      	str	r3, [r7, #8]

	if(margin_kcps > (uint32_t)10000)
 8004cda:	68bb      	ldr	r3, [r7, #8]
 8004cdc:	f242 7210 	movw	r2, #10000	; 0x2710
 8004ce0:	4293      	cmp	r3, r2
 8004ce2:	d904      	bls.n	8004cee <vl53l5cx_set_xtalk_margin+0x26>
	{
		status |= VL53L5CX_STATUS_INVALID_PARAM;
 8004ce4:	7bfb      	ldrb	r3, [r7, #15]
 8004ce6:	f043 037f 	orr.w	r3, r3, #127	; 0x7f
 8004cea:	73fb      	strb	r3, [r7, #15]
 8004cec:	e017      	b.n	8004d1e <vl53l5cx_set_xtalk_margin+0x56>
	}
	else
	{
		margin_kcps = margin_kcps*(uint32_t)2048;
 8004cee:	68bb      	ldr	r3, [r7, #8]
 8004cf0:	02db      	lsls	r3, r3, #11
 8004cf2:	60bb      	str	r3, [r7, #8]
		status |= vl53l5cx_dci_replace_data(p_dev, p_dev->temp_buffer,
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	f503 61a2 	add.w	r1, r3, #1296	; 0x510
 8004cfa:	2300      	movs	r3, #0
 8004cfc:	9302      	str	r3, [sp, #8]
 8004cfe:	2304      	movs	r3, #4
 8004d00:	9301      	str	r3, [sp, #4]
 8004d02:	f107 0308 	add.w	r3, r7, #8
 8004d06:	9300      	str	r3, [sp, #0]
 8004d08:	2310      	movs	r3, #16
 8004d0a:	f64a 5294 	movw	r2, #44436	; 0xad94
 8004d0e:	6878      	ldr	r0, [r7, #4]
 8004d10:	f7ff fa5e 	bl	80041d0 <vl53l5cx_dci_replace_data>
 8004d14:	4603      	mov	r3, r0
 8004d16:	461a      	mov	r2, r3
 8004d18:	7bfb      	ldrb	r3, [r7, #15]
 8004d1a:	4313      	orrs	r3, r2
 8004d1c:	73fb      	strb	r3, [r7, #15]
				VL53L5CX_DCI_XTALK_CFG, 16, 
                                (uint8_t*)&margin_kcps, 4, 0x00);
	}

	return status;
 8004d1e:	7bfb      	ldrb	r3, [r7, #15]
}
 8004d20:	4618      	mov	r0, r3
 8004d22:	3710      	adds	r7, #16
 8004d24:	46bd      	mov	sp, r7
 8004d26:	bd80      	pop	{r7, pc}

08004d28 <RdByte>:

uint8_t RdByte(
		VL53L5CX_Platform *p_platform,
		uint16_t RegisterAdress,
		uint8_t *p_value)
{
 8004d28:	b590      	push	{r4, r7, lr}
 8004d2a:	b085      	sub	sp, #20
 8004d2c:	af00      	add	r7, sp, #0
 8004d2e:	60f8      	str	r0, [r7, #12]
 8004d30:	460b      	mov	r3, r1
 8004d32:	607a      	str	r2, [r7, #4]
 8004d34:	817b      	strh	r3, [r7, #10]
  return p_platform->Read(p_platform->address, RegisterAdress, p_value, 1U);
 8004d36:	68fb      	ldr	r3, [r7, #12]
 8004d38:	689c      	ldr	r4, [r3, #8]
 8004d3a:	68fb      	ldr	r3, [r7, #12]
 8004d3c:	8818      	ldrh	r0, [r3, #0]
 8004d3e:	8979      	ldrh	r1, [r7, #10]
 8004d40:	2301      	movs	r3, #1
 8004d42:	687a      	ldr	r2, [r7, #4]
 8004d44:	47a0      	blx	r4
 8004d46:	4603      	mov	r3, r0
 8004d48:	b2db      	uxtb	r3, r3
}
 8004d4a:	4618      	mov	r0, r3
 8004d4c:	3714      	adds	r7, #20
 8004d4e:	46bd      	mov	sp, r7
 8004d50:	bd90      	pop	{r4, r7, pc}

08004d52 <WrByte>:

uint8_t WrByte(
		VL53L5CX_Platform *p_platform,
		uint16_t RegisterAdress,
		uint8_t value)
{
 8004d52:	b590      	push	{r4, r7, lr}
 8004d54:	b083      	sub	sp, #12
 8004d56:	af00      	add	r7, sp, #0
 8004d58:	6078      	str	r0, [r7, #4]
 8004d5a:	460b      	mov	r3, r1
 8004d5c:	807b      	strh	r3, [r7, #2]
 8004d5e:	4613      	mov	r3, r2
 8004d60:	707b      	strb	r3, [r7, #1]
  return p_platform->Write(p_platform->address, RegisterAdress, &value, 1U);
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	685c      	ldr	r4, [r3, #4]
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	8818      	ldrh	r0, [r3, #0]
 8004d6a:	1c7a      	adds	r2, r7, #1
 8004d6c:	8879      	ldrh	r1, [r7, #2]
 8004d6e:	2301      	movs	r3, #1
 8004d70:	47a0      	blx	r4
 8004d72:	4603      	mov	r3, r0
 8004d74:	b2db      	uxtb	r3, r3
}
 8004d76:	4618      	mov	r0, r3
 8004d78:	370c      	adds	r7, #12
 8004d7a:	46bd      	mov	sp, r7
 8004d7c:	bd90      	pop	{r4, r7, pc}

08004d7e <WrMulti>:
uint8_t WrMulti(
		VL53L5CX_Platform *p_platform,
		uint16_t RegisterAdress,
		uint8_t *p_values,
		uint32_t size)
{
 8004d7e:	b590      	push	{r4, r7, lr}
 8004d80:	b085      	sub	sp, #20
 8004d82:	af00      	add	r7, sp, #0
 8004d84:	60f8      	str	r0, [r7, #12]
 8004d86:	607a      	str	r2, [r7, #4]
 8004d88:	603b      	str	r3, [r7, #0]
 8004d8a:	460b      	mov	r3, r1
 8004d8c:	817b      	strh	r3, [r7, #10]
  return p_platform->Write(p_platform->address, RegisterAdress, p_values, size);
 8004d8e:	68fb      	ldr	r3, [r7, #12]
 8004d90:	685c      	ldr	r4, [r3, #4]
 8004d92:	68fb      	ldr	r3, [r7, #12]
 8004d94:	8818      	ldrh	r0, [r3, #0]
 8004d96:	683b      	ldr	r3, [r7, #0]
 8004d98:	b29b      	uxth	r3, r3
 8004d9a:	8979      	ldrh	r1, [r7, #10]
 8004d9c:	687a      	ldr	r2, [r7, #4]
 8004d9e:	47a0      	blx	r4
 8004da0:	4603      	mov	r3, r0
 8004da2:	b2db      	uxtb	r3, r3
}
 8004da4:	4618      	mov	r0, r3
 8004da6:	3714      	adds	r7, #20
 8004da8:	46bd      	mov	sp, r7
 8004daa:	bd90      	pop	{r4, r7, pc}

08004dac <RdMulti>:
uint8_t RdMulti(
		VL53L5CX_Platform *p_platform,
		uint16_t RegisterAdress,
		uint8_t *p_values,
		uint32_t size)
{
 8004dac:	b590      	push	{r4, r7, lr}
 8004dae:	b085      	sub	sp, #20
 8004db0:	af00      	add	r7, sp, #0
 8004db2:	60f8      	str	r0, [r7, #12]
 8004db4:	607a      	str	r2, [r7, #4]
 8004db6:	603b      	str	r3, [r7, #0]
 8004db8:	460b      	mov	r3, r1
 8004dba:	817b      	strh	r3, [r7, #10]
  return p_platform->Read(p_platform->address, RegisterAdress, p_values, size);
 8004dbc:	68fb      	ldr	r3, [r7, #12]
 8004dbe:	689c      	ldr	r4, [r3, #8]
 8004dc0:	68fb      	ldr	r3, [r7, #12]
 8004dc2:	8818      	ldrh	r0, [r3, #0]
 8004dc4:	683b      	ldr	r3, [r7, #0]
 8004dc6:	b29b      	uxth	r3, r3
 8004dc8:	8979      	ldrh	r1, [r7, #10]
 8004dca:	687a      	ldr	r2, [r7, #4]
 8004dcc:	47a0      	blx	r4
 8004dce:	4603      	mov	r3, r0
 8004dd0:	b2db      	uxtb	r3, r3
}
 8004dd2:	4618      	mov	r0, r3
 8004dd4:	3714      	adds	r7, #20
 8004dd6:	46bd      	mov	sp, r7
 8004dd8:	bd90      	pop	{r4, r7, pc}

08004dda <SwapBuffer>:

void SwapBuffer(
    uint8_t     *buffer,
    uint16_t     size)
{
 8004dda:	b480      	push	{r7}
 8004ddc:	b085      	sub	sp, #20
 8004dde:	af00      	add	r7, sp, #0
 8004de0:	6078      	str	r0, [r7, #4]
 8004de2:	460b      	mov	r3, r1
 8004de4:	807b      	strh	r3, [r7, #2]
  uint32_t i, tmp;

  /* Example of possible implementation using <string.h> */
  for(i = 0; i < size; i = i + 4)
 8004de6:	2300      	movs	r3, #0
 8004de8:	60fb      	str	r3, [r7, #12]
 8004dea:	e021      	b.n	8004e30 <SwapBuffer+0x56>
  {
    tmp = (
      buffer[i]<<24)
 8004dec:	687a      	ldr	r2, [r7, #4]
 8004dee:	68fb      	ldr	r3, [r7, #12]
 8004df0:	4413      	add	r3, r2
 8004df2:	781b      	ldrb	r3, [r3, #0]
 8004df4:	061a      	lsls	r2, r3, #24
    |(buffer[i+1]<<16)
 8004df6:	68fb      	ldr	r3, [r7, #12]
 8004df8:	3301      	adds	r3, #1
 8004dfa:	6879      	ldr	r1, [r7, #4]
 8004dfc:	440b      	add	r3, r1
 8004dfe:	781b      	ldrb	r3, [r3, #0]
 8004e00:	041b      	lsls	r3, r3, #16
 8004e02:	431a      	orrs	r2, r3
    |(buffer[i+2]<<8)
 8004e04:	68fb      	ldr	r3, [r7, #12]
 8004e06:	3302      	adds	r3, #2
 8004e08:	6879      	ldr	r1, [r7, #4]
 8004e0a:	440b      	add	r3, r1
 8004e0c:	781b      	ldrb	r3, [r3, #0]
 8004e0e:	021b      	lsls	r3, r3, #8
 8004e10:	4313      	orrs	r3, r2
    |(buffer[i+3]);
 8004e12:	68fa      	ldr	r2, [r7, #12]
 8004e14:	3203      	adds	r2, #3
 8004e16:	6879      	ldr	r1, [r7, #4]
 8004e18:	440a      	add	r2, r1
 8004e1a:	7812      	ldrb	r2, [r2, #0]
 8004e1c:	4313      	orrs	r3, r2
    tmp = (
 8004e1e:	60bb      	str	r3, [r7, #8]

    memcpy(&(buffer[i]), &tmp, 4);
 8004e20:	687a      	ldr	r2, [r7, #4]
 8004e22:	68fb      	ldr	r3, [r7, #12]
 8004e24:	4413      	add	r3, r2
 8004e26:	68ba      	ldr	r2, [r7, #8]
 8004e28:	601a      	str	r2, [r3, #0]
  for(i = 0; i < size; i = i + 4)
 8004e2a:	68fb      	ldr	r3, [r7, #12]
 8004e2c:	3304      	adds	r3, #4
 8004e2e:	60fb      	str	r3, [r7, #12]
 8004e30:	887b      	ldrh	r3, [r7, #2]
 8004e32:	68fa      	ldr	r2, [r7, #12]
 8004e34:	429a      	cmp	r2, r3
 8004e36:	d3d9      	bcc.n	8004dec <SwapBuffer+0x12>
  }
}
 8004e38:	bf00      	nop
 8004e3a:	bf00      	nop
 8004e3c:	3714      	adds	r7, #20
 8004e3e:	46bd      	mov	sp, r7
 8004e40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e44:	4770      	bx	lr

08004e46 <WaitMs>:

uint8_t WaitMs(
		VL53L5CX_Platform *p_platform,
		uint32_t TimeMs)
{
 8004e46:	b580      	push	{r7, lr}
 8004e48:	b084      	sub	sp, #16
 8004e4a:	af00      	add	r7, sp, #0
 8004e4c:	6078      	str	r0, [r7, #4]
 8004e4e:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  tickstart = p_platform->GetTick();
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	68db      	ldr	r3, [r3, #12]
 8004e54:	4798      	blx	r3
 8004e56:	4603      	mov	r3, r0
 8004e58:	60fb      	str	r3, [r7, #12]

  while ((p_platform->GetTick() - tickstart) < TimeMs);
 8004e5a:	bf00      	nop
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	68db      	ldr	r3, [r3, #12]
 8004e60:	4798      	blx	r3
 8004e62:	4603      	mov	r3, r0
 8004e64:	461a      	mov	r2, r3
 8004e66:	68fb      	ldr	r3, [r7, #12]
 8004e68:	1ad3      	subs	r3, r2, r3
 8004e6a:	683a      	ldr	r2, [r7, #0]
 8004e6c:	429a      	cmp	r2, r3
 8004e6e:	d8f5      	bhi.n	8004e5c <WaitMs+0x16>

  return 0;
 8004e70:	2300      	movs	r3, #0
}
 8004e72:	4618      	mov	r0, r3
 8004e74:	3710      	adds	r7, #16
 8004e76:	46bd      	mov	sp, r7
 8004e78:	bd80      	pop	{r7, pc}

08004e7a <VL53L5CX_RegisterBusIO>:
  * @param pObj    vl53l5cx context object.
  * @param pIO     BSP IO struct.
  * @retval VL53L5CX status
  */
int32_t VL53L5CX_RegisterBusIO(VL53L5CX_Object_t *pObj, VL53L5CX_IO_t *pIO)
{
 8004e7a:	b580      	push	{r7, lr}
 8004e7c:	b084      	sub	sp, #16
 8004e7e:	af00      	add	r7, sp, #0
 8004e80:	6078      	str	r0, [r7, #4]
 8004e82:	6039      	str	r1, [r7, #0]
  int32_t ret;

  if ((pObj == NULL) || (pIO == NULL))
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	2b00      	cmp	r3, #0
 8004e88:	d002      	beq.n	8004e90 <VL53L5CX_RegisterBusIO+0x16>
 8004e8a:	683b      	ldr	r3, [r7, #0]
 8004e8c:	2b00      	cmp	r3, #0
 8004e8e:	d103      	bne.n	8004e98 <VL53L5CX_RegisterBusIO+0x1e>
  {
    ret = VL53L5CX_INVALID_PARAM;
 8004e90:	f06f 0301 	mvn.w	r3, #1
 8004e94:	60fb      	str	r3, [r7, #12]
 8004e96:	e033      	b.n	8004f00 <VL53L5CX_RegisterBusIO+0x86>
  }
  else
  {
    pObj->IO.Init      = pIO->Init;
 8004e98:	683b      	ldr	r3, [r7, #0]
 8004e9a:	681a      	ldr	r2, [r3, #0]
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	601a      	str	r2, [r3, #0]
    pObj->IO.DeInit    = pIO->DeInit;
 8004ea0:	683b      	ldr	r3, [r7, #0]
 8004ea2:	685a      	ldr	r2, [r3, #4]
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	605a      	str	r2, [r3, #4]
    pObj->IO.Address   = pIO->Address;
 8004ea8:	683b      	ldr	r3, [r7, #0]
 8004eaa:	891a      	ldrh	r2, [r3, #8]
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	811a      	strh	r2, [r3, #8]
    pObj->IO.WriteReg  = pIO->WriteReg;
 8004eb0:	683b      	ldr	r3, [r7, #0]
 8004eb2:	68da      	ldr	r2, [r3, #12]
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	60da      	str	r2, [r3, #12]
    pObj->IO.ReadReg   = pIO->ReadReg;
 8004eb8:	683b      	ldr	r3, [r7, #0]
 8004eba:	691a      	ldr	r2, [r3, #16]
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	611a      	str	r2, [r3, #16]
    pObj->IO.GetTick   = pIO->GetTick;
 8004ec0:	683b      	ldr	r3, [r7, #0]
 8004ec2:	695a      	ldr	r2, [r3, #20]
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	615a      	str	r2, [r3, #20]

    /* fill vl53l5cx platform structure */
    pObj->Dev.platform.address = pIO->Address;
 8004ec8:	683b      	ldr	r3, [r7, #0]
 8004eca:	891a      	ldrh	r2, [r3, #8]
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	831a      	strh	r2, [r3, #24]
    pObj->Dev.platform.Read = pIO->ReadReg;
 8004ed0:	683b      	ldr	r3, [r7, #0]
 8004ed2:	691a      	ldr	r2, [r3, #16]
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	621a      	str	r2, [r3, #32]
    pObj->Dev.platform.Write = pIO->WriteReg;
 8004ed8:	683b      	ldr	r3, [r7, #0]
 8004eda:	68da      	ldr	r2, [r3, #12]
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	61da      	str	r2, [r3, #28]
    pObj->Dev.platform.GetTick = pIO->GetTick;
 8004ee0:	683b      	ldr	r3, [r7, #0]
 8004ee2:	695a      	ldr	r2, [r3, #20]
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	625a      	str	r2, [r3, #36]	; 0x24

    if (pObj->IO.Init != NULL)
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	681b      	ldr	r3, [r3, #0]
 8004eec:	2b00      	cmp	r3, #0
 8004eee:	d004      	beq.n	8004efa <VL53L5CX_RegisterBusIO+0x80>
    {
      ret = pObj->IO.Init();
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	681b      	ldr	r3, [r3, #0]
 8004ef4:	4798      	blx	r3
 8004ef6:	60f8      	str	r0, [r7, #12]
 8004ef8:	e002      	b.n	8004f00 <VL53L5CX_RegisterBusIO+0x86>
    }
    else
    {
      ret = VL53L5CX_ERROR;
 8004efa:	f04f 33ff 	mov.w	r3, #4294967295
 8004efe:	60fb      	str	r3, [r7, #12]
    }
  }

  return ret;
 8004f00:	68fb      	ldr	r3, [r7, #12]
}
 8004f02:	4618      	mov	r0, r3
 8004f04:	3710      	adds	r7, #16
 8004f06:	46bd      	mov	sp, r7
 8004f08:	bd80      	pop	{r7, pc}

08004f0a <VL53L5CX_Init>:
  * @brief Initializes the vl53l5cx.
  * @param pObj    vl53l5cx context object.
  * @retval VL53L5CX status
  */
int32_t VL53L5CX_Init(VL53L5CX_Object_t *pObj)
{
 8004f0a:	b580      	push	{r7, lr}
 8004f0c:	b084      	sub	sp, #16
 8004f0e:	af00      	add	r7, sp, #0
 8004f10:	6078      	str	r0, [r7, #4]
  int32_t ret;

  if (pObj == NULL)
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	2b00      	cmp	r3, #0
 8004f16:	d103      	bne.n	8004f20 <VL53L5CX_Init+0x16>
  {
    ret = VL53L5CX_INVALID_PARAM;
 8004f18:	f06f 0301 	mvn.w	r3, #1
 8004f1c:	60fb      	str	r3, [r7, #12]
 8004f1e:	e02e      	b.n	8004f7e <VL53L5CX_Init+0x74>
  }
  else if (pObj->IsInitialized != 0U)
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	f893 394c 	ldrb.w	r3, [r3, #2380]	; 0x94c
 8004f26:	2b00      	cmp	r3, #0
 8004f28:	d003      	beq.n	8004f32 <VL53L5CX_Init+0x28>
  {
    ret =  VL53L5CX_ERROR;
 8004f2a:	f04f 33ff 	mov.w	r3, #4294967295
 8004f2e:	60fb      	str	r3, [r7, #12]
 8004f30:	e025      	b.n	8004f7e <VL53L5CX_Init+0x74>
  }
  else if (vl53l5cx_init(&pObj->Dev) != VL53L5CX_STATUS_OK)
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	3318      	adds	r3, #24
 8004f36:	4618      	mov	r0, r3
 8004f38:	f7fd fbc0 	bl	80026bc <vl53l5cx_init>
 8004f3c:	4603      	mov	r3, r0
 8004f3e:	2b00      	cmp	r3, #0
 8004f40:	d003      	beq.n	8004f4a <VL53L5CX_Init+0x40>
  {
    ret = VL53L5CX_ERROR;
 8004f42:	f04f 33ff 	mov.w	r3, #4294967295
 8004f46:	60fb      	str	r3, [r7, #12]
 8004f48:	e019      	b.n	8004f7e <VL53L5CX_Init+0x74>
  }
  else
  {
    pObj->IsRanging = 0U;
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	2200      	movs	r2, #0
 8004f4e:	f883 294d 	strb.w	r2, [r3, #2381]	; 0x94d
    pObj->IsBlocking = 0U;
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	2200      	movs	r2, #0
 8004f56:	f883 294e 	strb.w	r2, [r3, #2382]	; 0x94e
    pObj->IsContinuous = 0U;
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	2200      	movs	r2, #0
 8004f5e:	f883 294f 	strb.w	r2, [r3, #2383]	; 0x94f
    pObj->IsAmbientEnabled = 0U;
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	2200      	movs	r2, #0
 8004f66:	f883 2950 	strb.w	r2, [r3, #2384]	; 0x950
    pObj->IsSignalEnabled = 0U;
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	2200      	movs	r2, #0
 8004f6e:	f883 2951 	strb.w	r2, [r3, #2385]	; 0x951
    pObj->IsInitialized = 1U;
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	2201      	movs	r2, #1
 8004f76:	f883 294c 	strb.w	r2, [r3, #2380]	; 0x94c
    ret = VL53L5CX_OK;
 8004f7a:	2300      	movs	r3, #0
 8004f7c:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 8004f7e:	68fb      	ldr	r3, [r7, #12]
}
 8004f80:	4618      	mov	r0, r3
 8004f82:	3710      	adds	r7, #16
 8004f84:	46bd      	mov	sp, r7
 8004f86:	bd80      	pop	{r7, pc}

08004f88 <VL53L5CX_DeInit>:
  * @brief Deinitializes the vl53l5cx.
  * @param pObj    vl53l5cx context object.
  * @retval VL53L5CX status
  */
int32_t VL53L5CX_DeInit(VL53L5CX_Object_t *pObj)
{
 8004f88:	b580      	push	{r7, lr}
 8004f8a:	b084      	sub	sp, #16
 8004f8c:	af00      	add	r7, sp, #0
 8004f8e:	6078      	str	r0, [r7, #4]
  int32_t ret;

  if (pObj == NULL)
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	2b00      	cmp	r3, #0
 8004f94:	d103      	bne.n	8004f9e <VL53L5CX_DeInit+0x16>
  {
    ret = VL53L5CX_INVALID_PARAM;
 8004f96:	f06f 0301 	mvn.w	r3, #1
 8004f9a:	60fb      	str	r3, [r7, #12]
 8004f9c:	e018      	b.n	8004fd0 <VL53L5CX_DeInit+0x48>
  }
  else if (pObj->IsInitialized == 1U)
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	f893 394c 	ldrb.w	r3, [r3, #2380]	; 0x94c
 8004fa4:	2b01      	cmp	r3, #1
 8004fa6:	d110      	bne.n	8004fca <VL53L5CX_DeInit+0x42>
  {
    /* De-initialize the vl53l5cx interface */
    if (pObj->IO.DeInit() != 0)
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	685b      	ldr	r3, [r3, #4]
 8004fac:	4798      	blx	r3
 8004fae:	4603      	mov	r3, r0
 8004fb0:	2b00      	cmp	r3, #0
 8004fb2:	d003      	beq.n	8004fbc <VL53L5CX_DeInit+0x34>
    {
      ret = VL53L5CX_ERROR;
 8004fb4:	f04f 33ff 	mov.w	r3, #4294967295
 8004fb8:	60fb      	str	r3, [r7, #12]
 8004fba:	e009      	b.n	8004fd0 <VL53L5CX_DeInit+0x48>
    }
    else
    {
      ret = VL53L5CX_OK;
 8004fbc:	2300      	movs	r3, #0
 8004fbe:	60fb      	str	r3, [r7, #12]
      pObj->IsInitialized = 0;
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	2200      	movs	r2, #0
 8004fc4:	f883 294c 	strb.w	r2, [r3, #2380]	; 0x94c
 8004fc8:	e002      	b.n	8004fd0 <VL53L5CX_DeInit+0x48>
    }
  }
  else
  {
    /* if device not initialized return error */
    ret = VL53L5CX_ERROR;
 8004fca:	f04f 33ff 	mov.w	r3, #4294967295
 8004fce:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 8004fd0:	68fb      	ldr	r3, [r7, #12]
}
 8004fd2:	4618      	mov	r0, r3
 8004fd4:	3710      	adds	r7, #16
 8004fd6:	46bd      	mov	sp, r7
 8004fd8:	bd80      	pop	{r7, pc}

08004fda <VL53L5CX_ReadID>:
  * @param pObj    vl53l5cx context object.
  * @param pId    Pointer to the device ID.
  * @retval VL53L5CX status
  */
int32_t VL53L5CX_ReadID(VL53L5CX_Object_t *pObj, uint32_t *pId)
{
 8004fda:	b580      	push	{r7, lr}
 8004fdc:	b084      	sub	sp, #16
 8004fde:	af00      	add	r7, sp, #0
 8004fe0:	6078      	str	r0, [r7, #4]
 8004fe2:	6039      	str	r1, [r7, #0]
  int32_t ret;
  uint8_t device_id = 0;
 8004fe4:	2300      	movs	r3, #0
 8004fe6:	72bb      	strb	r3, [r7, #10]
  uint8_t revision_id = 0;
 8004fe8:	2300      	movs	r3, #0
 8004fea:	727b      	strb	r3, [r7, #9]
  uint8_t status = VL53L5CX_STATUS_OK;
 8004fec:	2300      	movs	r3, #0
 8004fee:	72fb      	strb	r3, [r7, #11]

  if ((pObj == NULL) || (pId == NULL))
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	2b00      	cmp	r3, #0
 8004ff4:	d002      	beq.n	8004ffc <VL53L5CX_ReadID+0x22>
 8004ff6:	683b      	ldr	r3, [r7, #0]
 8004ff8:	2b00      	cmp	r3, #0
 8004ffa:	d103      	bne.n	8005004 <VL53L5CX_ReadID+0x2a>
  {
    ret = VL53L5CX_INVALID_PARAM;
 8004ffc:	f06f 0301 	mvn.w	r3, #1
 8005000:	60fb      	str	r3, [r7, #12]
 8005002:	e045      	b.n	8005090 <VL53L5CX_ReadID+0xb6>
  }
  else
  {
    status |= WrByte(&pObj->Dev.platform, 0x7fff, 0x00);
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	3318      	adds	r3, #24
 8005008:	2200      	movs	r2, #0
 800500a:	f647 71ff 	movw	r1, #32767	; 0x7fff
 800500e:	4618      	mov	r0, r3
 8005010:	f7ff fe9f 	bl	8004d52 <WrByte>
 8005014:	4603      	mov	r3, r0
 8005016:	461a      	mov	r2, r3
 8005018:	7afb      	ldrb	r3, [r7, #11]
 800501a:	4313      	orrs	r3, r2
 800501c:	72fb      	strb	r3, [r7, #11]
    status |= RdByte(&pObj->Dev.platform, 0, &device_id);
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	3318      	adds	r3, #24
 8005022:	f107 020a 	add.w	r2, r7, #10
 8005026:	2100      	movs	r1, #0
 8005028:	4618      	mov	r0, r3
 800502a:	f7ff fe7d 	bl	8004d28 <RdByte>
 800502e:	4603      	mov	r3, r0
 8005030:	461a      	mov	r2, r3
 8005032:	7afb      	ldrb	r3, [r7, #11]
 8005034:	4313      	orrs	r3, r2
 8005036:	72fb      	strb	r3, [r7, #11]
    status |= RdByte(&pObj->Dev.platform, 1, &revision_id);
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	3318      	adds	r3, #24
 800503c:	f107 0209 	add.w	r2, r7, #9
 8005040:	2101      	movs	r1, #1
 8005042:	4618      	mov	r0, r3
 8005044:	f7ff fe70 	bl	8004d28 <RdByte>
 8005048:	4603      	mov	r3, r0
 800504a:	461a      	mov	r2, r3
 800504c:	7afb      	ldrb	r3, [r7, #11]
 800504e:	4313      	orrs	r3, r2
 8005050:	72fb      	strb	r3, [r7, #11]
    status |= WrByte(&pObj->Dev.platform, 0x7fff, 0x02);
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	3318      	adds	r3, #24
 8005056:	2202      	movs	r2, #2
 8005058:	f647 71ff 	movw	r1, #32767	; 0x7fff
 800505c:	4618      	mov	r0, r3
 800505e:	f7ff fe78 	bl	8004d52 <WrByte>
 8005062:	4603      	mov	r3, r0
 8005064:	461a      	mov	r2, r3
 8005066:	7afb      	ldrb	r3, [r7, #11]
 8005068:	4313      	orrs	r3, r2
 800506a:	72fb      	strb	r3, [r7, #11]

    if (status == 0U)
 800506c:	7afb      	ldrb	r3, [r7, #11]
 800506e:	2b00      	cmp	r3, #0
 8005070:	d108      	bne.n	8005084 <VL53L5CX_ReadID+0xaa>
    {
      *pId = ((uint32_t)device_id << 8) + revision_id;
 8005072:	7abb      	ldrb	r3, [r7, #10]
 8005074:	021b      	lsls	r3, r3, #8
 8005076:	7a7a      	ldrb	r2, [r7, #9]
 8005078:	441a      	add	r2, r3
 800507a:	683b      	ldr	r3, [r7, #0]
 800507c:	601a      	str	r2, [r3, #0]
      ret = VL53L5CX_OK;
 800507e:	2300      	movs	r3, #0
 8005080:	60fb      	str	r3, [r7, #12]
 8005082:	e005      	b.n	8005090 <VL53L5CX_ReadID+0xb6>
    }
    else
    {
      *pId = 0;
 8005084:	683b      	ldr	r3, [r7, #0]
 8005086:	2200      	movs	r2, #0
 8005088:	601a      	str	r2, [r3, #0]
      ret = VL53L5CX_ERROR;
 800508a:	f04f 33ff 	mov.w	r3, #4294967295
 800508e:	60fb      	str	r3, [r7, #12]
    }
  }

  return ret;
 8005090:	68fb      	ldr	r3, [r7, #12]
}
 8005092:	4618      	mov	r0, r3
 8005094:	3710      	adds	r7, #16
 8005096:	46bd      	mov	sp, r7
 8005098:	bd80      	pop	{r7, pc}

0800509a <VL53L5CX_GetCapabilities>:
  * @param pObj    vl53l5cx context object.
  * @param pCap    Pointer to the vl53l5cx capabilities.
  * @retval VL53L5CX status
  */
int32_t VL53L5CX_GetCapabilities(VL53L5CX_Object_t *pObj, VL53L5CX_Capabilities_t *pCap)
{
 800509a:	b480      	push	{r7}
 800509c:	b085      	sub	sp, #20
 800509e:	af00      	add	r7, sp, #0
 80050a0:	6078      	str	r0, [r7, #4]
 80050a2:	6039      	str	r1, [r7, #0]
  int32_t ret;

  if ((pObj == NULL) || (pCap == NULL))
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	2b00      	cmp	r3, #0
 80050a8:	d002      	beq.n	80050b0 <VL53L5CX_GetCapabilities+0x16>
 80050aa:	683b      	ldr	r3, [r7, #0]
 80050ac:	2b00      	cmp	r3, #0
 80050ae:	d103      	bne.n	80050b8 <VL53L5CX_GetCapabilities+0x1e>
  {
    ret = VL53L5CX_INVALID_PARAM;
 80050b0:	f06f 0301 	mvn.w	r3, #1
 80050b4:	60fb      	str	r3, [r7, #12]
 80050b6:	e00d      	b.n	80050d4 <VL53L5CX_GetCapabilities+0x3a>
  }
  else
  {
    pCap->NumberOfZones = VL53L5CX_RESOLUTION_8X8;
 80050b8:	683b      	ldr	r3, [r7, #0]
 80050ba:	2240      	movs	r2, #64	; 0x40
 80050bc:	601a      	str	r2, [r3, #0]
    pCap->MaxNumberOfTargetsPerZone = VL53L5CX_TARGET_PER_ZONE;
 80050be:	683b      	ldr	r3, [r7, #0]
 80050c0:	2201      	movs	r2, #1
 80050c2:	605a      	str	r2, [r3, #4]
    pCap->CustomROI = 0;
 80050c4:	683b      	ldr	r3, [r7, #0]
 80050c6:	2200      	movs	r2, #0
 80050c8:	609a      	str	r2, [r3, #8]
    pCap->ThresholdDetection = 1;
 80050ca:	683b      	ldr	r3, [r7, #0]
 80050cc:	2201      	movs	r2, #1
 80050ce:	60da      	str	r2, [r3, #12]

    ret = VL53L5CX_OK;
 80050d0:	2300      	movs	r3, #0
 80050d2:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 80050d4:	68fb      	ldr	r3, [r7, #12]
}
 80050d6:	4618      	mov	r0, r3
 80050d8:	3714      	adds	r7, #20
 80050da:	46bd      	mov	sp, r7
 80050dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050e0:	4770      	bx	lr
	...

080050e4 <VL53L5CX_ConfigProfile>:
  * @param pObj    vl53l5cx context object.
  * @param pConfig    Pointer to the new configuration profile to be applied.
  * @retval VL53L5CX status
  */
int32_t VL53L5CX_ConfigProfile(VL53L5CX_Object_t *pObj, VL53L5CX_ProfileConfig_t *pConfig)
{
 80050e4:	b580      	push	{r7, lr}
 80050e6:	b086      	sub	sp, #24
 80050e8:	af00      	add	r7, sp, #0
 80050ea:	6078      	str	r0, [r7, #4]
 80050ec:	6039      	str	r1, [r7, #0]
  int32_t ret = VL53L5CX_OK;
 80050ee:	2300      	movs	r3, #0
 80050f0:	617b      	str	r3, [r7, #20]
  uint8_t resolution;
  uint8_t ranging_mode;
  uint8_t ranging_frequency;
  uint32_t integration_time;

  if ((pObj != NULL) && (pConfig != NULL))
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	2b00      	cmp	r3, #0
 80050f6:	d01b      	beq.n	8005130 <VL53L5CX_ConfigProfile+0x4c>
 80050f8:	683b      	ldr	r3, [r7, #0]
 80050fa:	2b00      	cmp	r3, #0
 80050fc:	d018      	beq.n	8005130 <VL53L5CX_ConfigProfile+0x4c>
  {
    profile = pConfig->RangingProfile;
 80050fe:	683b      	ldr	r3, [r7, #0]
 8005100:	781b      	ldrb	r3, [r3, #0]
 8005102:	747b      	strb	r3, [r7, #17]
    integration_time = pConfig->TimingBudget;
 8005104:	683b      	ldr	r3, [r7, #0]
 8005106:	685b      	ldr	r3, [r3, #4]
 8005108:	60fb      	str	r3, [r7, #12]
    ranging_frequency = (uint8_t)pConfig->Frequency;
 800510a:	683b      	ldr	r3, [r7, #0]
 800510c:	689b      	ldr	r3, [r3, #8]
 800510e:	72fb      	strb	r3, [r7, #11]
  else
  {
    return VL53L5CX_INVALID_PARAM;
  }

  switch (profile)
 8005110:	7c7b      	ldrb	r3, [r7, #17]
 8005112:	3b01      	subs	r3, #1
 8005114:	2b03      	cmp	r3, #3
 8005116:	d822      	bhi.n	800515e <VL53L5CX_ConfigProfile+0x7a>
 8005118:	a201      	add	r2, pc, #4	; (adr r2, 8005120 <VL53L5CX_ConfigProfile+0x3c>)
 800511a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800511e:	bf00      	nop
 8005120:	08005137 	.word	0x08005137
 8005124:	08005141 	.word	0x08005141
 8005128:	0800514b 	.word	0x0800514b
 800512c:	08005155 	.word	0x08005155
    return VL53L5CX_INVALID_PARAM;
 8005130:	f06f 0301 	mvn.w	r3, #1
 8005134:	e070      	b.n	8005218 <VL53L5CX_ConfigProfile+0x134>
  {
  case VL53L5CX_PROFILE_4x4_CONTINUOUS:
    resolution = VL53L5CX_RESOLUTION_4X4;
 8005136:	2310      	movs	r3, #16
 8005138:	74fb      	strb	r3, [r7, #19]
    ranging_mode = VL53L5CX_RANGING_MODE_CONTINUOUS;
 800513a:	2301      	movs	r3, #1
 800513c:	74bb      	strb	r3, [r7, #18]
    break;
 800513e:	e016      	b.n	800516e <VL53L5CX_ConfigProfile+0x8a>
  case VL53L5CX_PROFILE_4x4_AUTONOMOUS:
    resolution = VL53L5CX_RESOLUTION_4X4;
 8005140:	2310      	movs	r3, #16
 8005142:	74fb      	strb	r3, [r7, #19]
    ranging_mode = VL53L5CX_RANGING_MODE_AUTONOMOUS;
 8005144:	2303      	movs	r3, #3
 8005146:	74bb      	strb	r3, [r7, #18]
    break;
 8005148:	e011      	b.n	800516e <VL53L5CX_ConfigProfile+0x8a>
  case VL53L5CX_PROFILE_8x8_CONTINUOUS:
    resolution = VL53L5CX_RESOLUTION_8X8;
 800514a:	2340      	movs	r3, #64	; 0x40
 800514c:	74fb      	strb	r3, [r7, #19]
    ranging_mode = VL53L5CX_RANGING_MODE_CONTINUOUS;
 800514e:	2301      	movs	r3, #1
 8005150:	74bb      	strb	r3, [r7, #18]
    break;
 8005152:	e00c      	b.n	800516e <VL53L5CX_ConfigProfile+0x8a>
  case VL53L5CX_PROFILE_8x8_AUTONOMOUS:
    resolution = VL53L5CX_RESOLUTION_8X8;
 8005154:	2340      	movs	r3, #64	; 0x40
 8005156:	74fb      	strb	r3, [r7, #19]
    ranging_mode = VL53L5CX_RANGING_MODE_AUTONOMOUS;
 8005158:	2303      	movs	r3, #3
 800515a:	74bb      	strb	r3, [r7, #18]
    break;
 800515c:	e007      	b.n	800516e <VL53L5CX_ConfigProfile+0x8a>
  default:
    resolution = 0; /* silence MISRA rule 1.3 warning */
 800515e:	2300      	movs	r3, #0
 8005160:	74fb      	strb	r3, [r7, #19]
    ranging_mode = 0; /* silence MISRA rule 1.3 warning */
 8005162:	2300      	movs	r3, #0
 8005164:	74bb      	strb	r3, [r7, #18]
    ret = VL53L5CX_INVALID_PARAM;
 8005166:	f06f 0301 	mvn.w	r3, #1
 800516a:	617b      	str	r3, [r7, #20]
    break;
 800516c:	bf00      	nop
  }

  if (ret != VL53L5CX_OK)
 800516e:	697b      	ldr	r3, [r7, #20]
 8005170:	2b00      	cmp	r3, #0
 8005172:	d001      	beq.n	8005178 <VL53L5CX_ConfigProfile+0x94>
  {
    return ret;
 8005174:	697b      	ldr	r3, [r7, #20]
 8005176:	e04f      	b.n	8005218 <VL53L5CX_ConfigProfile+0x134>
  }
  else if (vl53l5cx_set_resolution(&pObj->Dev, resolution) != VL53L5CX_STATUS_OK)
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	3318      	adds	r3, #24
 800517c:	7cfa      	ldrb	r2, [r7, #19]
 800517e:	4611      	mov	r1, r2
 8005180:	4618      	mov	r0, r3
 8005182:	f7fe fc58 	bl	8003a36 <vl53l5cx_set_resolution>
 8005186:	4603      	mov	r3, r0
 8005188:	2b00      	cmp	r3, #0
 800518a:	d003      	beq.n	8005194 <VL53L5CX_ConfigProfile+0xb0>
  {
    ret = VL53L5CX_ERROR;
 800518c:	f04f 33ff 	mov.w	r3, #4294967295
 8005190:	617b      	str	r3, [r7, #20]
 8005192:	e040      	b.n	8005216 <VL53L5CX_ConfigProfile+0x132>
  }
  else if (vl53l5cx_set_ranging_mode(&pObj->Dev, ranging_mode) != VL53L5CX_STATUS_OK)
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	3318      	adds	r3, #24
 8005198:	7cba      	ldrb	r2, [r7, #18]
 800519a:	4611      	mov	r1, r2
 800519c:	4618      	mov	r0, r3
 800519e:	f7fe fe98 	bl	8003ed2 <vl53l5cx_set_ranging_mode>
 80051a2:	4603      	mov	r3, r0
 80051a4:	2b00      	cmp	r3, #0
 80051a6:	d003      	beq.n	80051b0 <VL53L5CX_ConfigProfile+0xcc>
  {
    ret = VL53L5CX_ERROR;
 80051a8:	f04f 33ff 	mov.w	r3, #4294967295
 80051ac:	617b      	str	r3, [r7, #20]
 80051ae:	e032      	b.n	8005216 <VL53L5CX_ConfigProfile+0x132>
  }
  else if (vl53l5cx_set_integration_time_ms(&pObj->Dev, integration_time) != VL53L5CX_STATUS_OK)
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	3318      	adds	r3, #24
 80051b4:	68f9      	ldr	r1, [r7, #12]
 80051b6:	4618      	mov	r0, r3
 80051b8:	f7fe fd7e 	bl	8003cb8 <vl53l5cx_set_integration_time_ms>
 80051bc:	4603      	mov	r3, r0
 80051be:	2b00      	cmp	r3, #0
 80051c0:	d003      	beq.n	80051ca <VL53L5CX_ConfigProfile+0xe6>
  {
    ret = VL53L5CX_ERROR;
 80051c2:	f04f 33ff 	mov.w	r3, #4294967295
 80051c6:	617b      	str	r3, [r7, #20]
 80051c8:	e025      	b.n	8005216 <VL53L5CX_ConfigProfile+0x132>
  }
  else if (vl53l5cx_set_ranging_frequency_hz(&pObj->Dev, ranging_frequency) != VL53L5CX_STATUS_OK)
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	3318      	adds	r3, #24
 80051ce:	7afa      	ldrb	r2, [r7, #11]
 80051d0:	4611      	mov	r1, r2
 80051d2:	4618      	mov	r0, r3
 80051d4:	f7fe fd22 	bl	8003c1c <vl53l5cx_set_ranging_frequency_hz>
 80051d8:	4603      	mov	r3, r0
 80051da:	2b00      	cmp	r3, #0
 80051dc:	d003      	beq.n	80051e6 <VL53L5CX_ConfigProfile+0x102>
  {
    ret = VL53L5CX_ERROR;
 80051de:	f04f 33ff 	mov.w	r3, #4294967295
 80051e2:	617b      	str	r3, [r7, #20]
 80051e4:	e017      	b.n	8005216 <VL53L5CX_ConfigProfile+0x132>
  }
  else
  {
    pObj->IsAmbientEnabled = (pConfig->EnableAmbient == 0U) ? 0U : 1U;
 80051e6:	683b      	ldr	r3, [r7, #0]
 80051e8:	68db      	ldr	r3, [r3, #12]
 80051ea:	2b00      	cmp	r3, #0
 80051ec:	bf14      	ite	ne
 80051ee:	2301      	movne	r3, #1
 80051f0:	2300      	moveq	r3, #0
 80051f2:	b2db      	uxtb	r3, r3
 80051f4:	461a      	mov	r2, r3
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	f883 2950 	strb.w	r2, [r3, #2384]	; 0x950
    pObj->IsSignalEnabled = (pConfig->EnableSignal == 0U) ? 0U : 1U;
 80051fc:	683b      	ldr	r3, [r7, #0]
 80051fe:	691b      	ldr	r3, [r3, #16]
 8005200:	2b00      	cmp	r3, #0
 8005202:	bf14      	ite	ne
 8005204:	2301      	movne	r3, #1
 8005206:	2300      	moveq	r3, #0
 8005208:	b2db      	uxtb	r3, r3
 800520a:	461a      	mov	r2, r3
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	f883 2951 	strb.w	r2, [r3, #2385]	; 0x951

    ret = VL53L5CX_OK;
 8005212:	2300      	movs	r3, #0
 8005214:	617b      	str	r3, [r7, #20]
  }

  return ret;
 8005216:	697b      	ldr	r3, [r7, #20]
}
 8005218:	4618      	mov	r0, r3
 800521a:	3718      	adds	r7, #24
 800521c:	46bd      	mov	sp, r7
 800521e:	bd80      	pop	{r7, pc}

08005220 <VL53L5CX_ConfigROI>:
  * @param pROIConfig    Pointer to the ROI configuration struct.
  * @note This device does not support this function.
  * @retval VL53L5CX status
  */
int32_t VL53L5CX_ConfigROI(VL53L5CX_Object_t *pObj, VL53L5CX_ROIConfig_t *pROIConfig)
{
 8005220:	b480      	push	{r7}
 8005222:	b083      	sub	sp, #12
 8005224:	af00      	add	r7, sp, #0
 8005226:	6078      	str	r0, [r7, #4]
 8005228:	6039      	str	r1, [r7, #0]
  UNUSED(pObj);
  UNUSED(pROIConfig);
  return VL53L5CX_NOT_IMPLEMENTED;
 800522a:	f06f 0303 	mvn.w	r3, #3
}
 800522e:	4618      	mov	r0, r3
 8005230:	370c      	adds	r7, #12
 8005232:	46bd      	mov	sp, r7
 8005234:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005238:	4770      	bx	lr
	...

0800523c <VL53L5CX_ConfigIT>:
  * @param pObj    vl53l5cx context object.
  * @param pITConfig    Pointer to the IT configuration struct.
  * @retval VL53L5CX status
  */
int32_t VL53L5CX_ConfigIT(VL53L5CX_Object_t *pObj, VL53L5CX_ITConfig_t *pITConfig)
{
 800523c:	b580      	push	{r7, lr}
 800523e:	b084      	sub	sp, #16
 8005240:	af00      	add	r7, sp, #0
 8005242:	6078      	str	r0, [r7, #4]
 8005244:	6039      	str	r1, [r7, #0]
  int32_t ret;
  uint8_t i;
  uint8_t res; /* current resolution */
  uint8_t status = 0U;
 8005246:	2300      	movs	r3, #0
 8005248:	72bb      	strb	r3, [r7, #10]
  static VL53L5CX_DetectionThresholds thresholds[VL53L5CX_NB_THRESHOLDS];

  if ((pObj == NULL) || (pITConfig == NULL))
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	2b00      	cmp	r3, #0
 800524e:	d002      	beq.n	8005256 <VL53L5CX_ConfigIT+0x1a>
 8005250:	683b      	ldr	r3, [r7, #0]
 8005252:	2b00      	cmp	r3, #0
 8005254:	d103      	bne.n	800525e <VL53L5CX_ConfigIT+0x22>
  {
    ret = VL53L5CX_INVALID_PARAM;
 8005256:	f06f 0301 	mvn.w	r3, #1
 800525a:	60fb      	str	r3, [r7, #12]
 800525c:	e09f      	b.n	800539e <VL53L5CX_ConfigIT+0x162>
  }
  else if (pITConfig->Criteria == VL53L5CX_IT_DEFAULT)
 800525e:	683b      	ldr	r3, [r7, #0]
 8005260:	681b      	ldr	r3, [r3, #0]
 8005262:	2bff      	cmp	r3, #255	; 0xff
 8005264:	d113      	bne.n	800528e <VL53L5CX_ConfigIT+0x52>
  {
    /* disable thresholds detection */
    status |= vl53l5cx_set_detection_thresholds_enable(&pObj->Dev, 0U);
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	3318      	adds	r3, #24
 800526a:	2100      	movs	r1, #0
 800526c:	4618      	mov	r0, r3
 800526e:	f7fe ffdb 	bl	8004228 <vl53l5cx_set_detection_thresholds_enable>
 8005272:	4603      	mov	r3, r0
 8005274:	461a      	mov	r2, r3
 8005276:	7abb      	ldrb	r3, [r7, #10]
 8005278:	4313      	orrs	r3, r2
 800527a:	72bb      	strb	r3, [r7, #10]
    ret = (status != 0U) ? VL53L5CX_ERROR : VL53L5CX_OK;
 800527c:	7abb      	ldrb	r3, [r7, #10]
 800527e:	2b00      	cmp	r3, #0
 8005280:	d002      	beq.n	8005288 <VL53L5CX_ConfigIT+0x4c>
 8005282:	f04f 33ff 	mov.w	r3, #4294967295
 8005286:	e000      	b.n	800528a <VL53L5CX_ConfigIT+0x4e>
 8005288:	2300      	movs	r3, #0
 800528a:	60fb      	str	r3, [r7, #12]
 800528c:	e087      	b.n	800539e <VL53L5CX_ConfigIT+0x162>
  }
  else
  {
    (void)vl53l5cx_get_resolution(&pObj->Dev, &res);
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	3318      	adds	r3, #24
 8005292:	f107 0209 	add.w	r2, r7, #9
 8005296:	4611      	mov	r1, r2
 8005298:	4618      	mov	r0, r3
 800529a:	f7fe fba7 	bl	80039ec <vl53l5cx_get_resolution>

    /* configure thresholds on each active zone */
    for (i = 0; i < res; i++)
 800529e:	2300      	movs	r3, #0
 80052a0:	72fb      	strb	r3, [r7, #11]
 80052a2:	e044      	b.n	800532e <VL53L5CX_ConfigIT+0xf2>
    {
      thresholds[i].zone_num = i;
 80052a4:	7afa      	ldrb	r2, [r7, #11]
 80052a6:	4940      	ldr	r1, [pc, #256]	; (80053a8 <VL53L5CX_ConfigIT+0x16c>)
 80052a8:	4613      	mov	r3, r2
 80052aa:	005b      	lsls	r3, r3, #1
 80052ac:	4413      	add	r3, r2
 80052ae:	009b      	lsls	r3, r3, #2
 80052b0:	440b      	add	r3, r1
 80052b2:	330a      	adds	r3, #10
 80052b4:	7afa      	ldrb	r2, [r7, #11]
 80052b6:	701a      	strb	r2, [r3, #0]
      thresholds[i].measurement = VL53L5CX_DISTANCE_MM;
 80052b8:	7afa      	ldrb	r2, [r7, #11]
 80052ba:	493b      	ldr	r1, [pc, #236]	; (80053a8 <VL53L5CX_ConfigIT+0x16c>)
 80052bc:	4613      	mov	r3, r2
 80052be:	005b      	lsls	r3, r3, #1
 80052c0:	4413      	add	r3, r2
 80052c2:	009b      	lsls	r3, r3, #2
 80052c4:	440b      	add	r3, r1
 80052c6:	3308      	adds	r3, #8
 80052c8:	2201      	movs	r2, #1
 80052ca:	701a      	strb	r2, [r3, #0]
      thresholds[i].type = (uint8_t)pITConfig->Criteria;
 80052cc:	683b      	ldr	r3, [r7, #0]
 80052ce:	681b      	ldr	r3, [r3, #0]
 80052d0:	7afa      	ldrb	r2, [r7, #11]
 80052d2:	b2d8      	uxtb	r0, r3
 80052d4:	4934      	ldr	r1, [pc, #208]	; (80053a8 <VL53L5CX_ConfigIT+0x16c>)
 80052d6:	4613      	mov	r3, r2
 80052d8:	005b      	lsls	r3, r3, #1
 80052da:	4413      	add	r3, r2
 80052dc:	009b      	lsls	r3, r3, #2
 80052de:	440b      	add	r3, r1
 80052e0:	3309      	adds	r3, #9
 80052e2:	4602      	mov	r2, r0
 80052e4:	701a      	strb	r2, [r3, #0]
      thresholds[i].mathematic_operation = VL53L5CX_OPERATION_NONE;
 80052e6:	7afa      	ldrb	r2, [r7, #11]
 80052e8:	492f      	ldr	r1, [pc, #188]	; (80053a8 <VL53L5CX_ConfigIT+0x16c>)
 80052ea:	4613      	mov	r3, r2
 80052ec:	005b      	lsls	r3, r3, #1
 80052ee:	4413      	add	r3, r2
 80052f0:	009b      	lsls	r3, r3, #2
 80052f2:	440b      	add	r3, r1
 80052f4:	330b      	adds	r3, #11
 80052f6:	2200      	movs	r2, #0
 80052f8:	701a      	strb	r2, [r3, #0]
      thresholds[i].param_low_thresh = (int32_t)pITConfig->LowThreshold;
 80052fa:	683b      	ldr	r3, [r7, #0]
 80052fc:	685b      	ldr	r3, [r3, #4]
 80052fe:	7afa      	ldrb	r2, [r7, #11]
 8005300:	4618      	mov	r0, r3
 8005302:	4929      	ldr	r1, [pc, #164]	; (80053a8 <VL53L5CX_ConfigIT+0x16c>)
 8005304:	4613      	mov	r3, r2
 8005306:	005b      	lsls	r3, r3, #1
 8005308:	4413      	add	r3, r2
 800530a:	009b      	lsls	r3, r3, #2
 800530c:	440b      	add	r3, r1
 800530e:	6018      	str	r0, [r3, #0]
      thresholds[i].param_high_thresh = (int32_t)pITConfig->HighThreshold;
 8005310:	683b      	ldr	r3, [r7, #0]
 8005312:	689b      	ldr	r3, [r3, #8]
 8005314:	7afa      	ldrb	r2, [r7, #11]
 8005316:	4618      	mov	r0, r3
 8005318:	4923      	ldr	r1, [pc, #140]	; (80053a8 <VL53L5CX_ConfigIT+0x16c>)
 800531a:	4613      	mov	r3, r2
 800531c:	005b      	lsls	r3, r3, #1
 800531e:	4413      	add	r3, r2
 8005320:	009b      	lsls	r3, r3, #2
 8005322:	440b      	add	r3, r1
 8005324:	3304      	adds	r3, #4
 8005326:	6018      	str	r0, [r3, #0]
    for (i = 0; i < res; i++)
 8005328:	7afb      	ldrb	r3, [r7, #11]
 800532a:	3301      	adds	r3, #1
 800532c:	72fb      	strb	r3, [r7, #11]
 800532e:	7a7b      	ldrb	r3, [r7, #9]
 8005330:	7afa      	ldrb	r2, [r7, #11]
 8005332:	429a      	cmp	r2, r3
 8005334:	d3b6      	bcc.n	80052a4 <VL53L5CX_ConfigIT+0x68>
    }

    /* the last threshold must be clearly indicated */
    thresholds[i].zone_num |= VL53L5CX_LAST_THRESHOLD;
 8005336:	7afa      	ldrb	r2, [r7, #11]
 8005338:	491b      	ldr	r1, [pc, #108]	; (80053a8 <VL53L5CX_ConfigIT+0x16c>)
 800533a:	4613      	mov	r3, r2
 800533c:	005b      	lsls	r3, r3, #1
 800533e:	4413      	add	r3, r2
 8005340:	009b      	lsls	r3, r3, #2
 8005342:	440b      	add	r3, r1
 8005344:	330a      	adds	r3, #10
 8005346:	781b      	ldrb	r3, [r3, #0]
 8005348:	7afa      	ldrb	r2, [r7, #11]
 800534a:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800534e:	b2d8      	uxtb	r0, r3
 8005350:	4915      	ldr	r1, [pc, #84]	; (80053a8 <VL53L5CX_ConfigIT+0x16c>)
 8005352:	4613      	mov	r3, r2
 8005354:	005b      	lsls	r3, r3, #1
 8005356:	4413      	add	r3, r2
 8005358:	009b      	lsls	r3, r3, #2
 800535a:	440b      	add	r3, r1
 800535c:	330a      	adds	r3, #10
 800535e:	4602      	mov	r2, r0
 8005360:	701a      	strb	r2, [r3, #0]

    /* send array of thresholds to the sensor */
    status |= vl53l5cx_set_detection_thresholds(&pObj->Dev, thresholds);
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	3318      	adds	r3, #24
 8005366:	4910      	ldr	r1, [pc, #64]	; (80053a8 <VL53L5CX_ConfigIT+0x16c>)
 8005368:	4618      	mov	r0, r3
 800536a:	f7fe ffa3 	bl	80042b4 <vl53l5cx_set_detection_thresholds>
 800536e:	4603      	mov	r3, r0
 8005370:	461a      	mov	r2, r3
 8005372:	7abb      	ldrb	r3, [r7, #10]
 8005374:	4313      	orrs	r3, r2
 8005376:	72bb      	strb	r3, [r7, #10]

    /* enable thresholds detection */
    status |= vl53l5cx_set_detection_thresholds_enable(&pObj->Dev, 1U);
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	3318      	adds	r3, #24
 800537c:	2101      	movs	r1, #1
 800537e:	4618      	mov	r0, r3
 8005380:	f7fe ff52 	bl	8004228 <vl53l5cx_set_detection_thresholds_enable>
 8005384:	4603      	mov	r3, r0
 8005386:	461a      	mov	r2, r3
 8005388:	7abb      	ldrb	r3, [r7, #10]
 800538a:	4313      	orrs	r3, r2
 800538c:	72bb      	strb	r3, [r7, #10]

    ret = (status != 0U) ? VL53L5CX_ERROR : VL53L5CX_OK;
 800538e:	7abb      	ldrb	r3, [r7, #10]
 8005390:	2b00      	cmp	r3, #0
 8005392:	d002      	beq.n	800539a <VL53L5CX_ConfigIT+0x15e>
 8005394:	f04f 33ff 	mov.w	r3, #4294967295
 8005398:	e000      	b.n	800539c <VL53L5CX_ConfigIT+0x160>
 800539a:	2300      	movs	r3, #0
 800539c:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 800539e:	68fb      	ldr	r3, [r7, #12]
}
 80053a0:	4618      	mov	r0, r3
 80053a2:	3710      	adds	r7, #16
 80053a4:	46bd      	mov	sp, r7
 80053a6:	bd80      	pop	{r7, pc}
 80053a8:	20001dd0 	.word	0x20001dd0

080053ac <VL53L5CX_GetDistance>:
  * @param pObj    vl53l5cx context object.
  * @param pResult    Pointer to the result struct.
  * @retval VL53L5CX status
  */
int32_t VL53L5CX_GetDistance(VL53L5CX_Object_t *pObj, VL53L5CX_Result_t *pResult)
{
 80053ac:	b580      	push	{r7, lr}
 80053ae:	b084      	sub	sp, #16
 80053b0:	af00      	add	r7, sp, #0
 80053b2:	6078      	str	r0, [r7, #4]
 80053b4:	6039      	str	r1, [r7, #0]
  int32_t ret;

  if ((pObj == NULL) || (pResult == NULL))
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	2b00      	cmp	r3, #0
 80053ba:	d002      	beq.n	80053c2 <VL53L5CX_GetDistance+0x16>
 80053bc:	683b      	ldr	r3, [r7, #0]
 80053be:	2b00      	cmp	r3, #0
 80053c0:	d103      	bne.n	80053ca <VL53L5CX_GetDistance+0x1e>
  {
    ret = VL53L5CX_INVALID_PARAM;
 80053c2:	f06f 0301 	mvn.w	r3, #1
 80053c6:	60fb      	str	r3, [r7, #12]
 80053c8:	e019      	b.n	80053fe <VL53L5CX_GetDistance+0x52>
  }
  else if (pObj->IsRanging == 0U)
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	f893 394d 	ldrb.w	r3, [r3, #2381]	; 0x94d
 80053d0:	2b00      	cmp	r3, #0
 80053d2:	d103      	bne.n	80053dc <VL53L5CX_GetDistance+0x30>
  {
    ret = VL53L5CX_ERROR;
 80053d4:	f04f 33ff 	mov.w	r3, #4294967295
 80053d8:	60fb      	str	r3, [r7, #12]
 80053da:	e010      	b.n	80053fe <VL53L5CX_GetDistance+0x52>
  }
  else
  {
    if (pObj->IsBlocking == 1U)
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	f893 394e 	ldrb.w	r3, [r3, #2382]	; 0x94e
 80053e2:	2b01      	cmp	r3, #1
 80053e4:	d106      	bne.n	80053f4 <VL53L5CX_GetDistance+0x48>
    {
      ret = vl53l5cx_poll_for_measurement(pObj, V53L5CX_POLL_TIMEOUT);
 80053e6:	f241 3188 	movw	r1, #5000	; 0x1388
 80053ea:	6878      	ldr	r0, [r7, #4]
 80053ec:	f000 f95b 	bl	80056a6 <vl53l5cx_poll_for_measurement>
 80053f0:	60f8      	str	r0, [r7, #12]
 80053f2:	e004      	b.n	80053fe <VL53L5CX_GetDistance+0x52>
    }
    else
    {
      ret = vl53l5cx_poll_for_measurement(pObj, 0U);
 80053f4:	2100      	movs	r1, #0
 80053f6:	6878      	ldr	r0, [r7, #4]
 80053f8:	f000 f955 	bl	80056a6 <vl53l5cx_poll_for_measurement>
 80053fc:	60f8      	str	r0, [r7, #12]
    }
  }

  /* a new measure is available if no error is returned by the poll function */
  if (ret == VL53L5CX_OK)
 80053fe:	68fb      	ldr	r3, [r7, #12]
 8005400:	2b00      	cmp	r3, #0
 8005402:	d104      	bne.n	800540e <VL53L5CX_GetDistance+0x62>
  {
    ret = vl53l5cx_get_result(pObj, pResult);
 8005404:	6839      	ldr	r1, [r7, #0]
 8005406:	6878      	ldr	r0, [r7, #4]
 8005408:	f000 f980 	bl	800570c <vl53l5cx_get_result>
 800540c:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 800540e:	68fb      	ldr	r3, [r7, #12]
}
 8005410:	4618      	mov	r0, r3
 8005412:	3710      	adds	r7, #16
 8005414:	46bd      	mov	sp, r7
 8005416:	bd80      	pop	{r7, pc}

08005418 <VL53L5CX_Start>:
  * @param pObj    vl53l5cx context object.
  * @param Mode        The desired @ref RANGING_SENSOR_Mode_t
  * @retval VL53L5CX status
  */
int32_t VL53L5CX_Start(VL53L5CX_Object_t *pObj, uint32_t Mode)
{
 8005418:	b580      	push	{r7, lr}
 800541a:	b084      	sub	sp, #16
 800541c:	af00      	add	r7, sp, #0
 800541e:	6078      	str	r0, [r7, #4]
 8005420:	6039      	str	r1, [r7, #0]
  int32_t ret;

  if (pObj == NULL)
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	2b00      	cmp	r3, #0
 8005426:	d103      	bne.n	8005430 <VL53L5CX_Start+0x18>
  {
    ret = VL53L5CX_INVALID_PARAM;
 8005428:	f06f 0301 	mvn.w	r3, #1
 800542c:	60fb      	str	r3, [r7, #12]
 800542e:	e04c      	b.n	80054ca <VL53L5CX_Start+0xb2>
  }
  else if (vl53l5cx_start_ranging(&pObj->Dev) == VL53L5CX_STATUS_OK)
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	3318      	adds	r3, #24
 8005434:	4618      	mov	r0, r3
 8005436:	f7fd fe73 	bl	8003120 <vl53l5cx_start_ranging>
 800543a:	4603      	mov	r3, r0
 800543c:	2b00      	cmp	r3, #0
 800543e:	d141      	bne.n	80054c4 <VL53L5CX_Start+0xac>
  {
    pObj->IsRanging = 1U;
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	2201      	movs	r2, #1
 8005444:	f883 294d 	strb.w	r2, [r3, #2381]	; 0x94d
    ret = VL53L5CX_OK;
 8005448:	2300      	movs	r3, #0
 800544a:	60fb      	str	r3, [r7, #12]

    switch (Mode)
 800544c:	683b      	ldr	r3, [r7, #0]
 800544e:	3b01      	subs	r3, #1
 8005450:	2b03      	cmp	r3, #3
 8005452:	d82f      	bhi.n	80054b4 <VL53L5CX_Start+0x9c>
 8005454:	a201      	add	r2, pc, #4	; (adr r2, 800545c <VL53L5CX_Start+0x44>)
 8005456:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800545a:	bf00      	nop
 800545c:	0800546d 	.word	0x0800546d
 8005460:	0800547f 	.word	0x0800547f
 8005464:	08005491 	.word	0x08005491
 8005468:	080054a3 	.word	0x080054a3
    {
      case VL53L5CX_MODE_BLOCKING_CONTINUOUS:
        pObj->IsContinuous = 1U;
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	2201      	movs	r2, #1
 8005470:	f883 294f 	strb.w	r2, [r3, #2383]	; 0x94f
        pObj->IsBlocking = 1U;
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	2201      	movs	r2, #1
 8005478:	f883 294e 	strb.w	r2, [r3, #2382]	; 0x94e
        break;
 800547c:	e025      	b.n	80054ca <VL53L5CX_Start+0xb2>

      case VL53L5CX_MODE_BLOCKING_ONESHOT:
        pObj->IsContinuous = 0U;
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	2200      	movs	r2, #0
 8005482:	f883 294f 	strb.w	r2, [r3, #2383]	; 0x94f
        pObj->IsBlocking = 1U;
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	2201      	movs	r2, #1
 800548a:	f883 294e 	strb.w	r2, [r3, #2382]	; 0x94e
        break;
 800548e:	e01c      	b.n	80054ca <VL53L5CX_Start+0xb2>

      case VL53L5CX_MODE_ASYNC_CONTINUOUS:
        pObj->IsContinuous = 1U;
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	2201      	movs	r2, #1
 8005494:	f883 294f 	strb.w	r2, [r3, #2383]	; 0x94f
        pObj->IsBlocking = 0U;
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	2200      	movs	r2, #0
 800549c:	f883 294e 	strb.w	r2, [r3, #2382]	; 0x94e
        break;
 80054a0:	e013      	b.n	80054ca <VL53L5CX_Start+0xb2>

      case VL53L5CX_MODE_ASYNC_ONESHOT:
        pObj->IsContinuous = 0U;
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	2200      	movs	r2, #0
 80054a6:	f883 294f 	strb.w	r2, [r3, #2383]	; 0x94f
        pObj->IsBlocking = 0U;
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	2200      	movs	r2, #0
 80054ae:	f883 294e 	strb.w	r2, [r3, #2382]	; 0x94e
        break;
 80054b2:	e00a      	b.n	80054ca <VL53L5CX_Start+0xb2>

      default:
        pObj->IsRanging = 0U;
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	2200      	movs	r2, #0
 80054b8:	f883 294d 	strb.w	r2, [r3, #2381]	; 0x94d
        ret = VL53L5CX_INVALID_PARAM;
 80054bc:	f06f 0301 	mvn.w	r3, #1
 80054c0:	60fb      	str	r3, [r7, #12]
        break;
 80054c2:	e002      	b.n	80054ca <VL53L5CX_Start+0xb2>
    }
  }
  else
  {
    ret = VL53L5CX_ERROR;
 80054c4:	f04f 33ff 	mov.w	r3, #4294967295
 80054c8:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 80054ca:	68fb      	ldr	r3, [r7, #12]
}
 80054cc:	4618      	mov	r0, r3
 80054ce:	3710      	adds	r7, #16
 80054d0:	46bd      	mov	sp, r7
 80054d2:	bd80      	pop	{r7, pc}

080054d4 <VL53L5CX_Stop>:
  * @brief Stop ranging.
  * @param pObj    vl53l5cx context object.
  * @retval VL53L5CX status
  */
int32_t VL53L5CX_Stop(VL53L5CX_Object_t *pObj)
{
 80054d4:	b580      	push	{r7, lr}
 80054d6:	b084      	sub	sp, #16
 80054d8:	af00      	add	r7, sp, #0
 80054da:	6078      	str	r0, [r7, #4]
  int32_t ret;

  if (pObj == NULL)
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	2b00      	cmp	r3, #0
 80054e0:	d103      	bne.n	80054ea <VL53L5CX_Stop+0x16>
  {
    ret = VL53L5CX_INVALID_PARAM;
 80054e2:	f06f 0301 	mvn.w	r3, #1
 80054e6:	60fb      	str	r3, [r7, #12]
 80054e8:	e01a      	b.n	8005520 <VL53L5CX_Stop+0x4c>
  }
  else if (pObj->IsRanging == 0U)
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	f893 394d 	ldrb.w	r3, [r3, #2381]	; 0x94d
 80054f0:	2b00      	cmp	r3, #0
 80054f2:	d103      	bne.n	80054fc <VL53L5CX_Stop+0x28>
  {
    /* ranging not started */
    ret = VL53L5CX_ERROR;
 80054f4:	f04f 33ff 	mov.w	r3, #4294967295
 80054f8:	60fb      	str	r3, [r7, #12]
 80054fa:	e011      	b.n	8005520 <VL53L5CX_Stop+0x4c>
  }
  else if (vl53l5cx_stop_ranging(&pObj->Dev) == VL53L5CX_STATUS_OK)
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	3318      	adds	r3, #24
 8005500:	4618      	mov	r0, r3
 8005502:	f7fd ff81 	bl	8003408 <vl53l5cx_stop_ranging>
 8005506:	4603      	mov	r3, r0
 8005508:	2b00      	cmp	r3, #0
 800550a:	d106      	bne.n	800551a <VL53L5CX_Stop+0x46>
  {
    pObj->IsRanging = 0U;
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	2200      	movs	r2, #0
 8005510:	f883 294d 	strb.w	r2, [r3, #2381]	; 0x94d
    ret = VL53L5CX_OK;
 8005514:	2300      	movs	r3, #0
 8005516:	60fb      	str	r3, [r7, #12]
 8005518:	e002      	b.n	8005520 <VL53L5CX_Stop+0x4c>
  }
  else
  {
    ret = VL53L5CX_ERROR;
 800551a:	f04f 33ff 	mov.w	r3, #4294967295
 800551e:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 8005520:	68fb      	ldr	r3, [r7, #12]
}
 8005522:	4618      	mov	r0, r3
 8005524:	3710      	adds	r7, #16
 8005526:	46bd      	mov	sp, r7
 8005528:	bd80      	pop	{r7, pc}

0800552a <VL53L5CX_SetAddress>:
  * @param pObj    vl53l5cx context object.
  * @param Address     New I2C address.
  * @retval VL53L5CX status
  */
int32_t VL53L5CX_SetAddress(VL53L5CX_Object_t *pObj, uint32_t Address)
{
 800552a:	b580      	push	{r7, lr}
 800552c:	b084      	sub	sp, #16
 800552e:	af00      	add	r7, sp, #0
 8005530:	6078      	str	r0, [r7, #4]
 8005532:	6039      	str	r1, [r7, #0]
  int32_t ret;

  if (pObj == NULL)
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	2b00      	cmp	r3, #0
 8005538:	d103      	bne.n	8005542 <VL53L5CX_SetAddress+0x18>
  {
    ret = VL53L5CX_INVALID_PARAM;
 800553a:	f06f 0301 	mvn.w	r3, #1
 800553e:	60fb      	str	r3, [r7, #12]
 8005540:	e016      	b.n	8005570 <VL53L5CX_SetAddress+0x46>
  }
  else if (vl53l5cx_set_i2c_address(&pObj->Dev, (uint8_t)Address) != VL53L5CX_STATUS_OK)
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	3318      	adds	r3, #24
 8005546:	683a      	ldr	r2, [r7, #0]
 8005548:	b2d2      	uxtb	r2, r2
 800554a:	b292      	uxth	r2, r2
 800554c:	4611      	mov	r1, r2
 800554e:	4618      	mov	r0, r3
 8005550:	f7fd fcee 	bl	8002f30 <vl53l5cx_set_i2c_address>
 8005554:	4603      	mov	r3, r0
 8005556:	2b00      	cmp	r3, #0
 8005558:	d003      	beq.n	8005562 <VL53L5CX_SetAddress+0x38>
  {
    ret = VL53L5CX_ERROR;
 800555a:	f04f 33ff 	mov.w	r3, #4294967295
 800555e:	60fb      	str	r3, [r7, #12]
 8005560:	e006      	b.n	8005570 <VL53L5CX_SetAddress+0x46>
  }
  else
  {
    pObj->IO.Address = (uint8_t)(Address & 0xFFU);
 8005562:	683b      	ldr	r3, [r7, #0]
 8005564:	b2db      	uxtb	r3, r3
 8005566:	b29a      	uxth	r2, r3
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	811a      	strh	r2, [r3, #8]
    ret = VL53L5CX_OK;
 800556c:	2300      	movs	r3, #0
 800556e:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 8005570:	68fb      	ldr	r3, [r7, #12]
}
 8005572:	4618      	mov	r0, r3
 8005574:	3710      	adds	r7, #16
 8005576:	46bd      	mov	sp, r7
 8005578:	bd80      	pop	{r7, pc}

0800557a <VL53L5CX_GetAddress>:
  * @param pObj    vl53l5cx context object.
  * @param *pAddress     New I2C address.
  * @retval VL53L5CX status
  */
int32_t VL53L5CX_GetAddress(VL53L5CX_Object_t *pObj, uint32_t *pAddress)
{
 800557a:	b480      	push	{r7}
 800557c:	b085      	sub	sp, #20
 800557e:	af00      	add	r7, sp, #0
 8005580:	6078      	str	r0, [r7, #4]
 8005582:	6039      	str	r1, [r7, #0]
  int32_t ret;

  if ((pObj == NULL) || (pAddress == NULL))
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	2b00      	cmp	r3, #0
 8005588:	d002      	beq.n	8005590 <VL53L5CX_GetAddress+0x16>
 800558a:	683b      	ldr	r3, [r7, #0]
 800558c:	2b00      	cmp	r3, #0
 800558e:	d103      	bne.n	8005598 <VL53L5CX_GetAddress+0x1e>
  {
    ret = VL53L5CX_INVALID_PARAM;
 8005590:	f06f 0301 	mvn.w	r3, #1
 8005594:	60fb      	str	r3, [r7, #12]
 8005596:	e006      	b.n	80055a6 <VL53L5CX_GetAddress+0x2c>
  }
  else
  {
    *pAddress = pObj->IO.Address;
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	891b      	ldrh	r3, [r3, #8]
 800559c:	461a      	mov	r2, r3
 800559e:	683b      	ldr	r3, [r7, #0]
 80055a0:	601a      	str	r2, [r3, #0]
    ret = VL53L5CX_OK;
 80055a2:	2300      	movs	r3, #0
 80055a4:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 80055a6:	68fb      	ldr	r3, [r7, #12]
}
 80055a8:	4618      	mov	r0, r3
 80055aa:	3714      	adds	r7, #20
 80055ac:	46bd      	mov	sp, r7
 80055ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055b2:	4770      	bx	lr

080055b4 <VL53L5CX_SetPowerMode>:
  * @param pObj    vl53l5cx context object.
  * @param PowerMode    New power mode to be entered.
  * @retval VL53L5CX status
  */
int32_t VL53L5CX_SetPowerMode(VL53L5CX_Object_t *pObj, uint32_t PowerMode)
{
 80055b4:	b580      	push	{r7, lr}
 80055b6:	b084      	sub	sp, #16
 80055b8:	af00      	add	r7, sp, #0
 80055ba:	6078      	str	r0, [r7, #4]
 80055bc:	6039      	str	r1, [r7, #0]
  int32_t ret;

  if (pObj == NULL)
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	2b00      	cmp	r3, #0
 80055c2:	d103      	bne.n	80055cc <VL53L5CX_SetPowerMode+0x18>
  {
    ret = VL53L5CX_INVALID_PARAM;
 80055c4:	f06f 0301 	mvn.w	r3, #1
 80055c8:	60fb      	str	r3, [r7, #12]
 80055ca:	e01a      	b.n	8005602 <VL53L5CX_SetPowerMode+0x4e>
  }
  else if ((PowerMode != VL53L5CX_POWER_MODE_SLEEP) &&
 80055cc:	683b      	ldr	r3, [r7, #0]
 80055ce:	2b00      	cmp	r3, #0
 80055d0:	d006      	beq.n	80055e0 <VL53L5CX_SetPowerMode+0x2c>
 80055d2:	683b      	ldr	r3, [r7, #0]
 80055d4:	2b01      	cmp	r3, #1
 80055d6:	d003      	beq.n	80055e0 <VL53L5CX_SetPowerMode+0x2c>
           (PowerMode != VL53L5CX_POWER_MODE_WAKEUP))
  {
    ret = VL53L5CX_INVALID_PARAM;
 80055d8:	f06f 0301 	mvn.w	r3, #1
 80055dc:	60fb      	str	r3, [r7, #12]
 80055de:	e010      	b.n	8005602 <VL53L5CX_SetPowerMode+0x4e>
  }
  else if (vl53l5cx_set_power_mode(&pObj->Dev, (uint8_t)PowerMode) != VL53L5CX_STATUS_OK)
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	3318      	adds	r3, #24
 80055e4:	683a      	ldr	r2, [r7, #0]
 80055e6:	b2d2      	uxtb	r2, r2
 80055e8:	4611      	mov	r1, r2
 80055ea:	4618      	mov	r0, r3
 80055ec:	f7fd fd19 	bl	8003022 <vl53l5cx_set_power_mode>
 80055f0:	4603      	mov	r3, r0
 80055f2:	2b00      	cmp	r3, #0
 80055f4:	d003      	beq.n	80055fe <VL53L5CX_SetPowerMode+0x4a>
  {
    ret = VL53L5CX_ERROR;
 80055f6:	f04f 33ff 	mov.w	r3, #4294967295
 80055fa:	60fb      	str	r3, [r7, #12]
 80055fc:	e001      	b.n	8005602 <VL53L5CX_SetPowerMode+0x4e>
  }
  else
  {
    ret = VL53L5CX_OK;
 80055fe:	2300      	movs	r3, #0
 8005600:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 8005602:	68fb      	ldr	r3, [r7, #12]
}
 8005604:	4618      	mov	r0, r3
 8005606:	3710      	adds	r7, #16
 8005608:	46bd      	mov	sp, r7
 800560a:	bd80      	pop	{r7, pc}

0800560c <VL53L5CX_GetPowerMode>:
  * @param pObj    vl53l5cx context object.
  * @param *pPowerMode    pointer to variable to be filled with power mode value.
  * @retval VL53L5CX status
  */
int32_t VL53L5CX_GetPowerMode(VL53L5CX_Object_t *pObj, uint32_t *pPowerMode)
{
 800560c:	b580      	push	{r7, lr}
 800560e:	b084      	sub	sp, #16
 8005610:	af00      	add	r7, sp, #0
 8005612:	6078      	str	r0, [r7, #4]
 8005614:	6039      	str	r1, [r7, #0]
  int32_t ret;
  uint8_t powermode;

  if ((pObj == NULL) || (pPowerMode == NULL))
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	2b00      	cmp	r3, #0
 800561a:	d002      	beq.n	8005622 <VL53L5CX_GetPowerMode+0x16>
 800561c:	683b      	ldr	r3, [r7, #0]
 800561e:	2b00      	cmp	r3, #0
 8005620:	d103      	bne.n	800562a <VL53L5CX_GetPowerMode+0x1e>
  {
    ret = VL53L5CX_INVALID_PARAM;
 8005622:	f06f 0301 	mvn.w	r3, #1
 8005626:	60fb      	str	r3, [r7, #12]
 8005628:	e017      	b.n	800565a <VL53L5CX_GetPowerMode+0x4e>
  }
  else if (vl53l5cx_get_power_mode(&pObj->Dev, &powermode) != VL53L5CX_STATUS_OK)
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	3318      	adds	r3, #24
 800562e:	f107 020b 	add.w	r2, r7, #11
 8005632:	4611      	mov	r1, r2
 8005634:	4618      	mov	r0, r3
 8005636:	f7fd fcb1 	bl	8002f9c <vl53l5cx_get_power_mode>
 800563a:	4603      	mov	r3, r0
 800563c:	2b00      	cmp	r3, #0
 800563e:	d006      	beq.n	800564e <VL53L5CX_GetPowerMode+0x42>
  {
    *pPowerMode = 0;
 8005640:	683b      	ldr	r3, [r7, #0]
 8005642:	2200      	movs	r2, #0
 8005644:	601a      	str	r2, [r3, #0]
    ret = VL53L5CX_ERROR;
 8005646:	f04f 33ff 	mov.w	r3, #4294967295
 800564a:	60fb      	str	r3, [r7, #12]
 800564c:	e005      	b.n	800565a <VL53L5CX_GetPowerMode+0x4e>
  }
  else
  {
    *pPowerMode = (uint32_t)powermode;
 800564e:	7afb      	ldrb	r3, [r7, #11]
 8005650:	461a      	mov	r2, r3
 8005652:	683b      	ldr	r3, [r7, #0]
 8005654:	601a      	str	r2, [r3, #0]
    ret = VL53L5CX_OK;
 8005656:	2300      	movs	r3, #0
 8005658:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 800565a:	68fb      	ldr	r3, [r7, #12]
}
 800565c:	4618      	mov	r0, r3
 800565e:	3710      	adds	r7, #16
 8005660:	46bd      	mov	sp, r7
 8005662:	bd80      	pop	{r7, pc}

08005664 <VL53L5CX_XTalkCalibration>:
  * @param Distance    Target distance in mm (range 600 - 3000 mm).
  * @note The recommended target reflectance value for Xtalk calibration is 3 %.
  * @retval VL53L5CX status
  */
int32_t VL53L5CX_XTalkCalibration(VL53L5CX_Object_t *pObj, uint16_t Reflectance, uint16_t Distance)
{
 8005664:	b580      	push	{r7, lr}
 8005666:	b084      	sub	sp, #16
 8005668:	af00      	add	r7, sp, #0
 800566a:	6078      	str	r0, [r7, #4]
 800566c:	460b      	mov	r3, r1
 800566e:	807b      	strh	r3, [r7, #2]
 8005670:	4613      	mov	r3, r2
 8005672:	803b      	strh	r3, [r7, #0]
  uint8_t status;

  /* Number of data samples used for calibration.
   * A higher number of samples means a higher accuracy,
   * but it increases the calibration time (range 1 - 16). */
  uint8_t nb_samples = 2;
 8005674:	2302      	movs	r3, #2
 8005676:	73fb      	strb	r3, [r7, #15]

  status = vl53l5cx_calibrate_xtalk(
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	f103 0018 	add.w	r0, r3, #24
 800567e:	883b      	ldrh	r3, [r7, #0]
 8005680:	7bfa      	ldrb	r2, [r7, #15]
 8005682:	8879      	ldrh	r1, [r7, #2]
 8005684:	f7ff f89a 	bl	80047bc <vl53l5cx_calibrate_xtalk>
 8005688:	4603      	mov	r3, r0
 800568a:	73bb      	strb	r3, [r7, #14]
      &pObj->Dev,
      Reflectance,
      nb_samples,
      Distance);

  ret = (status == VL53L5CX_STATUS_OK) ? VL53L5CX_OK : VL53L5CX_ERROR;
 800568c:	7bbb      	ldrb	r3, [r7, #14]
 800568e:	2b00      	cmp	r3, #0
 8005690:	d101      	bne.n	8005696 <VL53L5CX_XTalkCalibration+0x32>
 8005692:	2300      	movs	r3, #0
 8005694:	e001      	b.n	800569a <VL53L5CX_XTalkCalibration+0x36>
 8005696:	f04f 33ff 	mov.w	r3, #4294967295
 800569a:	60bb      	str	r3, [r7, #8]

  return ret;
 800569c:	68bb      	ldr	r3, [r7, #8]
}
 800569e:	4618      	mov	r0, r3
 80056a0:	3710      	adds	r7, #16
 80056a2:	46bd      	mov	sp, r7
 80056a4:	bd80      	pop	{r7, pc}

080056a6 <vl53l5cx_poll_for_measurement>:

/** @defgroup VL53L5CX_Private_Functions Private Functions
  * @{
  */
static int32_t vl53l5cx_poll_for_measurement(VL53L5CX_Object_t *pObj, uint32_t Timeout)
{
 80056a6:	b580      	push	{r7, lr}
 80056a8:	b086      	sub	sp, #24
 80056aa:	af00      	add	r7, sp, #0
 80056ac:	6078      	str	r0, [r7, #4]
 80056ae:	6039      	str	r1, [r7, #0]
  int32_t ret;
  uint32_t TickStart;
  uint8_t NewDataReady = 0;
 80056b0:	2300      	movs	r3, #0
 80056b2:	73fb      	strb	r3, [r7, #15]

  if (pObj == NULL)
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	2b00      	cmp	r3, #0
 80056b8:	d103      	bne.n	80056c2 <vl53l5cx_poll_for_measurement+0x1c>
  {
    ret = VL53L5CX_INVALID_PARAM;
 80056ba:	f06f 0301 	mvn.w	r3, #1
 80056be:	617b      	str	r3, [r7, #20]
 80056c0:	e01f      	b.n	8005702 <vl53l5cx_poll_for_measurement+0x5c>
  }
  else
  {
    ret =  VL53L5CX_TIMEOUT;
 80056c2:	f06f 0302 	mvn.w	r3, #2
 80056c6:	617b      	str	r3, [r7, #20]
    TickStart = pObj->IO.GetTick();
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	695b      	ldr	r3, [r3, #20]
 80056cc:	4798      	blx	r3
 80056ce:	4603      	mov	r3, r0
 80056d0:	613b      	str	r3, [r7, #16]

    do
    {
      (void)vl53l5cx_check_data_ready(&pObj->Dev, &NewDataReady);
 80056d2:	687b      	ldr	r3, [r7, #4]
 80056d4:	3318      	adds	r3, #24
 80056d6:	f107 020f 	add.w	r2, r7, #15
 80056da:	4611      	mov	r1, r2
 80056dc:	4618      	mov	r0, r3
 80056de:	f7fd ff5e 	bl	800359e <vl53l5cx_check_data_ready>

      if (NewDataReady == 1U)
 80056e2:	7bfb      	ldrb	r3, [r7, #15]
 80056e4:	2b01      	cmp	r3, #1
 80056e6:	d102      	bne.n	80056ee <vl53l5cx_poll_for_measurement+0x48>
      {
        ret = VL53L5CX_OK;
 80056e8:	2300      	movs	r3, #0
 80056ea:	617b      	str	r3, [r7, #20]
        break;
 80056ec:	e009      	b.n	8005702 <vl53l5cx_poll_for_measurement+0x5c>
      }
    } while ((pObj->IO.GetTick() - TickStart) < Timeout);
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	695b      	ldr	r3, [r3, #20]
 80056f2:	4798      	blx	r3
 80056f4:	4603      	mov	r3, r0
 80056f6:	461a      	mov	r2, r3
 80056f8:	693b      	ldr	r3, [r7, #16]
 80056fa:	1ad3      	subs	r3, r2, r3
 80056fc:	683a      	ldr	r2, [r7, #0]
 80056fe:	429a      	cmp	r2, r3
 8005700:	d8e7      	bhi.n	80056d2 <vl53l5cx_poll_for_measurement+0x2c>

  }

  return ret;
 8005702:	697b      	ldr	r3, [r7, #20]
}
 8005704:	4618      	mov	r0, r3
 8005706:	3718      	adds	r7, #24
 8005708:	46bd      	mov	sp, r7
 800570a:	bd80      	pop	{r7, pc}

0800570c <vl53l5cx_get_result>:

static int32_t vl53l5cx_get_result(VL53L5CX_Object_t *pObj, VL53L5CX_Result_t *pResult)
{
 800570c:	b590      	push	{r4, r7, lr}
 800570e:	b085      	sub	sp, #20
 8005710:	af00      	add	r7, sp, #0
 8005712:	6078      	str	r0, [r7, #4]
 8005714:	6039      	str	r1, [r7, #0]
  uint8_t i, j;
  uint8_t resolution;
  uint8_t target_status;
  static VL53L5CX_ResultsData data;

  if ((pObj == NULL) || (pResult == NULL))
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	2b00      	cmp	r3, #0
 800571a:	d002      	beq.n	8005722 <vl53l5cx_get_result+0x16>
 800571c:	683b      	ldr	r3, [r7, #0]
 800571e:	2b00      	cmp	r3, #0
 8005720:	d103      	bne.n	800572a <vl53l5cx_get_result+0x1e>
  {
    ret = VL53L5CX_INVALID_PARAM;
 8005722:	f06f 0301 	mvn.w	r3, #1
 8005726:	60fb      	str	r3, [r7, #12]
 8005728:	e0cf      	b.n	80058ca <vl53l5cx_get_result+0x1be>
  }
  else if (vl53l5cx_get_resolution(&pObj->Dev, &resolution) != VL53L5CX_STATUS_OK)
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	3318      	adds	r3, #24
 800572e:	f107 0208 	add.w	r2, r7, #8
 8005732:	4611      	mov	r1, r2
 8005734:	4618      	mov	r0, r3
 8005736:	f7fe f959 	bl	80039ec <vl53l5cx_get_resolution>
 800573a:	4603      	mov	r3, r0
 800573c:	2b00      	cmp	r3, #0
 800573e:	d003      	beq.n	8005748 <vl53l5cx_get_result+0x3c>
  {
    ret = VL53L5CX_ERROR;
 8005740:	f04f 33ff 	mov.w	r3, #4294967295
 8005744:	60fb      	str	r3, [r7, #12]
 8005746:	e0c0      	b.n	80058ca <vl53l5cx_get_result+0x1be>
  }
  else if (vl53l5cx_get_ranging_data(&pObj->Dev, &data) != VL53L5CX_STATUS_OK)
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	3318      	adds	r3, #24
 800574c:	4961      	ldr	r1, [pc, #388]	; (80058d4 <vl53l5cx_get_result+0x1c8>)
 800574e:	4618      	mov	r0, r3
 8005750:	f7fd ff76 	bl	8003640 <vl53l5cx_get_ranging_data>
 8005754:	4603      	mov	r3, r0
 8005756:	2b00      	cmp	r3, #0
 8005758:	d003      	beq.n	8005762 <vl53l5cx_get_result+0x56>
  {
    ret = VL53L5CX_ERROR;
 800575a:	f04f 33ff 	mov.w	r3, #4294967295
 800575e:	60fb      	str	r3, [r7, #12]
 8005760:	e0b3      	b.n	80058ca <vl53l5cx_get_result+0x1be>
  }
  else
  {
    pResult->NumberOfZones = resolution;
 8005762:	7a3b      	ldrb	r3, [r7, #8]
 8005764:	461a      	mov	r2, r3
 8005766:	683b      	ldr	r3, [r7, #0]
 8005768:	601a      	str	r2, [r3, #0]

    for (i = 0; i < resolution; i++)
 800576a:	2300      	movs	r3, #0
 800576c:	72fb      	strb	r3, [r7, #11]
 800576e:	e0a5      	b.n	80058bc <vl53l5cx_get_result+0x1b0>
    {
      pResult->ZoneResult[i].NumberOfTargets = data.nb_target_detected[i];
 8005770:	7afb      	ldrb	r3, [r7, #11]
 8005772:	7afa      	ldrb	r2, [r7, #11]
 8005774:	4957      	ldr	r1, [pc, #348]	; (80058d4 <vl53l5cx_get_result+0x1c8>)
 8005776:	440b      	add	r3, r1
 8005778:	f893 0104 	ldrb.w	r0, [r3, #260]	; 0x104
 800577c:	6839      	ldr	r1, [r7, #0]
 800577e:	4613      	mov	r3, r2
 8005780:	009b      	lsls	r3, r3, #2
 8005782:	4413      	add	r3, r2
 8005784:	009b      	lsls	r3, r3, #2
 8005786:	440b      	add	r3, r1
 8005788:	3304      	adds	r3, #4
 800578a:	4602      	mov	r2, r0
 800578c:	701a      	strb	r2, [r3, #0]

      for (j = 0; j < data.nb_target_detected[i]; j++)
 800578e:	2300      	movs	r3, #0
 8005790:	72bb      	strb	r3, [r7, #10]
 8005792:	e087      	b.n	80058a4 <vl53l5cx_get_result+0x198>
      {
        pResult->ZoneResult[i].Distance[j] = (uint32_t)data.distance_mm[(VL53L5CX_NB_TARGET_PER_ZONE * i) + j];
 8005794:	7afa      	ldrb	r2, [r7, #11]
 8005796:	7abb      	ldrb	r3, [r7, #10]
 8005798:	4413      	add	r3, r2
 800579a:	4a4e      	ldr	r2, [pc, #312]	; (80058d4 <vl53l5cx_get_result+0x1c8>)
 800579c:	f503 7390 	add.w	r3, r3, #288	; 0x120
 80057a0:	005b      	lsls	r3, r3, #1
 80057a2:	4413      	add	r3, r2
 80057a4:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80057a8:	7afa      	ldrb	r2, [r7, #11]
 80057aa:	7ab8      	ldrb	r0, [r7, #10]
 80057ac:	461c      	mov	r4, r3
 80057ae:	6839      	ldr	r1, [r7, #0]
 80057b0:	4613      	mov	r3, r2
 80057b2:	009b      	lsls	r3, r3, #2
 80057b4:	4413      	add	r3, r2
 80057b6:	4403      	add	r3, r0
 80057b8:	009b      	lsls	r3, r3, #2
 80057ba:	440b      	add	r3, r1
 80057bc:	609c      	str	r4, [r3, #8]

        /* return Ambient value if ambient rate output is enabled */
        if (pObj->IsAmbientEnabled == 1U)
 80057be:	687b      	ldr	r3, [r7, #4]
 80057c0:	f893 3950 	ldrb.w	r3, [r3, #2384]	; 0x950
 80057c4:	2b01      	cmp	r3, #1
 80057c6:	d116      	bne.n	80057f6 <vl53l5cx_get_result+0xea>
        {
          /* apply ambient value to all targets in a given zone */
          pResult->ZoneResult[i].Ambient[j] = (float_t)data.ambient_per_spad[i];
 80057c8:	7afb      	ldrb	r3, [r7, #11]
 80057ca:	4a42      	ldr	r2, [pc, #264]	; (80058d4 <vl53l5cx_get_result+0x1c8>)
 80057cc:	009b      	lsls	r3, r3, #2
 80057ce:	4413      	add	r3, r2
 80057d0:	685b      	ldr	r3, [r3, #4]
 80057d2:	7afa      	ldrb	r2, [r7, #11]
 80057d4:	7ab8      	ldrb	r0, [r7, #10]
 80057d6:	ee07 3a90 	vmov	s15, r3
 80057da:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80057de:	6839      	ldr	r1, [r7, #0]
 80057e0:	4613      	mov	r3, r2
 80057e2:	009b      	lsls	r3, r3, #2
 80057e4:	4413      	add	r3, r2
 80057e6:	4403      	add	r3, r0
 80057e8:	3302      	adds	r3, #2
 80057ea:	009b      	lsls	r3, r3, #2
 80057ec:	440b      	add	r3, r1
 80057ee:	3308      	adds	r3, #8
 80057f0:	edc3 7a00 	vstr	s15, [r3]
 80057f4:	e00d      	b.n	8005812 <vl53l5cx_get_result+0x106>
        }
        else
        {
          pResult->ZoneResult[i].Ambient[j] = 0.0f;
 80057f6:	7afa      	ldrb	r2, [r7, #11]
 80057f8:	7ab8      	ldrb	r0, [r7, #10]
 80057fa:	6839      	ldr	r1, [r7, #0]
 80057fc:	4613      	mov	r3, r2
 80057fe:	009b      	lsls	r3, r3, #2
 8005800:	4413      	add	r3, r2
 8005802:	4403      	add	r3, r0
 8005804:	3302      	adds	r3, #2
 8005806:	009b      	lsls	r3, r3, #2
 8005808:	440b      	add	r3, r1
 800580a:	3308      	adds	r3, #8
 800580c:	f04f 0200 	mov.w	r2, #0
 8005810:	601a      	str	r2, [r3, #0]
        }

        /* return Signal value if signal rate output is enabled */
        if (pObj->IsSignalEnabled == 1U)
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	f893 3951 	ldrb.w	r3, [r3, #2385]	; 0x951
 8005818:	2b01      	cmp	r3, #1
 800581a:	d119      	bne.n	8005850 <vl53l5cx_get_result+0x144>
        {
          pResult->ZoneResult[i].Signal[j] =
            (float_t)data.signal_per_spad[(VL53L5CX_NB_TARGET_PER_ZONE * i) + j];
 800581c:	7afa      	ldrb	r2, [r7, #11]
 800581e:	7abb      	ldrb	r3, [r7, #10]
 8005820:	4413      	add	r3, r2
 8005822:	4a2c      	ldr	r2, [pc, #176]	; (80058d4 <vl53l5cx_get_result+0x1c8>)
 8005824:	3350      	adds	r3, #80	; 0x50
 8005826:	009b      	lsls	r3, r3, #2
 8005828:	4413      	add	r3, r2
 800582a:	685b      	ldr	r3, [r3, #4]
          pResult->ZoneResult[i].Signal[j] =
 800582c:	7afa      	ldrb	r2, [r7, #11]
 800582e:	7ab8      	ldrb	r0, [r7, #10]
            (float_t)data.signal_per_spad[(VL53L5CX_NB_TARGET_PER_ZONE * i) + j];
 8005830:	ee07 3a90 	vmov	s15, r3
 8005834:	eef8 7a67 	vcvt.f32.u32	s15, s15
          pResult->ZoneResult[i].Signal[j] =
 8005838:	6839      	ldr	r1, [r7, #0]
 800583a:	4613      	mov	r3, r2
 800583c:	009b      	lsls	r3, r3, #2
 800583e:	4413      	add	r3, r2
 8005840:	4403      	add	r3, r0
 8005842:	3304      	adds	r3, #4
 8005844:	009b      	lsls	r3, r3, #2
 8005846:	440b      	add	r3, r1
 8005848:	3304      	adds	r3, #4
 800584a:	edc3 7a00 	vstr	s15, [r3]
 800584e:	e00d      	b.n	800586c <vl53l5cx_get_result+0x160>
        }
        else
        {
          pResult->ZoneResult[i].Signal[j] = 0.0f;
 8005850:	7afa      	ldrb	r2, [r7, #11]
 8005852:	7ab8      	ldrb	r0, [r7, #10]
 8005854:	6839      	ldr	r1, [r7, #0]
 8005856:	4613      	mov	r3, r2
 8005858:	009b      	lsls	r3, r3, #2
 800585a:	4413      	add	r3, r2
 800585c:	4403      	add	r3, r0
 800585e:	3304      	adds	r3, #4
 8005860:	009b      	lsls	r3, r3, #2
 8005862:	440b      	add	r3, r1
 8005864:	3304      	adds	r3, #4
 8005866:	f04f 0200 	mov.w	r2, #0
 800586a:	601a      	str	r2, [r3, #0]
        }

        target_status = data.target_status[(VL53L5CX_NB_TARGET_PER_ZONE * i) + j];
 800586c:	7afa      	ldrb	r2, [r7, #11]
 800586e:	7abb      	ldrb	r3, [r7, #10]
 8005870:	4413      	add	r3, r2
 8005872:	4a18      	ldr	r2, [pc, #96]	; (80058d4 <vl53l5cx_get_result+0x1c8>)
 8005874:	4413      	add	r3, r2
 8005876:	f893 3304 	ldrb.w	r3, [r3, #772]	; 0x304
 800587a:	727b      	strb	r3, [r7, #9]
        pResult->ZoneResult[i].Status[j] = vl53l5cx_map_target_status(target_status);
 800587c:	7a7b      	ldrb	r3, [r7, #9]
 800587e:	4618      	mov	r0, r3
 8005880:	f000 f82a 	bl	80058d8 <vl53l5cx_map_target_status>
 8005884:	4603      	mov	r3, r0
 8005886:	7afa      	ldrb	r2, [r7, #11]
 8005888:	7ab8      	ldrb	r0, [r7, #10]
 800588a:	461c      	mov	r4, r3
 800588c:	6839      	ldr	r1, [r7, #0]
 800588e:	4613      	mov	r3, r2
 8005890:	009b      	lsls	r3, r3, #2
 8005892:	4413      	add	r3, r2
 8005894:	4403      	add	r3, r0
 8005896:	3302      	adds	r3, #2
 8005898:	009b      	lsls	r3, r3, #2
 800589a:	440b      	add	r3, r1
 800589c:	605c      	str	r4, [r3, #4]
      for (j = 0; j < data.nb_target_detected[i]; j++)
 800589e:	7abb      	ldrb	r3, [r7, #10]
 80058a0:	3301      	adds	r3, #1
 80058a2:	72bb      	strb	r3, [r7, #10]
 80058a4:	7afb      	ldrb	r3, [r7, #11]
 80058a6:	4a0b      	ldr	r2, [pc, #44]	; (80058d4 <vl53l5cx_get_result+0x1c8>)
 80058a8:	4413      	add	r3, r2
 80058aa:	f893 3104 	ldrb.w	r3, [r3, #260]	; 0x104
 80058ae:	7aba      	ldrb	r2, [r7, #10]
 80058b0:	429a      	cmp	r2, r3
 80058b2:	f4ff af6f 	bcc.w	8005794 <vl53l5cx_get_result+0x88>
    for (i = 0; i < resolution; i++)
 80058b6:	7afb      	ldrb	r3, [r7, #11]
 80058b8:	3301      	adds	r3, #1
 80058ba:	72fb      	strb	r3, [r7, #11]
 80058bc:	7a3b      	ldrb	r3, [r7, #8]
 80058be:	7afa      	ldrb	r2, [r7, #11]
 80058c0:	429a      	cmp	r2, r3
 80058c2:	f4ff af55 	bcc.w	8005770 <vl53l5cx_get_result+0x64>
      }
    }

    ret = VL53L5CX_OK;
 80058c6:	2300      	movs	r3, #0
 80058c8:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 80058ca:	68fb      	ldr	r3, [r7, #12]
}
 80058cc:	4618      	mov	r0, r3
 80058ce:	3714      	adds	r7, #20
 80058d0:	46bd      	mov	sp, r7
 80058d2:	bd90      	pop	{r4, r7, pc}
 80058d4:	200020d0 	.word	0x200020d0

080058d8 <vl53l5cx_map_target_status>:

static uint8_t vl53l5cx_map_target_status(uint8_t status)
{
 80058d8:	b480      	push	{r7}
 80058da:	b085      	sub	sp, #20
 80058dc:	af00      	add	r7, sp, #0
 80058de:	4603      	mov	r3, r0
 80058e0:	71fb      	strb	r3, [r7, #7]
  uint8_t ret;

  if ((status == 5U) || (status == 9U))
 80058e2:	79fb      	ldrb	r3, [r7, #7]
 80058e4:	2b05      	cmp	r3, #5
 80058e6:	d002      	beq.n	80058ee <vl53l5cx_map_target_status+0x16>
 80058e8:	79fb      	ldrb	r3, [r7, #7]
 80058ea:	2b09      	cmp	r3, #9
 80058ec:	d102      	bne.n	80058f4 <vl53l5cx_map_target_status+0x1c>
  {
    ret = 0U; /* ranging is OK */
 80058ee:	2300      	movs	r3, #0
 80058f0:	73fb      	strb	r3, [r7, #15]
 80058f2:	e007      	b.n	8005904 <vl53l5cx_map_target_status+0x2c>
  }
  else if (status == 0U)
 80058f4:	79fb      	ldrb	r3, [r7, #7]
 80058f6:	2b00      	cmp	r3, #0
 80058f8:	d102      	bne.n	8005900 <vl53l5cx_map_target_status+0x28>
  {
    ret = 255U; /* no update */
 80058fa:	23ff      	movs	r3, #255	; 0xff
 80058fc:	73fb      	strb	r3, [r7, #15]
 80058fe:	e001      	b.n	8005904 <vl53l5cx_map_target_status+0x2c>
  }
  else
  {
    ret = status; /* return device status otherwise */
 8005900:	79fb      	ldrb	r3, [r7, #7]
 8005902:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8005904:	7bfb      	ldrb	r3, [r7, #15]
}
 8005906:	4618      	mov	r0, r3
 8005908:	3714      	adds	r7, #20
 800590a:	46bd      	mov	sp, r7
 800590c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005910:	4770      	bx	lr
	...

08005914 <BSP_PB_Init>:
  *                    @arg  BUTTON_MODE_EXTI: Button will be connected to EXTI line
  *                                            with interrupt generation capability
  * @retval BSP status
  */
int32_t BSP_PB_Init(Button_TypeDef Button, ButtonMode_TypeDef ButtonMode)
{
 8005914:	b580      	push	{r7, lr}
 8005916:	b084      	sub	sp, #16
 8005918:	af00      	add	r7, sp, #0
 800591a:	4603      	mov	r3, r0
 800591c:	460a      	mov	r2, r1
 800591e:	71fb      	strb	r3, [r7, #7]
 8005920:	4613      	mov	r3, r2
 8005922:	71bb      	strb	r3, [r7, #6]
  int32_t ret = BSP_ERROR_NONE;
 8005924:	2300      	movs	r3, #0
 8005926:	60fb      	str	r3, [r7, #12]
  static const BSP_EXTI_LineCallback ButtonCallback[BUTTONn] ={BUTTON_USER_EXTI_Callback};
  static const uint32_t  BSP_BUTTON_PRIO [BUTTONn] ={BSP_BUTTON_USER_IT_PRIORITY};
  static const uint32_t BUTTON_EXTI_LINE[BUTTONn] ={USER_BUTTON_EXTI_LINE};
  static const BSP_BUTTON_GPIO_Init ButtonGpioInit[BUTTONn] = {BUTTON_USER_GPIO_Init};

  ButtonGpioInit[Button]();
 8005928:	79fb      	ldrb	r3, [r7, #7]
 800592a:	4a1f      	ldr	r2, [pc, #124]	; (80059a8 <BSP_PB_Init+0x94>)
 800592c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005930:	4798      	blx	r3

  if (ButtonMode == BUTTON_MODE_EXTI)
 8005932:	79bb      	ldrb	r3, [r7, #6]
 8005934:	2b01      	cmp	r3, #1
 8005936:	d132      	bne.n	800599e <BSP_PB_Init+0x8a>
  {
    if(HAL_EXTI_GetHandle(&hpb_exti[Button], BUTTON_EXTI_LINE[Button]) != HAL_OK)
 8005938:	79fb      	ldrb	r3, [r7, #7]
 800593a:	00db      	lsls	r3, r3, #3
 800593c:	4a1b      	ldr	r2, [pc, #108]	; (80059ac <BSP_PB_Init+0x98>)
 800593e:	441a      	add	r2, r3
 8005940:	79fb      	ldrb	r3, [r7, #7]
 8005942:	491b      	ldr	r1, [pc, #108]	; (80059b0 <BSP_PB_Init+0x9c>)
 8005944:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8005948:	4619      	mov	r1, r3
 800594a:	4610      	mov	r0, r2
 800594c:	f000 fad5 	bl	8005efa <HAL_EXTI_GetHandle>
 8005950:	4603      	mov	r3, r0
 8005952:	2b00      	cmp	r3, #0
 8005954:	d003      	beq.n	800595e <BSP_PB_Init+0x4a>
    {
      ret = BSP_ERROR_PERIPH_FAILURE;
 8005956:	f06f 0303 	mvn.w	r3, #3
 800595a:	60fb      	str	r3, [r7, #12]
 800595c:	e01f      	b.n	800599e <BSP_PB_Init+0x8a>
    }
    else if (HAL_EXTI_RegisterCallback(&hpb_exti[Button],  HAL_EXTI_COMMON_CB_ID, ButtonCallback[Button]) != HAL_OK)
 800595e:	79fb      	ldrb	r3, [r7, #7]
 8005960:	00db      	lsls	r3, r3, #3
 8005962:	4a12      	ldr	r2, [pc, #72]	; (80059ac <BSP_PB_Init+0x98>)
 8005964:	1898      	adds	r0, r3, r2
 8005966:	79fb      	ldrb	r3, [r7, #7]
 8005968:	4a12      	ldr	r2, [pc, #72]	; (80059b4 <BSP_PB_Init+0xa0>)
 800596a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800596e:	461a      	mov	r2, r3
 8005970:	2100      	movs	r1, #0
 8005972:	f000 faa8 	bl	8005ec6 <HAL_EXTI_RegisterCallback>
 8005976:	4603      	mov	r3, r0
 8005978:	2b00      	cmp	r3, #0
 800597a:	d003      	beq.n	8005984 <BSP_PB_Init+0x70>
    {
      ret = BSP_ERROR_PERIPH_FAILURE;
 800597c:	f06f 0303 	mvn.w	r3, #3
 8005980:	60fb      	str	r3, [r7, #12]
 8005982:	e00c      	b.n	800599e <BSP_PB_Init+0x8a>
    }
	else
    {
      /* Enable and set Button EXTI Interrupt to the lowest priority */
      HAL_NVIC_SetPriority((BUTTON_IRQn[Button]), BSP_BUTTON_PRIO[Button], 0x00);
 8005984:	2028      	movs	r0, #40	; 0x28
 8005986:	79fb      	ldrb	r3, [r7, #7]
 8005988:	4a0b      	ldr	r2, [pc, #44]	; (80059b8 <BSP_PB_Init+0xa4>)
 800598a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800598e:	2200      	movs	r2, #0
 8005990:	4619      	mov	r1, r3
 8005992:	f000 fa62 	bl	8005e5a <HAL_NVIC_SetPriority>
      HAL_NVIC_EnableIRQ((BUTTON_IRQn[Button]));
 8005996:	2328      	movs	r3, #40	; 0x28
 8005998:	4618      	mov	r0, r3
 800599a:	f000 fa7a 	bl	8005e92 <HAL_NVIC_EnableIRQ>
    }
  }

  return ret;
 800599e:	68fb      	ldr	r3, [r7, #12]
}
 80059a0:	4618      	mov	r0, r3
 80059a2:	3710      	adds	r7, #16
 80059a4:	46bd      	mov	sp, r7
 80059a6:	bd80      	pop	{r7, pc}
 80059a8:	08020d30 	.word	0x08020d30
 80059ac:	2000003c 	.word	0x2000003c
 80059b0:	08020d34 	.word	0x08020d34
 80059b4:	08020d38 	.word	0x08020d38
 80059b8:	08020d3c 	.word	0x08020d3c

080059bc <BUTTON_USER_EXTI_Callback>:
/**
  * @brief  User EXTI line detection callbacks.
  * @retval None
  */
static void BUTTON_USER_EXTI_Callback(void)
{
 80059bc:	b580      	push	{r7, lr}
 80059be:	af00      	add	r7, sp, #0
  BSP_PB_Callback(BUTTON_USER);
 80059c0:	2000      	movs	r0, #0
 80059c2:	f004 fa55 	bl	8009e70 <BSP_PB_Callback>
}
 80059c6:	bf00      	nop
 80059c8:	bd80      	pop	{r7, pc}

080059ca <BUTTON_USER_GPIO_Init>:

/**
  * @brief
  * @retval None
  */
static void BUTTON_USER_GPIO_Init(void) {
 80059ca:	b480      	push	{r7}
 80059cc:	af00      	add	r7, sp, #0
}
 80059ce:	bf00      	nop
 80059d0:	46bd      	mov	sp, r7
 80059d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059d6:	4770      	bx	lr

080059d8 <BSP_COM_Init>:
 * @param  UART_Init: Pointer to a UART_HandleTypeDef structure that contains the
 *                    configuration information for the specified USART peripheral.
 * @retval BSP error code
 */
int32_t BSP_COM_Init(COM_TypeDef COM)
{
 80059d8:	b580      	push	{r7, lr}
 80059da:	b084      	sub	sp, #16
 80059dc:	af00      	add	r7, sp, #0
 80059de:	4603      	mov	r3, r0
 80059e0:	71fb      	strb	r3, [r7, #7]
  int32_t ret = BSP_ERROR_NONE;
 80059e2:	2300      	movs	r3, #0
 80059e4:	60fb      	str	r3, [r7, #12]

  if(COM > COMn)
 80059e6:	79fb      	ldrb	r3, [r7, #7]
 80059e8:	2b01      	cmp	r3, #1
 80059ea:	d903      	bls.n	80059f4 <BSP_COM_Init+0x1c>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 80059ec:	f06f 0301 	mvn.w	r3, #1
 80059f0:	60fb      	str	r3, [r7, #12]
 80059f2:	e025      	b.n	8005a40 <BSP_COM_Init+0x68>
  }
  else
  {
     hcom_uart[COM].Instance = COM_USART[COM];
 80059f4:	79fb      	ldrb	r3, [r7, #7]
 80059f6:	79fa      	ldrb	r2, [r7, #7]
 80059f8:	4914      	ldr	r1, [pc, #80]	; (8005a4c <BSP_COM_Init+0x74>)
 80059fa:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 80059fe:	4814      	ldr	r0, [pc, #80]	; (8005a50 <BSP_COM_Init+0x78>)
 8005a00:	4613      	mov	r3, r2
 8005a02:	011b      	lsls	r3, r3, #4
 8005a04:	4413      	add	r3, r2
 8005a06:	009b      	lsls	r3, r3, #2
 8005a08:	4403      	add	r3, r0
 8005a0a:	6019      	str	r1, [r3, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 0U)
    /* Init the UART Msp */
    USART2_MspInit(&hcom_uart[COM]);
 8005a0c:	79fa      	ldrb	r2, [r7, #7]
 8005a0e:	4613      	mov	r3, r2
 8005a10:	011b      	lsls	r3, r3, #4
 8005a12:	4413      	add	r3, r2
 8005a14:	009b      	lsls	r3, r3, #2
 8005a16:	4a0e      	ldr	r2, [pc, #56]	; (8005a50 <BSP_COM_Init+0x78>)
 8005a18:	4413      	add	r3, r2
 8005a1a:	4618      	mov	r0, r3
 8005a1c:	f000 f864 	bl	8005ae8 <USART2_MspInit>
      {
        return BSP_ERROR_MSP_FAILURE;
      }
    }
#endif
    if (MX_USART2_UART_Init(&hcom_uart[COM]))
 8005a20:	79fa      	ldrb	r2, [r7, #7]
 8005a22:	4613      	mov	r3, r2
 8005a24:	011b      	lsls	r3, r3, #4
 8005a26:	4413      	add	r3, r2
 8005a28:	009b      	lsls	r3, r3, #2
 8005a2a:	4a09      	ldr	r2, [pc, #36]	; (8005a50 <BSP_COM_Init+0x78>)
 8005a2c:	4413      	add	r3, r2
 8005a2e:	4618      	mov	r0, r3
 8005a30:	f000 f810 	bl	8005a54 <MX_USART2_UART_Init>
 8005a34:	4603      	mov	r3, r0
 8005a36:	2b00      	cmp	r3, #0
 8005a38:	d002      	beq.n	8005a40 <BSP_COM_Init+0x68>
    {
      ret = BSP_ERROR_PERIPH_FAILURE;
 8005a3a:	f06f 0303 	mvn.w	r3, #3
 8005a3e:	60fb      	str	r3, [r7, #12]
    }
  }

  return ret;
 8005a40:	68fb      	ldr	r3, [r7, #12]
}
 8005a42:	4618      	mov	r0, r3
 8005a44:	3710      	adds	r7, #16
 8005a46:	46bd      	mov	sp, r7
 8005a48:	bd80      	pop	{r7, pc}
 8005a4a:	bf00      	nop
 8005a4c:	20000044 	.word	0x20000044
 8005a50:	200024a0 	.word	0x200024a0

08005a54 <MX_USART2_UART_Init>:
 */

/* USART2 init function */

__weak HAL_StatusTypeDef MX_USART2_UART_Init(UART_HandleTypeDef* huart)
{
 8005a54:	b580      	push	{r7, lr}
 8005a56:	b084      	sub	sp, #16
 8005a58:	af00      	add	r7, sp, #0
 8005a5a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;
 8005a5c:	2300      	movs	r3, #0
 8005a5e:	73fb      	strb	r3, [r7, #15]

  huart->Instance = USART2;
 8005a60:	687b      	ldr	r3, [r7, #4]
 8005a62:	4a12      	ldr	r2, [pc, #72]	; (8005aac <MX_USART2_UART_Init+0x58>)
 8005a64:	601a      	str	r2, [r3, #0]
  huart->Init.BaudRate = 115200;
 8005a66:	687b      	ldr	r3, [r7, #4]
 8005a68:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8005a6c:	605a      	str	r2, [r3, #4]
  huart->Init.WordLength = UART_WORDLENGTH_8B;
 8005a6e:	687b      	ldr	r3, [r7, #4]
 8005a70:	2200      	movs	r2, #0
 8005a72:	609a      	str	r2, [r3, #8]
  huart->Init.StopBits = UART_STOPBITS_1;
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	2200      	movs	r2, #0
 8005a78:	60da      	str	r2, [r3, #12]
  huart->Init.Parity = UART_PARITY_NONE;
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	2200      	movs	r2, #0
 8005a7e:	611a      	str	r2, [r3, #16]
  huart->Init.Mode = UART_MODE_TX_RX;
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	220c      	movs	r2, #12
 8005a84:	615a      	str	r2, [r3, #20]
  huart->Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8005a86:	687b      	ldr	r3, [r7, #4]
 8005a88:	2200      	movs	r2, #0
 8005a8a:	619a      	str	r2, [r3, #24]
  huart->Init.OverSampling = UART_OVERSAMPLING_16;
 8005a8c:	687b      	ldr	r3, [r7, #4]
 8005a8e:	2200      	movs	r2, #0
 8005a90:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(huart) != HAL_OK)
 8005a92:	6878      	ldr	r0, [r7, #4]
 8005a94:	f003 fba6 	bl	80091e4 <HAL_UART_Init>
 8005a98:	4603      	mov	r3, r0
 8005a9a:	2b00      	cmp	r3, #0
 8005a9c:	d001      	beq.n	8005aa2 <MX_USART2_UART_Init+0x4e>
  {
    ret = HAL_ERROR;
 8005a9e:	2301      	movs	r3, #1
 8005aa0:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8005aa2:	7bfb      	ldrb	r3, [r7, #15]
}
 8005aa4:	4618      	mov	r0, r3
 8005aa6:	3710      	adds	r7, #16
 8005aa8:	46bd      	mov	sp, r7
 8005aaa:	bd80      	pop	{r7, pc}
 8005aac:	40004400 	.word	0x40004400

08005ab0 <__io_putchar>:
  (void)HAL_UART_Transmit(&hcom_uart[COM_ActiveLogPort], (uint8_t *)&ch, 1, COM_POLL_TIMEOUT);
  return ch;
}
#else /* For GCC Toolchains */
int __io_putchar (int ch)
{
 8005ab0:	b580      	push	{r7, lr}
 8005ab2:	b082      	sub	sp, #8
 8005ab4:	af00      	add	r7, sp, #0
 8005ab6:	6078      	str	r0, [r7, #4]
  (void)HAL_UART_Transmit(&hcom_uart[COM_ActiveLogPort], (uint8_t *)&ch, 1, COM_POLL_TIMEOUT);
 8005ab8:	4b09      	ldr	r3, [pc, #36]	; (8005ae0 <__io_putchar+0x30>)
 8005aba:	781b      	ldrb	r3, [r3, #0]
 8005abc:	461a      	mov	r2, r3
 8005abe:	4613      	mov	r3, r2
 8005ac0:	011b      	lsls	r3, r3, #4
 8005ac2:	4413      	add	r3, r2
 8005ac4:	009b      	lsls	r3, r3, #2
 8005ac6:	4a07      	ldr	r2, [pc, #28]	; (8005ae4 <__io_putchar+0x34>)
 8005ac8:	1898      	adds	r0, r3, r2
 8005aca:	1d39      	adds	r1, r7, #4
 8005acc:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8005ad0:	2201      	movs	r2, #1
 8005ad2:	f003 fbde 	bl	8009292 <HAL_UART_Transmit>
  return ch;
 8005ad6:	687b      	ldr	r3, [r7, #4]
}
 8005ad8:	4618      	mov	r0, r3
 8005ada:	3708      	adds	r7, #8
 8005adc:	46bd      	mov	sp, r7
 8005ade:	bd80      	pop	{r7, pc}
 8005ae0:	200024e4 	.word	0x200024e4
 8005ae4:	200024a0 	.word	0x200024a0

08005ae8 <USART2_MspInit>:
 * @param  huart USART2 handle
 * @retval None
 */

static void USART2_MspInit(UART_HandleTypeDef* uartHandle)
{
 8005ae8:	b580      	push	{r7, lr}
 8005aea:	b08a      	sub	sp, #40	; 0x28
 8005aec:	af00      	add	r7, sp, #0
 8005aee:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct;
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Enable Peripheral clock */
    __HAL_RCC_USART2_CLK_ENABLE();
 8005af0:	2300      	movs	r3, #0
 8005af2:	613b      	str	r3, [r7, #16]
 8005af4:	4b1e      	ldr	r3, [pc, #120]	; (8005b70 <USART2_MspInit+0x88>)
 8005af6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005af8:	4a1d      	ldr	r2, [pc, #116]	; (8005b70 <USART2_MspInit+0x88>)
 8005afa:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005afe:	6413      	str	r3, [r2, #64]	; 0x40
 8005b00:	4b1b      	ldr	r3, [pc, #108]	; (8005b70 <USART2_MspInit+0x88>)
 8005b02:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b04:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005b08:	613b      	str	r3, [r7, #16]
 8005b0a:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005b0c:	2300      	movs	r3, #0
 8005b0e:	60fb      	str	r3, [r7, #12]
 8005b10:	4b17      	ldr	r3, [pc, #92]	; (8005b70 <USART2_MspInit+0x88>)
 8005b12:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005b14:	4a16      	ldr	r2, [pc, #88]	; (8005b70 <USART2_MspInit+0x88>)
 8005b16:	f043 0301 	orr.w	r3, r3, #1
 8005b1a:	6313      	str	r3, [r2, #48]	; 0x30
 8005b1c:	4b14      	ldr	r3, [pc, #80]	; (8005b70 <USART2_MspInit+0x88>)
 8005b1e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005b20:	f003 0301 	and.w	r3, r3, #1
 8005b24:	60fb      	str	r3, [r7, #12]
 8005b26:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = BUS_USART2_TX_GPIO_PIN;
 8005b28:	2304      	movs	r3, #4
 8005b2a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005b2c:	2302      	movs	r3, #2
 8005b2e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005b30:	2300      	movs	r3, #0
 8005b32:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005b34:	2303      	movs	r3, #3
 8005b36:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = BUS_USART2_TX_GPIO_AF;
 8005b38:	2307      	movs	r3, #7
 8005b3a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(BUS_USART2_TX_GPIO_PORT, &GPIO_InitStruct);
 8005b3c:	f107 0314 	add.w	r3, r7, #20
 8005b40:	4619      	mov	r1, r3
 8005b42:	480c      	ldr	r0, [pc, #48]	; (8005b74 <USART2_MspInit+0x8c>)
 8005b44:	f000 f9ee 	bl	8005f24 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = BUS_USART2_RX_GPIO_PIN;
 8005b48:	2308      	movs	r3, #8
 8005b4a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005b4c:	2302      	movs	r3, #2
 8005b4e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005b50:	2300      	movs	r3, #0
 8005b52:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005b54:	2303      	movs	r3, #3
 8005b56:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = BUS_USART2_RX_GPIO_AF;
 8005b58:	2307      	movs	r3, #7
 8005b5a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(BUS_USART2_RX_GPIO_PORT, &GPIO_InitStruct);
 8005b5c:	f107 0314 	add.w	r3, r7, #20
 8005b60:	4619      	mov	r1, r3
 8005b62:	4804      	ldr	r0, [pc, #16]	; (8005b74 <USART2_MspInit+0x8c>)
 8005b64:	f000 f9de 	bl	8005f24 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
}
 8005b68:	bf00      	nop
 8005b6a:	3728      	adds	r7, #40	; 0x28
 8005b6c:	46bd      	mov	sp, r7
 8005b6e:	bd80      	pop	{r7, pc}
 8005b70:	40023800 	.word	0x40023800
 8005b74:	40020000 	.word	0x40020000

08005b78 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8005b78:	b580      	push	{r7, lr}
 8005b7a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8005b7c:	4b0e      	ldr	r3, [pc, #56]	; (8005bb8 <HAL_Init+0x40>)
 8005b7e:	681b      	ldr	r3, [r3, #0]
 8005b80:	4a0d      	ldr	r2, [pc, #52]	; (8005bb8 <HAL_Init+0x40>)
 8005b82:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8005b86:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8005b88:	4b0b      	ldr	r3, [pc, #44]	; (8005bb8 <HAL_Init+0x40>)
 8005b8a:	681b      	ldr	r3, [r3, #0]
 8005b8c:	4a0a      	ldr	r2, [pc, #40]	; (8005bb8 <HAL_Init+0x40>)
 8005b8e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8005b92:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8005b94:	4b08      	ldr	r3, [pc, #32]	; (8005bb8 <HAL_Init+0x40>)
 8005b96:	681b      	ldr	r3, [r3, #0]
 8005b98:	4a07      	ldr	r2, [pc, #28]	; (8005bb8 <HAL_Init+0x40>)
 8005b9a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005b9e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8005ba0:	2003      	movs	r0, #3
 8005ba2:	f000 f94f 	bl	8005e44 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8005ba6:	2000      	movs	r0, #0
 8005ba8:	f000 f808 	bl	8005bbc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8005bac:	f7fb fc3e 	bl	800142c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8005bb0:	2300      	movs	r3, #0
}
 8005bb2:	4618      	mov	r0, r3
 8005bb4:	bd80      	pop	{r7, pc}
 8005bb6:	bf00      	nop
 8005bb8:	40023c00 	.word	0x40023c00

08005bbc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8005bbc:	b580      	push	{r7, lr}
 8005bbe:	b082      	sub	sp, #8
 8005bc0:	af00      	add	r7, sp, #0
 8005bc2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8005bc4:	4b12      	ldr	r3, [pc, #72]	; (8005c10 <HAL_InitTick+0x54>)
 8005bc6:	681a      	ldr	r2, [r3, #0]
 8005bc8:	4b12      	ldr	r3, [pc, #72]	; (8005c14 <HAL_InitTick+0x58>)
 8005bca:	781b      	ldrb	r3, [r3, #0]
 8005bcc:	4619      	mov	r1, r3
 8005bce:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8005bd2:	fbb3 f3f1 	udiv	r3, r3, r1
 8005bd6:	fbb2 f3f3 	udiv	r3, r2, r3
 8005bda:	4618      	mov	r0, r3
 8005bdc:	f000 f967 	bl	8005eae <HAL_SYSTICK_Config>
 8005be0:	4603      	mov	r3, r0
 8005be2:	2b00      	cmp	r3, #0
 8005be4:	d001      	beq.n	8005bea <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8005be6:	2301      	movs	r3, #1
 8005be8:	e00e      	b.n	8005c08 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8005bea:	687b      	ldr	r3, [r7, #4]
 8005bec:	2b0f      	cmp	r3, #15
 8005bee:	d80a      	bhi.n	8005c06 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8005bf0:	2200      	movs	r2, #0
 8005bf2:	6879      	ldr	r1, [r7, #4]
 8005bf4:	f04f 30ff 	mov.w	r0, #4294967295
 8005bf8:	f000 f92f 	bl	8005e5a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8005bfc:	4a06      	ldr	r2, [pc, #24]	; (8005c18 <HAL_InitTick+0x5c>)
 8005bfe:	687b      	ldr	r3, [r7, #4]
 8005c00:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8005c02:	2300      	movs	r3, #0
 8005c04:	e000      	b.n	8005c08 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8005c06:	2301      	movs	r3, #1
}
 8005c08:	4618      	mov	r0, r3
 8005c0a:	3708      	adds	r7, #8
 8005c0c:	46bd      	mov	sp, r7
 8005c0e:	bd80      	pop	{r7, pc}
 8005c10:	20000000 	.word	0x20000000
 8005c14:	2000004c 	.word	0x2000004c
 8005c18:	20000048 	.word	0x20000048

08005c1c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8005c1c:	b480      	push	{r7}
 8005c1e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8005c20:	4b06      	ldr	r3, [pc, #24]	; (8005c3c <HAL_IncTick+0x20>)
 8005c22:	781b      	ldrb	r3, [r3, #0]
 8005c24:	461a      	mov	r2, r3
 8005c26:	4b06      	ldr	r3, [pc, #24]	; (8005c40 <HAL_IncTick+0x24>)
 8005c28:	681b      	ldr	r3, [r3, #0]
 8005c2a:	4413      	add	r3, r2
 8005c2c:	4a04      	ldr	r2, [pc, #16]	; (8005c40 <HAL_IncTick+0x24>)
 8005c2e:	6013      	str	r3, [r2, #0]
}
 8005c30:	bf00      	nop
 8005c32:	46bd      	mov	sp, r7
 8005c34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c38:	4770      	bx	lr
 8005c3a:	bf00      	nop
 8005c3c:	2000004c 	.word	0x2000004c
 8005c40:	200024e8 	.word	0x200024e8

08005c44 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8005c44:	b480      	push	{r7}
 8005c46:	af00      	add	r7, sp, #0
  return uwTick;
 8005c48:	4b03      	ldr	r3, [pc, #12]	; (8005c58 <HAL_GetTick+0x14>)
 8005c4a:	681b      	ldr	r3, [r3, #0]
}
 8005c4c:	4618      	mov	r0, r3
 8005c4e:	46bd      	mov	sp, r7
 8005c50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c54:	4770      	bx	lr
 8005c56:	bf00      	nop
 8005c58:	200024e8 	.word	0x200024e8

08005c5c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8005c5c:	b580      	push	{r7, lr}
 8005c5e:	b084      	sub	sp, #16
 8005c60:	af00      	add	r7, sp, #0
 8005c62:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8005c64:	f7ff ffee 	bl	8005c44 <HAL_GetTick>
 8005c68:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8005c6a:	687b      	ldr	r3, [r7, #4]
 8005c6c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8005c6e:	68fb      	ldr	r3, [r7, #12]
 8005c70:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005c74:	d005      	beq.n	8005c82 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8005c76:	4b0a      	ldr	r3, [pc, #40]	; (8005ca0 <HAL_Delay+0x44>)
 8005c78:	781b      	ldrb	r3, [r3, #0]
 8005c7a:	461a      	mov	r2, r3
 8005c7c:	68fb      	ldr	r3, [r7, #12]
 8005c7e:	4413      	add	r3, r2
 8005c80:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8005c82:	bf00      	nop
 8005c84:	f7ff ffde 	bl	8005c44 <HAL_GetTick>
 8005c88:	4602      	mov	r2, r0
 8005c8a:	68bb      	ldr	r3, [r7, #8]
 8005c8c:	1ad3      	subs	r3, r2, r3
 8005c8e:	68fa      	ldr	r2, [r7, #12]
 8005c90:	429a      	cmp	r2, r3
 8005c92:	d8f7      	bhi.n	8005c84 <HAL_Delay+0x28>
  {
  }
}
 8005c94:	bf00      	nop
 8005c96:	bf00      	nop
 8005c98:	3710      	adds	r7, #16
 8005c9a:	46bd      	mov	sp, r7
 8005c9c:	bd80      	pop	{r7, pc}
 8005c9e:	bf00      	nop
 8005ca0:	2000004c 	.word	0x2000004c

08005ca4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005ca4:	b480      	push	{r7}
 8005ca6:	b085      	sub	sp, #20
 8005ca8:	af00      	add	r7, sp, #0
 8005caa:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	f003 0307 	and.w	r3, r3, #7
 8005cb2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8005cb4:	4b0c      	ldr	r3, [pc, #48]	; (8005ce8 <__NVIC_SetPriorityGrouping+0x44>)
 8005cb6:	68db      	ldr	r3, [r3, #12]
 8005cb8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8005cba:	68ba      	ldr	r2, [r7, #8]
 8005cbc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8005cc0:	4013      	ands	r3, r2
 8005cc2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8005cc4:	68fb      	ldr	r3, [r7, #12]
 8005cc6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8005cc8:	68bb      	ldr	r3, [r7, #8]
 8005cca:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8005ccc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8005cd0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005cd4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8005cd6:	4a04      	ldr	r2, [pc, #16]	; (8005ce8 <__NVIC_SetPriorityGrouping+0x44>)
 8005cd8:	68bb      	ldr	r3, [r7, #8]
 8005cda:	60d3      	str	r3, [r2, #12]
}
 8005cdc:	bf00      	nop
 8005cde:	3714      	adds	r7, #20
 8005ce0:	46bd      	mov	sp, r7
 8005ce2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ce6:	4770      	bx	lr
 8005ce8:	e000ed00 	.word	0xe000ed00

08005cec <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8005cec:	b480      	push	{r7}
 8005cee:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8005cf0:	4b04      	ldr	r3, [pc, #16]	; (8005d04 <__NVIC_GetPriorityGrouping+0x18>)
 8005cf2:	68db      	ldr	r3, [r3, #12]
 8005cf4:	0a1b      	lsrs	r3, r3, #8
 8005cf6:	f003 0307 	and.w	r3, r3, #7
}
 8005cfa:	4618      	mov	r0, r3
 8005cfc:	46bd      	mov	sp, r7
 8005cfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d02:	4770      	bx	lr
 8005d04:	e000ed00 	.word	0xe000ed00

08005d08 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005d08:	b480      	push	{r7}
 8005d0a:	b083      	sub	sp, #12
 8005d0c:	af00      	add	r7, sp, #0
 8005d0e:	4603      	mov	r3, r0
 8005d10:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005d12:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005d16:	2b00      	cmp	r3, #0
 8005d18:	db0b      	blt.n	8005d32 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8005d1a:	79fb      	ldrb	r3, [r7, #7]
 8005d1c:	f003 021f 	and.w	r2, r3, #31
 8005d20:	4907      	ldr	r1, [pc, #28]	; (8005d40 <__NVIC_EnableIRQ+0x38>)
 8005d22:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005d26:	095b      	lsrs	r3, r3, #5
 8005d28:	2001      	movs	r0, #1
 8005d2a:	fa00 f202 	lsl.w	r2, r0, r2
 8005d2e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8005d32:	bf00      	nop
 8005d34:	370c      	adds	r7, #12
 8005d36:	46bd      	mov	sp, r7
 8005d38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d3c:	4770      	bx	lr
 8005d3e:	bf00      	nop
 8005d40:	e000e100 	.word	0xe000e100

08005d44 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8005d44:	b480      	push	{r7}
 8005d46:	b083      	sub	sp, #12
 8005d48:	af00      	add	r7, sp, #0
 8005d4a:	4603      	mov	r3, r0
 8005d4c:	6039      	str	r1, [r7, #0]
 8005d4e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005d50:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005d54:	2b00      	cmp	r3, #0
 8005d56:	db0a      	blt.n	8005d6e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005d58:	683b      	ldr	r3, [r7, #0]
 8005d5a:	b2da      	uxtb	r2, r3
 8005d5c:	490c      	ldr	r1, [pc, #48]	; (8005d90 <__NVIC_SetPriority+0x4c>)
 8005d5e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005d62:	0112      	lsls	r2, r2, #4
 8005d64:	b2d2      	uxtb	r2, r2
 8005d66:	440b      	add	r3, r1
 8005d68:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8005d6c:	e00a      	b.n	8005d84 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005d6e:	683b      	ldr	r3, [r7, #0]
 8005d70:	b2da      	uxtb	r2, r3
 8005d72:	4908      	ldr	r1, [pc, #32]	; (8005d94 <__NVIC_SetPriority+0x50>)
 8005d74:	79fb      	ldrb	r3, [r7, #7]
 8005d76:	f003 030f 	and.w	r3, r3, #15
 8005d7a:	3b04      	subs	r3, #4
 8005d7c:	0112      	lsls	r2, r2, #4
 8005d7e:	b2d2      	uxtb	r2, r2
 8005d80:	440b      	add	r3, r1
 8005d82:	761a      	strb	r2, [r3, #24]
}
 8005d84:	bf00      	nop
 8005d86:	370c      	adds	r7, #12
 8005d88:	46bd      	mov	sp, r7
 8005d8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d8e:	4770      	bx	lr
 8005d90:	e000e100 	.word	0xe000e100
 8005d94:	e000ed00 	.word	0xe000ed00

08005d98 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8005d98:	b480      	push	{r7}
 8005d9a:	b089      	sub	sp, #36	; 0x24
 8005d9c:	af00      	add	r7, sp, #0
 8005d9e:	60f8      	str	r0, [r7, #12]
 8005da0:	60b9      	str	r1, [r7, #8]
 8005da2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8005da4:	68fb      	ldr	r3, [r7, #12]
 8005da6:	f003 0307 	and.w	r3, r3, #7
 8005daa:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8005dac:	69fb      	ldr	r3, [r7, #28]
 8005dae:	f1c3 0307 	rsb	r3, r3, #7
 8005db2:	2b04      	cmp	r3, #4
 8005db4:	bf28      	it	cs
 8005db6:	2304      	movcs	r3, #4
 8005db8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8005dba:	69fb      	ldr	r3, [r7, #28]
 8005dbc:	3304      	adds	r3, #4
 8005dbe:	2b06      	cmp	r3, #6
 8005dc0:	d902      	bls.n	8005dc8 <NVIC_EncodePriority+0x30>
 8005dc2:	69fb      	ldr	r3, [r7, #28]
 8005dc4:	3b03      	subs	r3, #3
 8005dc6:	e000      	b.n	8005dca <NVIC_EncodePriority+0x32>
 8005dc8:	2300      	movs	r3, #0
 8005dca:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005dcc:	f04f 32ff 	mov.w	r2, #4294967295
 8005dd0:	69bb      	ldr	r3, [r7, #24]
 8005dd2:	fa02 f303 	lsl.w	r3, r2, r3
 8005dd6:	43da      	mvns	r2, r3
 8005dd8:	68bb      	ldr	r3, [r7, #8]
 8005dda:	401a      	ands	r2, r3
 8005ddc:	697b      	ldr	r3, [r7, #20]
 8005dde:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8005de0:	f04f 31ff 	mov.w	r1, #4294967295
 8005de4:	697b      	ldr	r3, [r7, #20]
 8005de6:	fa01 f303 	lsl.w	r3, r1, r3
 8005dea:	43d9      	mvns	r1, r3
 8005dec:	687b      	ldr	r3, [r7, #4]
 8005dee:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005df0:	4313      	orrs	r3, r2
         );
}
 8005df2:	4618      	mov	r0, r3
 8005df4:	3724      	adds	r7, #36	; 0x24
 8005df6:	46bd      	mov	sp, r7
 8005df8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dfc:	4770      	bx	lr
	...

08005e00 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8005e00:	b580      	push	{r7, lr}
 8005e02:	b082      	sub	sp, #8
 8005e04:	af00      	add	r7, sp, #0
 8005e06:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	3b01      	subs	r3, #1
 8005e0c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8005e10:	d301      	bcc.n	8005e16 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8005e12:	2301      	movs	r3, #1
 8005e14:	e00f      	b.n	8005e36 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8005e16:	4a0a      	ldr	r2, [pc, #40]	; (8005e40 <SysTick_Config+0x40>)
 8005e18:	687b      	ldr	r3, [r7, #4]
 8005e1a:	3b01      	subs	r3, #1
 8005e1c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8005e1e:	210f      	movs	r1, #15
 8005e20:	f04f 30ff 	mov.w	r0, #4294967295
 8005e24:	f7ff ff8e 	bl	8005d44 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8005e28:	4b05      	ldr	r3, [pc, #20]	; (8005e40 <SysTick_Config+0x40>)
 8005e2a:	2200      	movs	r2, #0
 8005e2c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8005e2e:	4b04      	ldr	r3, [pc, #16]	; (8005e40 <SysTick_Config+0x40>)
 8005e30:	2207      	movs	r2, #7
 8005e32:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8005e34:	2300      	movs	r3, #0
}
 8005e36:	4618      	mov	r0, r3
 8005e38:	3708      	adds	r7, #8
 8005e3a:	46bd      	mov	sp, r7
 8005e3c:	bd80      	pop	{r7, pc}
 8005e3e:	bf00      	nop
 8005e40:	e000e010 	.word	0xe000e010

08005e44 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005e44:	b580      	push	{r7, lr}
 8005e46:	b082      	sub	sp, #8
 8005e48:	af00      	add	r7, sp, #0
 8005e4a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8005e4c:	6878      	ldr	r0, [r7, #4]
 8005e4e:	f7ff ff29 	bl	8005ca4 <__NVIC_SetPriorityGrouping>
}
 8005e52:	bf00      	nop
 8005e54:	3708      	adds	r7, #8
 8005e56:	46bd      	mov	sp, r7
 8005e58:	bd80      	pop	{r7, pc}

08005e5a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8005e5a:	b580      	push	{r7, lr}
 8005e5c:	b086      	sub	sp, #24
 8005e5e:	af00      	add	r7, sp, #0
 8005e60:	4603      	mov	r3, r0
 8005e62:	60b9      	str	r1, [r7, #8]
 8005e64:	607a      	str	r2, [r7, #4]
 8005e66:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8005e68:	2300      	movs	r3, #0
 8005e6a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8005e6c:	f7ff ff3e 	bl	8005cec <__NVIC_GetPriorityGrouping>
 8005e70:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8005e72:	687a      	ldr	r2, [r7, #4]
 8005e74:	68b9      	ldr	r1, [r7, #8]
 8005e76:	6978      	ldr	r0, [r7, #20]
 8005e78:	f7ff ff8e 	bl	8005d98 <NVIC_EncodePriority>
 8005e7c:	4602      	mov	r2, r0
 8005e7e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005e82:	4611      	mov	r1, r2
 8005e84:	4618      	mov	r0, r3
 8005e86:	f7ff ff5d 	bl	8005d44 <__NVIC_SetPriority>
}
 8005e8a:	bf00      	nop
 8005e8c:	3718      	adds	r7, #24
 8005e8e:	46bd      	mov	sp, r7
 8005e90:	bd80      	pop	{r7, pc}

08005e92 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005e92:	b580      	push	{r7, lr}
 8005e94:	b082      	sub	sp, #8
 8005e96:	af00      	add	r7, sp, #0
 8005e98:	4603      	mov	r3, r0
 8005e9a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8005e9c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005ea0:	4618      	mov	r0, r3
 8005ea2:	f7ff ff31 	bl	8005d08 <__NVIC_EnableIRQ>
}
 8005ea6:	bf00      	nop
 8005ea8:	3708      	adds	r7, #8
 8005eaa:	46bd      	mov	sp, r7
 8005eac:	bd80      	pop	{r7, pc}

08005eae <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8005eae:	b580      	push	{r7, lr}
 8005eb0:	b082      	sub	sp, #8
 8005eb2:	af00      	add	r7, sp, #0
 8005eb4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8005eb6:	6878      	ldr	r0, [r7, #4]
 8005eb8:	f7ff ffa2 	bl	8005e00 <SysTick_Config>
 8005ebc:	4603      	mov	r3, r0
}
 8005ebe:	4618      	mov	r0, r3
 8005ec0:	3708      	adds	r7, #8
 8005ec2:	46bd      	mov	sp, r7
 8005ec4:	bd80      	pop	{r7, pc}

08005ec6 <HAL_EXTI_RegisterCallback>:
  *         This parameter can be one of @arg @ref EXTI_CallbackIDTypeDef values.
  * @param  pPendingCbfn function pointer to be stored as callback.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_EXTI_RegisterCallback(EXTI_HandleTypeDef *hexti, EXTI_CallbackIDTypeDef CallbackID, void (*pPendingCbfn)(void))
{
 8005ec6:	b480      	push	{r7}
 8005ec8:	b087      	sub	sp, #28
 8005eca:	af00      	add	r7, sp, #0
 8005ecc:	60f8      	str	r0, [r7, #12]
 8005ece:	460b      	mov	r3, r1
 8005ed0:	607a      	str	r2, [r7, #4]
 8005ed2:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef status = HAL_OK;
 8005ed4:	2300      	movs	r3, #0
 8005ed6:	75fb      	strb	r3, [r7, #23]

  switch (CallbackID)
 8005ed8:	7afb      	ldrb	r3, [r7, #11]
 8005eda:	2b00      	cmp	r3, #0
 8005edc:	d103      	bne.n	8005ee6 <HAL_EXTI_RegisterCallback+0x20>
  {
    case  HAL_EXTI_COMMON_CB_ID:
      hexti->PendingCallback = pPendingCbfn;
 8005ede:	68fb      	ldr	r3, [r7, #12]
 8005ee0:	687a      	ldr	r2, [r7, #4]
 8005ee2:	605a      	str	r2, [r3, #4]
      break;
 8005ee4:	e002      	b.n	8005eec <HAL_EXTI_RegisterCallback+0x26>

    default:
      status = HAL_ERROR;
 8005ee6:	2301      	movs	r3, #1
 8005ee8:	75fb      	strb	r3, [r7, #23]
      break;
 8005eea:	bf00      	nop
  }

  return status;
 8005eec:	7dfb      	ldrb	r3, [r7, #23]
}
 8005eee:	4618      	mov	r0, r3
 8005ef0:	371c      	adds	r7, #28
 8005ef2:	46bd      	mov	sp, r7
 8005ef4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ef8:	4770      	bx	lr

08005efa <HAL_EXTI_GetHandle>:
  * @param  ExtiLine Exti line number.
  *         This parameter can be from 0 to @ref EXTI_LINE_NB.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_EXTI_GetHandle(EXTI_HandleTypeDef *hexti, uint32_t ExtiLine)
{
 8005efa:	b480      	push	{r7}
 8005efc:	b083      	sub	sp, #12
 8005efe:	af00      	add	r7, sp, #0
 8005f00:	6078      	str	r0, [r7, #4]
 8005f02:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_EXTI_LINE(ExtiLine));

  /* Check null pointer */
  if (hexti == NULL)
 8005f04:	687b      	ldr	r3, [r7, #4]
 8005f06:	2b00      	cmp	r3, #0
 8005f08:	d101      	bne.n	8005f0e <HAL_EXTI_GetHandle+0x14>
  {
    return HAL_ERROR;
 8005f0a:	2301      	movs	r3, #1
 8005f0c:	e003      	b.n	8005f16 <HAL_EXTI_GetHandle+0x1c>
  }
  else
  {
    /* Store line number as handle private field */
    hexti->Line = ExtiLine;
 8005f0e:	687b      	ldr	r3, [r7, #4]
 8005f10:	683a      	ldr	r2, [r7, #0]
 8005f12:	601a      	str	r2, [r3, #0]

    return HAL_OK;
 8005f14:	2300      	movs	r3, #0
  }
}
 8005f16:	4618      	mov	r0, r3
 8005f18:	370c      	adds	r7, #12
 8005f1a:	46bd      	mov	sp, r7
 8005f1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f20:	4770      	bx	lr
	...

08005f24 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8005f24:	b480      	push	{r7}
 8005f26:	b089      	sub	sp, #36	; 0x24
 8005f28:	af00      	add	r7, sp, #0
 8005f2a:	6078      	str	r0, [r7, #4]
 8005f2c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8005f2e:	2300      	movs	r3, #0
 8005f30:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8005f32:	2300      	movs	r3, #0
 8005f34:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8005f36:	2300      	movs	r3, #0
 8005f38:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8005f3a:	2300      	movs	r3, #0
 8005f3c:	61fb      	str	r3, [r7, #28]
 8005f3e:	e165      	b.n	800620c <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8005f40:	2201      	movs	r2, #1
 8005f42:	69fb      	ldr	r3, [r7, #28]
 8005f44:	fa02 f303 	lsl.w	r3, r2, r3
 8005f48:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8005f4a:	683b      	ldr	r3, [r7, #0]
 8005f4c:	681b      	ldr	r3, [r3, #0]
 8005f4e:	697a      	ldr	r2, [r7, #20]
 8005f50:	4013      	ands	r3, r2
 8005f52:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8005f54:	693a      	ldr	r2, [r7, #16]
 8005f56:	697b      	ldr	r3, [r7, #20]
 8005f58:	429a      	cmp	r2, r3
 8005f5a:	f040 8154 	bne.w	8006206 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8005f5e:	683b      	ldr	r3, [r7, #0]
 8005f60:	685b      	ldr	r3, [r3, #4]
 8005f62:	f003 0303 	and.w	r3, r3, #3
 8005f66:	2b01      	cmp	r3, #1
 8005f68:	d005      	beq.n	8005f76 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8005f6a:	683b      	ldr	r3, [r7, #0]
 8005f6c:	685b      	ldr	r3, [r3, #4]
 8005f6e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8005f72:	2b02      	cmp	r3, #2
 8005f74:	d130      	bne.n	8005fd8 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8005f76:	687b      	ldr	r3, [r7, #4]
 8005f78:	689b      	ldr	r3, [r3, #8]
 8005f7a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8005f7c:	69fb      	ldr	r3, [r7, #28]
 8005f7e:	005b      	lsls	r3, r3, #1
 8005f80:	2203      	movs	r2, #3
 8005f82:	fa02 f303 	lsl.w	r3, r2, r3
 8005f86:	43db      	mvns	r3, r3
 8005f88:	69ba      	ldr	r2, [r7, #24]
 8005f8a:	4013      	ands	r3, r2
 8005f8c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8005f8e:	683b      	ldr	r3, [r7, #0]
 8005f90:	68da      	ldr	r2, [r3, #12]
 8005f92:	69fb      	ldr	r3, [r7, #28]
 8005f94:	005b      	lsls	r3, r3, #1
 8005f96:	fa02 f303 	lsl.w	r3, r2, r3
 8005f9a:	69ba      	ldr	r2, [r7, #24]
 8005f9c:	4313      	orrs	r3, r2
 8005f9e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8005fa0:	687b      	ldr	r3, [r7, #4]
 8005fa2:	69ba      	ldr	r2, [r7, #24]
 8005fa4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8005fa6:	687b      	ldr	r3, [r7, #4]
 8005fa8:	685b      	ldr	r3, [r3, #4]
 8005faa:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8005fac:	2201      	movs	r2, #1
 8005fae:	69fb      	ldr	r3, [r7, #28]
 8005fb0:	fa02 f303 	lsl.w	r3, r2, r3
 8005fb4:	43db      	mvns	r3, r3
 8005fb6:	69ba      	ldr	r2, [r7, #24]
 8005fb8:	4013      	ands	r3, r2
 8005fba:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8005fbc:	683b      	ldr	r3, [r7, #0]
 8005fbe:	685b      	ldr	r3, [r3, #4]
 8005fc0:	091b      	lsrs	r3, r3, #4
 8005fc2:	f003 0201 	and.w	r2, r3, #1
 8005fc6:	69fb      	ldr	r3, [r7, #28]
 8005fc8:	fa02 f303 	lsl.w	r3, r2, r3
 8005fcc:	69ba      	ldr	r2, [r7, #24]
 8005fce:	4313      	orrs	r3, r2
 8005fd0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8005fd2:	687b      	ldr	r3, [r7, #4]
 8005fd4:	69ba      	ldr	r2, [r7, #24]
 8005fd6:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8005fd8:	683b      	ldr	r3, [r7, #0]
 8005fda:	685b      	ldr	r3, [r3, #4]
 8005fdc:	f003 0303 	and.w	r3, r3, #3
 8005fe0:	2b03      	cmp	r3, #3
 8005fe2:	d017      	beq.n	8006014 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8005fe4:	687b      	ldr	r3, [r7, #4]
 8005fe6:	68db      	ldr	r3, [r3, #12]
 8005fe8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8005fea:	69fb      	ldr	r3, [r7, #28]
 8005fec:	005b      	lsls	r3, r3, #1
 8005fee:	2203      	movs	r2, #3
 8005ff0:	fa02 f303 	lsl.w	r3, r2, r3
 8005ff4:	43db      	mvns	r3, r3
 8005ff6:	69ba      	ldr	r2, [r7, #24]
 8005ff8:	4013      	ands	r3, r2
 8005ffa:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8005ffc:	683b      	ldr	r3, [r7, #0]
 8005ffe:	689a      	ldr	r2, [r3, #8]
 8006000:	69fb      	ldr	r3, [r7, #28]
 8006002:	005b      	lsls	r3, r3, #1
 8006004:	fa02 f303 	lsl.w	r3, r2, r3
 8006008:	69ba      	ldr	r2, [r7, #24]
 800600a:	4313      	orrs	r3, r2
 800600c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800600e:	687b      	ldr	r3, [r7, #4]
 8006010:	69ba      	ldr	r2, [r7, #24]
 8006012:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8006014:	683b      	ldr	r3, [r7, #0]
 8006016:	685b      	ldr	r3, [r3, #4]
 8006018:	f003 0303 	and.w	r3, r3, #3
 800601c:	2b02      	cmp	r3, #2
 800601e:	d123      	bne.n	8006068 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8006020:	69fb      	ldr	r3, [r7, #28]
 8006022:	08da      	lsrs	r2, r3, #3
 8006024:	687b      	ldr	r3, [r7, #4]
 8006026:	3208      	adds	r2, #8
 8006028:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800602c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800602e:	69fb      	ldr	r3, [r7, #28]
 8006030:	f003 0307 	and.w	r3, r3, #7
 8006034:	009b      	lsls	r3, r3, #2
 8006036:	220f      	movs	r2, #15
 8006038:	fa02 f303 	lsl.w	r3, r2, r3
 800603c:	43db      	mvns	r3, r3
 800603e:	69ba      	ldr	r2, [r7, #24]
 8006040:	4013      	ands	r3, r2
 8006042:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8006044:	683b      	ldr	r3, [r7, #0]
 8006046:	691a      	ldr	r2, [r3, #16]
 8006048:	69fb      	ldr	r3, [r7, #28]
 800604a:	f003 0307 	and.w	r3, r3, #7
 800604e:	009b      	lsls	r3, r3, #2
 8006050:	fa02 f303 	lsl.w	r3, r2, r3
 8006054:	69ba      	ldr	r2, [r7, #24]
 8006056:	4313      	orrs	r3, r2
 8006058:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800605a:	69fb      	ldr	r3, [r7, #28]
 800605c:	08da      	lsrs	r2, r3, #3
 800605e:	687b      	ldr	r3, [r7, #4]
 8006060:	3208      	adds	r2, #8
 8006062:	69b9      	ldr	r1, [r7, #24]
 8006064:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8006068:	687b      	ldr	r3, [r7, #4]
 800606a:	681b      	ldr	r3, [r3, #0]
 800606c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800606e:	69fb      	ldr	r3, [r7, #28]
 8006070:	005b      	lsls	r3, r3, #1
 8006072:	2203      	movs	r2, #3
 8006074:	fa02 f303 	lsl.w	r3, r2, r3
 8006078:	43db      	mvns	r3, r3
 800607a:	69ba      	ldr	r2, [r7, #24]
 800607c:	4013      	ands	r3, r2
 800607e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8006080:	683b      	ldr	r3, [r7, #0]
 8006082:	685b      	ldr	r3, [r3, #4]
 8006084:	f003 0203 	and.w	r2, r3, #3
 8006088:	69fb      	ldr	r3, [r7, #28]
 800608a:	005b      	lsls	r3, r3, #1
 800608c:	fa02 f303 	lsl.w	r3, r2, r3
 8006090:	69ba      	ldr	r2, [r7, #24]
 8006092:	4313      	orrs	r3, r2
 8006094:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8006096:	687b      	ldr	r3, [r7, #4]
 8006098:	69ba      	ldr	r2, [r7, #24]
 800609a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800609c:	683b      	ldr	r3, [r7, #0]
 800609e:	685b      	ldr	r3, [r3, #4]
 80060a0:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80060a4:	2b00      	cmp	r3, #0
 80060a6:	f000 80ae 	beq.w	8006206 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80060aa:	2300      	movs	r3, #0
 80060ac:	60fb      	str	r3, [r7, #12]
 80060ae:	4b5d      	ldr	r3, [pc, #372]	; (8006224 <HAL_GPIO_Init+0x300>)
 80060b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80060b2:	4a5c      	ldr	r2, [pc, #368]	; (8006224 <HAL_GPIO_Init+0x300>)
 80060b4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80060b8:	6453      	str	r3, [r2, #68]	; 0x44
 80060ba:	4b5a      	ldr	r3, [pc, #360]	; (8006224 <HAL_GPIO_Init+0x300>)
 80060bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80060be:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80060c2:	60fb      	str	r3, [r7, #12]
 80060c4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80060c6:	4a58      	ldr	r2, [pc, #352]	; (8006228 <HAL_GPIO_Init+0x304>)
 80060c8:	69fb      	ldr	r3, [r7, #28]
 80060ca:	089b      	lsrs	r3, r3, #2
 80060cc:	3302      	adds	r3, #2
 80060ce:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80060d2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80060d4:	69fb      	ldr	r3, [r7, #28]
 80060d6:	f003 0303 	and.w	r3, r3, #3
 80060da:	009b      	lsls	r3, r3, #2
 80060dc:	220f      	movs	r2, #15
 80060de:	fa02 f303 	lsl.w	r3, r2, r3
 80060e2:	43db      	mvns	r3, r3
 80060e4:	69ba      	ldr	r2, [r7, #24]
 80060e6:	4013      	ands	r3, r2
 80060e8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80060ea:	687b      	ldr	r3, [r7, #4]
 80060ec:	4a4f      	ldr	r2, [pc, #316]	; (800622c <HAL_GPIO_Init+0x308>)
 80060ee:	4293      	cmp	r3, r2
 80060f0:	d025      	beq.n	800613e <HAL_GPIO_Init+0x21a>
 80060f2:	687b      	ldr	r3, [r7, #4]
 80060f4:	4a4e      	ldr	r2, [pc, #312]	; (8006230 <HAL_GPIO_Init+0x30c>)
 80060f6:	4293      	cmp	r3, r2
 80060f8:	d01f      	beq.n	800613a <HAL_GPIO_Init+0x216>
 80060fa:	687b      	ldr	r3, [r7, #4]
 80060fc:	4a4d      	ldr	r2, [pc, #308]	; (8006234 <HAL_GPIO_Init+0x310>)
 80060fe:	4293      	cmp	r3, r2
 8006100:	d019      	beq.n	8006136 <HAL_GPIO_Init+0x212>
 8006102:	687b      	ldr	r3, [r7, #4]
 8006104:	4a4c      	ldr	r2, [pc, #304]	; (8006238 <HAL_GPIO_Init+0x314>)
 8006106:	4293      	cmp	r3, r2
 8006108:	d013      	beq.n	8006132 <HAL_GPIO_Init+0x20e>
 800610a:	687b      	ldr	r3, [r7, #4]
 800610c:	4a4b      	ldr	r2, [pc, #300]	; (800623c <HAL_GPIO_Init+0x318>)
 800610e:	4293      	cmp	r3, r2
 8006110:	d00d      	beq.n	800612e <HAL_GPIO_Init+0x20a>
 8006112:	687b      	ldr	r3, [r7, #4]
 8006114:	4a4a      	ldr	r2, [pc, #296]	; (8006240 <HAL_GPIO_Init+0x31c>)
 8006116:	4293      	cmp	r3, r2
 8006118:	d007      	beq.n	800612a <HAL_GPIO_Init+0x206>
 800611a:	687b      	ldr	r3, [r7, #4]
 800611c:	4a49      	ldr	r2, [pc, #292]	; (8006244 <HAL_GPIO_Init+0x320>)
 800611e:	4293      	cmp	r3, r2
 8006120:	d101      	bne.n	8006126 <HAL_GPIO_Init+0x202>
 8006122:	2306      	movs	r3, #6
 8006124:	e00c      	b.n	8006140 <HAL_GPIO_Init+0x21c>
 8006126:	2307      	movs	r3, #7
 8006128:	e00a      	b.n	8006140 <HAL_GPIO_Init+0x21c>
 800612a:	2305      	movs	r3, #5
 800612c:	e008      	b.n	8006140 <HAL_GPIO_Init+0x21c>
 800612e:	2304      	movs	r3, #4
 8006130:	e006      	b.n	8006140 <HAL_GPIO_Init+0x21c>
 8006132:	2303      	movs	r3, #3
 8006134:	e004      	b.n	8006140 <HAL_GPIO_Init+0x21c>
 8006136:	2302      	movs	r3, #2
 8006138:	e002      	b.n	8006140 <HAL_GPIO_Init+0x21c>
 800613a:	2301      	movs	r3, #1
 800613c:	e000      	b.n	8006140 <HAL_GPIO_Init+0x21c>
 800613e:	2300      	movs	r3, #0
 8006140:	69fa      	ldr	r2, [r7, #28]
 8006142:	f002 0203 	and.w	r2, r2, #3
 8006146:	0092      	lsls	r2, r2, #2
 8006148:	4093      	lsls	r3, r2
 800614a:	69ba      	ldr	r2, [r7, #24]
 800614c:	4313      	orrs	r3, r2
 800614e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8006150:	4935      	ldr	r1, [pc, #212]	; (8006228 <HAL_GPIO_Init+0x304>)
 8006152:	69fb      	ldr	r3, [r7, #28]
 8006154:	089b      	lsrs	r3, r3, #2
 8006156:	3302      	adds	r3, #2
 8006158:	69ba      	ldr	r2, [r7, #24]
 800615a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800615e:	4b3a      	ldr	r3, [pc, #232]	; (8006248 <HAL_GPIO_Init+0x324>)
 8006160:	689b      	ldr	r3, [r3, #8]
 8006162:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8006164:	693b      	ldr	r3, [r7, #16]
 8006166:	43db      	mvns	r3, r3
 8006168:	69ba      	ldr	r2, [r7, #24]
 800616a:	4013      	ands	r3, r2
 800616c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800616e:	683b      	ldr	r3, [r7, #0]
 8006170:	685b      	ldr	r3, [r3, #4]
 8006172:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006176:	2b00      	cmp	r3, #0
 8006178:	d003      	beq.n	8006182 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 800617a:	69ba      	ldr	r2, [r7, #24]
 800617c:	693b      	ldr	r3, [r7, #16]
 800617e:	4313      	orrs	r3, r2
 8006180:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8006182:	4a31      	ldr	r2, [pc, #196]	; (8006248 <HAL_GPIO_Init+0x324>)
 8006184:	69bb      	ldr	r3, [r7, #24]
 8006186:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8006188:	4b2f      	ldr	r3, [pc, #188]	; (8006248 <HAL_GPIO_Init+0x324>)
 800618a:	68db      	ldr	r3, [r3, #12]
 800618c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800618e:	693b      	ldr	r3, [r7, #16]
 8006190:	43db      	mvns	r3, r3
 8006192:	69ba      	ldr	r2, [r7, #24]
 8006194:	4013      	ands	r3, r2
 8006196:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8006198:	683b      	ldr	r3, [r7, #0]
 800619a:	685b      	ldr	r3, [r3, #4]
 800619c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80061a0:	2b00      	cmp	r3, #0
 80061a2:	d003      	beq.n	80061ac <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 80061a4:	69ba      	ldr	r2, [r7, #24]
 80061a6:	693b      	ldr	r3, [r7, #16]
 80061a8:	4313      	orrs	r3, r2
 80061aa:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80061ac:	4a26      	ldr	r2, [pc, #152]	; (8006248 <HAL_GPIO_Init+0x324>)
 80061ae:	69bb      	ldr	r3, [r7, #24]
 80061b0:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80061b2:	4b25      	ldr	r3, [pc, #148]	; (8006248 <HAL_GPIO_Init+0x324>)
 80061b4:	685b      	ldr	r3, [r3, #4]
 80061b6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80061b8:	693b      	ldr	r3, [r7, #16]
 80061ba:	43db      	mvns	r3, r3
 80061bc:	69ba      	ldr	r2, [r7, #24]
 80061be:	4013      	ands	r3, r2
 80061c0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80061c2:	683b      	ldr	r3, [r7, #0]
 80061c4:	685b      	ldr	r3, [r3, #4]
 80061c6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80061ca:	2b00      	cmp	r3, #0
 80061cc:	d003      	beq.n	80061d6 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 80061ce:	69ba      	ldr	r2, [r7, #24]
 80061d0:	693b      	ldr	r3, [r7, #16]
 80061d2:	4313      	orrs	r3, r2
 80061d4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80061d6:	4a1c      	ldr	r2, [pc, #112]	; (8006248 <HAL_GPIO_Init+0x324>)
 80061d8:	69bb      	ldr	r3, [r7, #24]
 80061da:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80061dc:	4b1a      	ldr	r3, [pc, #104]	; (8006248 <HAL_GPIO_Init+0x324>)
 80061de:	681b      	ldr	r3, [r3, #0]
 80061e0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80061e2:	693b      	ldr	r3, [r7, #16]
 80061e4:	43db      	mvns	r3, r3
 80061e6:	69ba      	ldr	r2, [r7, #24]
 80061e8:	4013      	ands	r3, r2
 80061ea:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80061ec:	683b      	ldr	r3, [r7, #0]
 80061ee:	685b      	ldr	r3, [r3, #4]
 80061f0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80061f4:	2b00      	cmp	r3, #0
 80061f6:	d003      	beq.n	8006200 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 80061f8:	69ba      	ldr	r2, [r7, #24]
 80061fa:	693b      	ldr	r3, [r7, #16]
 80061fc:	4313      	orrs	r3, r2
 80061fe:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8006200:	4a11      	ldr	r2, [pc, #68]	; (8006248 <HAL_GPIO_Init+0x324>)
 8006202:	69bb      	ldr	r3, [r7, #24]
 8006204:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8006206:	69fb      	ldr	r3, [r7, #28]
 8006208:	3301      	adds	r3, #1
 800620a:	61fb      	str	r3, [r7, #28]
 800620c:	69fb      	ldr	r3, [r7, #28]
 800620e:	2b0f      	cmp	r3, #15
 8006210:	f67f ae96 	bls.w	8005f40 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8006214:	bf00      	nop
 8006216:	bf00      	nop
 8006218:	3724      	adds	r7, #36	; 0x24
 800621a:	46bd      	mov	sp, r7
 800621c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006220:	4770      	bx	lr
 8006222:	bf00      	nop
 8006224:	40023800 	.word	0x40023800
 8006228:	40013800 	.word	0x40013800
 800622c:	40020000 	.word	0x40020000
 8006230:	40020400 	.word	0x40020400
 8006234:	40020800 	.word	0x40020800
 8006238:	40020c00 	.word	0x40020c00
 800623c:	40021000 	.word	0x40021000
 8006240:	40021400 	.word	0x40021400
 8006244:	40021800 	.word	0x40021800
 8006248:	40013c00 	.word	0x40013c00

0800624c <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 800624c:	b480      	push	{r7}
 800624e:	b087      	sub	sp, #28
 8006250:	af00      	add	r7, sp, #0
 8006252:	6078      	str	r0, [r7, #4]
 8006254:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8006256:	2300      	movs	r3, #0
 8006258:	613b      	str	r3, [r7, #16]
  uint32_t iocurrent = 0x00U;
 800625a:	2300      	movs	r3, #0
 800625c:	60fb      	str	r3, [r7, #12]
  uint32_t tmp = 0x00U;
 800625e:	2300      	movs	r3, #0
 8006260:	60bb      	str	r3, [r7, #8]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  
  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8006262:	2300      	movs	r3, #0
 8006264:	617b      	str	r3, [r7, #20]
 8006266:	e0c7      	b.n	80063f8 <HAL_GPIO_DeInit+0x1ac>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8006268:	2201      	movs	r2, #1
 800626a:	697b      	ldr	r3, [r7, #20]
 800626c:	fa02 f303 	lsl.w	r3, r2, r3
 8006270:	613b      	str	r3, [r7, #16]
    /* Get the current IO position */
    iocurrent = (GPIO_Pin) & ioposition;
 8006272:	683a      	ldr	r2, [r7, #0]
 8006274:	693b      	ldr	r3, [r7, #16]
 8006276:	4013      	ands	r3, r2
 8006278:	60fb      	str	r3, [r7, #12]

    if(iocurrent == ioposition)
 800627a:	68fa      	ldr	r2, [r7, #12]
 800627c:	693b      	ldr	r3, [r7, #16]
 800627e:	429a      	cmp	r2, r3
 8006280:	f040 80b7 	bne.w	80063f2 <HAL_GPIO_DeInit+0x1a6>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      tmp = SYSCFG->EXTICR[position >> 2U];
 8006284:	4a62      	ldr	r2, [pc, #392]	; (8006410 <HAL_GPIO_DeInit+0x1c4>)
 8006286:	697b      	ldr	r3, [r7, #20]
 8006288:	089b      	lsrs	r3, r3, #2
 800628a:	3302      	adds	r3, #2
 800628c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006290:	60bb      	str	r3, [r7, #8]
      tmp &= (0x0FU << (4U * (position & 0x03U)));
 8006292:	697b      	ldr	r3, [r7, #20]
 8006294:	f003 0303 	and.w	r3, r3, #3
 8006298:	009b      	lsls	r3, r3, #2
 800629a:	220f      	movs	r2, #15
 800629c:	fa02 f303 	lsl.w	r3, r2, r3
 80062a0:	68ba      	ldr	r2, [r7, #8]
 80062a2:	4013      	ands	r3, r2
 80062a4:	60bb      	str	r3, [r7, #8]
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U))))
 80062a6:	687b      	ldr	r3, [r7, #4]
 80062a8:	4a5a      	ldr	r2, [pc, #360]	; (8006414 <HAL_GPIO_DeInit+0x1c8>)
 80062aa:	4293      	cmp	r3, r2
 80062ac:	d025      	beq.n	80062fa <HAL_GPIO_DeInit+0xae>
 80062ae:	687b      	ldr	r3, [r7, #4]
 80062b0:	4a59      	ldr	r2, [pc, #356]	; (8006418 <HAL_GPIO_DeInit+0x1cc>)
 80062b2:	4293      	cmp	r3, r2
 80062b4:	d01f      	beq.n	80062f6 <HAL_GPIO_DeInit+0xaa>
 80062b6:	687b      	ldr	r3, [r7, #4]
 80062b8:	4a58      	ldr	r2, [pc, #352]	; (800641c <HAL_GPIO_DeInit+0x1d0>)
 80062ba:	4293      	cmp	r3, r2
 80062bc:	d019      	beq.n	80062f2 <HAL_GPIO_DeInit+0xa6>
 80062be:	687b      	ldr	r3, [r7, #4]
 80062c0:	4a57      	ldr	r2, [pc, #348]	; (8006420 <HAL_GPIO_DeInit+0x1d4>)
 80062c2:	4293      	cmp	r3, r2
 80062c4:	d013      	beq.n	80062ee <HAL_GPIO_DeInit+0xa2>
 80062c6:	687b      	ldr	r3, [r7, #4]
 80062c8:	4a56      	ldr	r2, [pc, #344]	; (8006424 <HAL_GPIO_DeInit+0x1d8>)
 80062ca:	4293      	cmp	r3, r2
 80062cc:	d00d      	beq.n	80062ea <HAL_GPIO_DeInit+0x9e>
 80062ce:	687b      	ldr	r3, [r7, #4]
 80062d0:	4a55      	ldr	r2, [pc, #340]	; (8006428 <HAL_GPIO_DeInit+0x1dc>)
 80062d2:	4293      	cmp	r3, r2
 80062d4:	d007      	beq.n	80062e6 <HAL_GPIO_DeInit+0x9a>
 80062d6:	687b      	ldr	r3, [r7, #4]
 80062d8:	4a54      	ldr	r2, [pc, #336]	; (800642c <HAL_GPIO_DeInit+0x1e0>)
 80062da:	4293      	cmp	r3, r2
 80062dc:	d101      	bne.n	80062e2 <HAL_GPIO_DeInit+0x96>
 80062de:	2306      	movs	r3, #6
 80062e0:	e00c      	b.n	80062fc <HAL_GPIO_DeInit+0xb0>
 80062e2:	2307      	movs	r3, #7
 80062e4:	e00a      	b.n	80062fc <HAL_GPIO_DeInit+0xb0>
 80062e6:	2305      	movs	r3, #5
 80062e8:	e008      	b.n	80062fc <HAL_GPIO_DeInit+0xb0>
 80062ea:	2304      	movs	r3, #4
 80062ec:	e006      	b.n	80062fc <HAL_GPIO_DeInit+0xb0>
 80062ee:	2303      	movs	r3, #3
 80062f0:	e004      	b.n	80062fc <HAL_GPIO_DeInit+0xb0>
 80062f2:	2302      	movs	r3, #2
 80062f4:	e002      	b.n	80062fc <HAL_GPIO_DeInit+0xb0>
 80062f6:	2301      	movs	r3, #1
 80062f8:	e000      	b.n	80062fc <HAL_GPIO_DeInit+0xb0>
 80062fa:	2300      	movs	r3, #0
 80062fc:	697a      	ldr	r2, [r7, #20]
 80062fe:	f002 0203 	and.w	r2, r2, #3
 8006302:	0092      	lsls	r2, r2, #2
 8006304:	4093      	lsls	r3, r2
 8006306:	68ba      	ldr	r2, [r7, #8]
 8006308:	429a      	cmp	r2, r3
 800630a:	d132      	bne.n	8006372 <HAL_GPIO_DeInit+0x126>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 800630c:	4b48      	ldr	r3, [pc, #288]	; (8006430 <HAL_GPIO_DeInit+0x1e4>)
 800630e:	681a      	ldr	r2, [r3, #0]
 8006310:	68fb      	ldr	r3, [r7, #12]
 8006312:	43db      	mvns	r3, r3
 8006314:	4946      	ldr	r1, [pc, #280]	; (8006430 <HAL_GPIO_DeInit+0x1e4>)
 8006316:	4013      	ands	r3, r2
 8006318:	600b      	str	r3, [r1, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 800631a:	4b45      	ldr	r3, [pc, #276]	; (8006430 <HAL_GPIO_DeInit+0x1e4>)
 800631c:	685a      	ldr	r2, [r3, #4]
 800631e:	68fb      	ldr	r3, [r7, #12]
 8006320:	43db      	mvns	r3, r3
 8006322:	4943      	ldr	r1, [pc, #268]	; (8006430 <HAL_GPIO_DeInit+0x1e4>)
 8006324:	4013      	ands	r3, r2
 8006326:	604b      	str	r3, [r1, #4]
        
        /* Clear Rising Falling edge configuration */
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 8006328:	4b41      	ldr	r3, [pc, #260]	; (8006430 <HAL_GPIO_DeInit+0x1e4>)
 800632a:	68da      	ldr	r2, [r3, #12]
 800632c:	68fb      	ldr	r3, [r7, #12]
 800632e:	43db      	mvns	r3, r3
 8006330:	493f      	ldr	r1, [pc, #252]	; (8006430 <HAL_GPIO_DeInit+0x1e4>)
 8006332:	4013      	ands	r3, r2
 8006334:	60cb      	str	r3, [r1, #12]
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 8006336:	4b3e      	ldr	r3, [pc, #248]	; (8006430 <HAL_GPIO_DeInit+0x1e4>)
 8006338:	689a      	ldr	r2, [r3, #8]
 800633a:	68fb      	ldr	r3, [r7, #12]
 800633c:	43db      	mvns	r3, r3
 800633e:	493c      	ldr	r1, [pc, #240]	; (8006430 <HAL_GPIO_DeInit+0x1e4>)
 8006340:	4013      	ands	r3, r2
 8006342:	608b      	str	r3, [r1, #8]

        /* Configure the External Interrupt or event for the current IO */
        tmp = 0x0FU << (4U * (position & 0x03U));
 8006344:	697b      	ldr	r3, [r7, #20]
 8006346:	f003 0303 	and.w	r3, r3, #3
 800634a:	009b      	lsls	r3, r3, #2
 800634c:	220f      	movs	r2, #15
 800634e:	fa02 f303 	lsl.w	r3, r2, r3
 8006352:	60bb      	str	r3, [r7, #8]
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 8006354:	4a2e      	ldr	r2, [pc, #184]	; (8006410 <HAL_GPIO_DeInit+0x1c4>)
 8006356:	697b      	ldr	r3, [r7, #20]
 8006358:	089b      	lsrs	r3, r3, #2
 800635a:	3302      	adds	r3, #2
 800635c:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8006360:	68bb      	ldr	r3, [r7, #8]
 8006362:	43da      	mvns	r2, r3
 8006364:	482a      	ldr	r0, [pc, #168]	; (8006410 <HAL_GPIO_DeInit+0x1c4>)
 8006366:	697b      	ldr	r3, [r7, #20]
 8006368:	089b      	lsrs	r3, r3, #2
 800636a:	400a      	ands	r2, r1
 800636c:	3302      	adds	r3, #2
 800636e:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floating Mode */
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8006372:	687b      	ldr	r3, [r7, #4]
 8006374:	681a      	ldr	r2, [r3, #0]
 8006376:	697b      	ldr	r3, [r7, #20]
 8006378:	005b      	lsls	r3, r3, #1
 800637a:	2103      	movs	r1, #3
 800637c:	fa01 f303 	lsl.w	r3, r1, r3
 8006380:	43db      	mvns	r3, r3
 8006382:	401a      	ands	r2, r3
 8006384:	687b      	ldr	r3, [r7, #4]
 8006386:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8006388:	697b      	ldr	r3, [r7, #20]
 800638a:	08da      	lsrs	r2, r3, #3
 800638c:	687b      	ldr	r3, [r7, #4]
 800638e:	3208      	adds	r2, #8
 8006390:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8006394:	697b      	ldr	r3, [r7, #20]
 8006396:	f003 0307 	and.w	r3, r3, #7
 800639a:	009b      	lsls	r3, r3, #2
 800639c:	220f      	movs	r2, #15
 800639e:	fa02 f303 	lsl.w	r3, r2, r3
 80063a2:	43db      	mvns	r3, r3
 80063a4:	697a      	ldr	r2, [r7, #20]
 80063a6:	08d2      	lsrs	r2, r2, #3
 80063a8:	4019      	ands	r1, r3
 80063aa:	687b      	ldr	r3, [r7, #4]
 80063ac:	3208      	adds	r2, #8
 80063ae:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80063b2:	687b      	ldr	r3, [r7, #4]
 80063b4:	68da      	ldr	r2, [r3, #12]
 80063b6:	697b      	ldr	r3, [r7, #20]
 80063b8:	005b      	lsls	r3, r3, #1
 80063ba:	2103      	movs	r1, #3
 80063bc:	fa01 f303 	lsl.w	r3, r1, r3
 80063c0:	43db      	mvns	r3, r3
 80063c2:	401a      	ands	r2, r3
 80063c4:	687b      	ldr	r3, [r7, #4]
 80063c6:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 80063c8:	687b      	ldr	r3, [r7, #4]
 80063ca:	685a      	ldr	r2, [r3, #4]
 80063cc:	2101      	movs	r1, #1
 80063ce:	697b      	ldr	r3, [r7, #20]
 80063d0:	fa01 f303 	lsl.w	r3, r1, r3
 80063d4:	43db      	mvns	r3, r3
 80063d6:	401a      	ands	r2, r3
 80063d8:	687b      	ldr	r3, [r7, #4]
 80063da:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80063dc:	687b      	ldr	r3, [r7, #4]
 80063de:	689a      	ldr	r2, [r3, #8]
 80063e0:	697b      	ldr	r3, [r7, #20]
 80063e2:	005b      	lsls	r3, r3, #1
 80063e4:	2103      	movs	r1, #3
 80063e6:	fa01 f303 	lsl.w	r3, r1, r3
 80063ea:	43db      	mvns	r3, r3
 80063ec:	401a      	ands	r2, r3
 80063ee:	687b      	ldr	r3, [r7, #4]
 80063f0:	609a      	str	r2, [r3, #8]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80063f2:	697b      	ldr	r3, [r7, #20]
 80063f4:	3301      	adds	r3, #1
 80063f6:	617b      	str	r3, [r7, #20]
 80063f8:	697b      	ldr	r3, [r7, #20]
 80063fa:	2b0f      	cmp	r3, #15
 80063fc:	f67f af34 	bls.w	8006268 <HAL_GPIO_DeInit+0x1c>
    }
  }
}
 8006400:	bf00      	nop
 8006402:	bf00      	nop
 8006404:	371c      	adds	r7, #28
 8006406:	46bd      	mov	sp, r7
 8006408:	f85d 7b04 	ldr.w	r7, [sp], #4
 800640c:	4770      	bx	lr
 800640e:	bf00      	nop
 8006410:	40013800 	.word	0x40013800
 8006414:	40020000 	.word	0x40020000
 8006418:	40020400 	.word	0x40020400
 800641c:	40020800 	.word	0x40020800
 8006420:	40020c00 	.word	0x40020c00
 8006424:	40021000 	.word	0x40021000
 8006428:	40021400 	.word	0x40021400
 800642c:	40021800 	.word	0x40021800
 8006430:	40013c00 	.word	0x40013c00

08006434 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8006434:	b480      	push	{r7}
 8006436:	b083      	sub	sp, #12
 8006438:	af00      	add	r7, sp, #0
 800643a:	6078      	str	r0, [r7, #4]
 800643c:	460b      	mov	r3, r1
 800643e:	807b      	strh	r3, [r7, #2]
 8006440:	4613      	mov	r3, r2
 8006442:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8006444:	787b      	ldrb	r3, [r7, #1]
 8006446:	2b00      	cmp	r3, #0
 8006448:	d003      	beq.n	8006452 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800644a:	887a      	ldrh	r2, [r7, #2]
 800644c:	687b      	ldr	r3, [r7, #4]
 800644e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8006450:	e003      	b.n	800645a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8006452:	887b      	ldrh	r3, [r7, #2]
 8006454:	041a      	lsls	r2, r3, #16
 8006456:	687b      	ldr	r3, [r7, #4]
 8006458:	619a      	str	r2, [r3, #24]
}
 800645a:	bf00      	nop
 800645c:	370c      	adds	r7, #12
 800645e:	46bd      	mov	sp, r7
 8006460:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006464:	4770      	bx	lr
	...

08006468 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8006468:	b580      	push	{r7, lr}
 800646a:	b082      	sub	sp, #8
 800646c:	af00      	add	r7, sp, #0
 800646e:	4603      	mov	r3, r0
 8006470:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8006472:	4b08      	ldr	r3, [pc, #32]	; (8006494 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8006474:	695a      	ldr	r2, [r3, #20]
 8006476:	88fb      	ldrh	r3, [r7, #6]
 8006478:	4013      	ands	r3, r2
 800647a:	2b00      	cmp	r3, #0
 800647c:	d006      	beq.n	800648c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800647e:	4a05      	ldr	r2, [pc, #20]	; (8006494 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8006480:	88fb      	ldrh	r3, [r7, #6]
 8006482:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8006484:	88fb      	ldrh	r3, [r7, #6]
 8006486:	4618      	mov	r0, r3
 8006488:	f003 fd02 	bl	8009e90 <HAL_GPIO_EXTI_Callback>
  }
}
 800648c:	bf00      	nop
 800648e:	3708      	adds	r7, #8
 8006490:	46bd      	mov	sp, r7
 8006492:	bd80      	pop	{r7, pc}
 8006494:	40013c00 	.word	0x40013c00

08006498 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8006498:	b580      	push	{r7, lr}
 800649a:	b084      	sub	sp, #16
 800649c:	af00      	add	r7, sp, #0
 800649e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80064a0:	687b      	ldr	r3, [r7, #4]
 80064a2:	2b00      	cmp	r3, #0
 80064a4:	d101      	bne.n	80064aa <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80064a6:	2301      	movs	r3, #1
 80064a8:	e12b      	b.n	8006702 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80064aa:	687b      	ldr	r3, [r7, #4]
 80064ac:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80064b0:	b2db      	uxtb	r3, r3
 80064b2:	2b00      	cmp	r3, #0
 80064b4:	d106      	bne.n	80064c4 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80064b6:	687b      	ldr	r3, [r7, #4]
 80064b8:	2200      	movs	r2, #0
 80064ba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80064be:	6878      	ldr	r0, [r7, #4]
 80064c0:	f000 f95d 	bl	800677e <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80064c4:	687b      	ldr	r3, [r7, #4]
 80064c6:	2224      	movs	r2, #36	; 0x24
 80064c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80064cc:	687b      	ldr	r3, [r7, #4]
 80064ce:	681b      	ldr	r3, [r3, #0]
 80064d0:	681a      	ldr	r2, [r3, #0]
 80064d2:	687b      	ldr	r3, [r7, #4]
 80064d4:	681b      	ldr	r3, [r3, #0]
 80064d6:	f022 0201 	bic.w	r2, r2, #1
 80064da:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80064dc:	687b      	ldr	r3, [r7, #4]
 80064de:	681b      	ldr	r3, [r3, #0]
 80064e0:	681a      	ldr	r2, [r3, #0]
 80064e2:	687b      	ldr	r3, [r7, #4]
 80064e4:	681b      	ldr	r3, [r3, #0]
 80064e6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80064ea:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80064ec:	687b      	ldr	r3, [r7, #4]
 80064ee:	681b      	ldr	r3, [r3, #0]
 80064f0:	681a      	ldr	r2, [r3, #0]
 80064f2:	687b      	ldr	r3, [r7, #4]
 80064f4:	681b      	ldr	r3, [r3, #0]
 80064f6:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80064fa:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80064fc:	f001 f8dc 	bl	80076b8 <HAL_RCC_GetPCLK1Freq>
 8006500:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8006502:	687b      	ldr	r3, [r7, #4]
 8006504:	685b      	ldr	r3, [r3, #4]
 8006506:	4a81      	ldr	r2, [pc, #516]	; (800670c <HAL_I2C_Init+0x274>)
 8006508:	4293      	cmp	r3, r2
 800650a:	d807      	bhi.n	800651c <HAL_I2C_Init+0x84>
 800650c:	68fb      	ldr	r3, [r7, #12]
 800650e:	4a80      	ldr	r2, [pc, #512]	; (8006710 <HAL_I2C_Init+0x278>)
 8006510:	4293      	cmp	r3, r2
 8006512:	bf94      	ite	ls
 8006514:	2301      	movls	r3, #1
 8006516:	2300      	movhi	r3, #0
 8006518:	b2db      	uxtb	r3, r3
 800651a:	e006      	b.n	800652a <HAL_I2C_Init+0x92>
 800651c:	68fb      	ldr	r3, [r7, #12]
 800651e:	4a7d      	ldr	r2, [pc, #500]	; (8006714 <HAL_I2C_Init+0x27c>)
 8006520:	4293      	cmp	r3, r2
 8006522:	bf94      	ite	ls
 8006524:	2301      	movls	r3, #1
 8006526:	2300      	movhi	r3, #0
 8006528:	b2db      	uxtb	r3, r3
 800652a:	2b00      	cmp	r3, #0
 800652c:	d001      	beq.n	8006532 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800652e:	2301      	movs	r3, #1
 8006530:	e0e7      	b.n	8006702 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8006532:	68fb      	ldr	r3, [r7, #12]
 8006534:	4a78      	ldr	r2, [pc, #480]	; (8006718 <HAL_I2C_Init+0x280>)
 8006536:	fba2 2303 	umull	r2, r3, r2, r3
 800653a:	0c9b      	lsrs	r3, r3, #18
 800653c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800653e:	687b      	ldr	r3, [r7, #4]
 8006540:	681b      	ldr	r3, [r3, #0]
 8006542:	685b      	ldr	r3, [r3, #4]
 8006544:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8006548:	687b      	ldr	r3, [r7, #4]
 800654a:	681b      	ldr	r3, [r3, #0]
 800654c:	68ba      	ldr	r2, [r7, #8]
 800654e:	430a      	orrs	r2, r1
 8006550:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8006552:	687b      	ldr	r3, [r7, #4]
 8006554:	681b      	ldr	r3, [r3, #0]
 8006556:	6a1b      	ldr	r3, [r3, #32]
 8006558:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800655c:	687b      	ldr	r3, [r7, #4]
 800655e:	685b      	ldr	r3, [r3, #4]
 8006560:	4a6a      	ldr	r2, [pc, #424]	; (800670c <HAL_I2C_Init+0x274>)
 8006562:	4293      	cmp	r3, r2
 8006564:	d802      	bhi.n	800656c <HAL_I2C_Init+0xd4>
 8006566:	68bb      	ldr	r3, [r7, #8]
 8006568:	3301      	adds	r3, #1
 800656a:	e009      	b.n	8006580 <HAL_I2C_Init+0xe8>
 800656c:	68bb      	ldr	r3, [r7, #8]
 800656e:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8006572:	fb02 f303 	mul.w	r3, r2, r3
 8006576:	4a69      	ldr	r2, [pc, #420]	; (800671c <HAL_I2C_Init+0x284>)
 8006578:	fba2 2303 	umull	r2, r3, r2, r3
 800657c:	099b      	lsrs	r3, r3, #6
 800657e:	3301      	adds	r3, #1
 8006580:	687a      	ldr	r2, [r7, #4]
 8006582:	6812      	ldr	r2, [r2, #0]
 8006584:	430b      	orrs	r3, r1
 8006586:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8006588:	687b      	ldr	r3, [r7, #4]
 800658a:	681b      	ldr	r3, [r3, #0]
 800658c:	69db      	ldr	r3, [r3, #28]
 800658e:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8006592:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8006596:	687b      	ldr	r3, [r7, #4]
 8006598:	685b      	ldr	r3, [r3, #4]
 800659a:	495c      	ldr	r1, [pc, #368]	; (800670c <HAL_I2C_Init+0x274>)
 800659c:	428b      	cmp	r3, r1
 800659e:	d819      	bhi.n	80065d4 <HAL_I2C_Init+0x13c>
 80065a0:	68fb      	ldr	r3, [r7, #12]
 80065a2:	1e59      	subs	r1, r3, #1
 80065a4:	687b      	ldr	r3, [r7, #4]
 80065a6:	685b      	ldr	r3, [r3, #4]
 80065a8:	005b      	lsls	r3, r3, #1
 80065aa:	fbb1 f3f3 	udiv	r3, r1, r3
 80065ae:	1c59      	adds	r1, r3, #1
 80065b0:	f640 73fc 	movw	r3, #4092	; 0xffc
 80065b4:	400b      	ands	r3, r1
 80065b6:	2b00      	cmp	r3, #0
 80065b8:	d00a      	beq.n	80065d0 <HAL_I2C_Init+0x138>
 80065ba:	68fb      	ldr	r3, [r7, #12]
 80065bc:	1e59      	subs	r1, r3, #1
 80065be:	687b      	ldr	r3, [r7, #4]
 80065c0:	685b      	ldr	r3, [r3, #4]
 80065c2:	005b      	lsls	r3, r3, #1
 80065c4:	fbb1 f3f3 	udiv	r3, r1, r3
 80065c8:	3301      	adds	r3, #1
 80065ca:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80065ce:	e051      	b.n	8006674 <HAL_I2C_Init+0x1dc>
 80065d0:	2304      	movs	r3, #4
 80065d2:	e04f      	b.n	8006674 <HAL_I2C_Init+0x1dc>
 80065d4:	687b      	ldr	r3, [r7, #4]
 80065d6:	689b      	ldr	r3, [r3, #8]
 80065d8:	2b00      	cmp	r3, #0
 80065da:	d111      	bne.n	8006600 <HAL_I2C_Init+0x168>
 80065dc:	68fb      	ldr	r3, [r7, #12]
 80065de:	1e58      	subs	r0, r3, #1
 80065e0:	687b      	ldr	r3, [r7, #4]
 80065e2:	6859      	ldr	r1, [r3, #4]
 80065e4:	460b      	mov	r3, r1
 80065e6:	005b      	lsls	r3, r3, #1
 80065e8:	440b      	add	r3, r1
 80065ea:	fbb0 f3f3 	udiv	r3, r0, r3
 80065ee:	3301      	adds	r3, #1
 80065f0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80065f4:	2b00      	cmp	r3, #0
 80065f6:	bf0c      	ite	eq
 80065f8:	2301      	moveq	r3, #1
 80065fa:	2300      	movne	r3, #0
 80065fc:	b2db      	uxtb	r3, r3
 80065fe:	e012      	b.n	8006626 <HAL_I2C_Init+0x18e>
 8006600:	68fb      	ldr	r3, [r7, #12]
 8006602:	1e58      	subs	r0, r3, #1
 8006604:	687b      	ldr	r3, [r7, #4]
 8006606:	6859      	ldr	r1, [r3, #4]
 8006608:	460b      	mov	r3, r1
 800660a:	009b      	lsls	r3, r3, #2
 800660c:	440b      	add	r3, r1
 800660e:	0099      	lsls	r1, r3, #2
 8006610:	440b      	add	r3, r1
 8006612:	fbb0 f3f3 	udiv	r3, r0, r3
 8006616:	3301      	adds	r3, #1
 8006618:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800661c:	2b00      	cmp	r3, #0
 800661e:	bf0c      	ite	eq
 8006620:	2301      	moveq	r3, #1
 8006622:	2300      	movne	r3, #0
 8006624:	b2db      	uxtb	r3, r3
 8006626:	2b00      	cmp	r3, #0
 8006628:	d001      	beq.n	800662e <HAL_I2C_Init+0x196>
 800662a:	2301      	movs	r3, #1
 800662c:	e022      	b.n	8006674 <HAL_I2C_Init+0x1dc>
 800662e:	687b      	ldr	r3, [r7, #4]
 8006630:	689b      	ldr	r3, [r3, #8]
 8006632:	2b00      	cmp	r3, #0
 8006634:	d10e      	bne.n	8006654 <HAL_I2C_Init+0x1bc>
 8006636:	68fb      	ldr	r3, [r7, #12]
 8006638:	1e58      	subs	r0, r3, #1
 800663a:	687b      	ldr	r3, [r7, #4]
 800663c:	6859      	ldr	r1, [r3, #4]
 800663e:	460b      	mov	r3, r1
 8006640:	005b      	lsls	r3, r3, #1
 8006642:	440b      	add	r3, r1
 8006644:	fbb0 f3f3 	udiv	r3, r0, r3
 8006648:	3301      	adds	r3, #1
 800664a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800664e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006652:	e00f      	b.n	8006674 <HAL_I2C_Init+0x1dc>
 8006654:	68fb      	ldr	r3, [r7, #12]
 8006656:	1e58      	subs	r0, r3, #1
 8006658:	687b      	ldr	r3, [r7, #4]
 800665a:	6859      	ldr	r1, [r3, #4]
 800665c:	460b      	mov	r3, r1
 800665e:	009b      	lsls	r3, r3, #2
 8006660:	440b      	add	r3, r1
 8006662:	0099      	lsls	r1, r3, #2
 8006664:	440b      	add	r3, r1
 8006666:	fbb0 f3f3 	udiv	r3, r0, r3
 800666a:	3301      	adds	r3, #1
 800666c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006670:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8006674:	6879      	ldr	r1, [r7, #4]
 8006676:	6809      	ldr	r1, [r1, #0]
 8006678:	4313      	orrs	r3, r2
 800667a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 800667c:	687b      	ldr	r3, [r7, #4]
 800667e:	681b      	ldr	r3, [r3, #0]
 8006680:	681b      	ldr	r3, [r3, #0]
 8006682:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8006686:	687b      	ldr	r3, [r7, #4]
 8006688:	69da      	ldr	r2, [r3, #28]
 800668a:	687b      	ldr	r3, [r7, #4]
 800668c:	6a1b      	ldr	r3, [r3, #32]
 800668e:	431a      	orrs	r2, r3
 8006690:	687b      	ldr	r3, [r7, #4]
 8006692:	681b      	ldr	r3, [r3, #0]
 8006694:	430a      	orrs	r2, r1
 8006696:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8006698:	687b      	ldr	r3, [r7, #4]
 800669a:	681b      	ldr	r3, [r3, #0]
 800669c:	689b      	ldr	r3, [r3, #8]
 800669e:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80066a2:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80066a6:	687a      	ldr	r2, [r7, #4]
 80066a8:	6911      	ldr	r1, [r2, #16]
 80066aa:	687a      	ldr	r2, [r7, #4]
 80066ac:	68d2      	ldr	r2, [r2, #12]
 80066ae:	4311      	orrs	r1, r2
 80066b0:	687a      	ldr	r2, [r7, #4]
 80066b2:	6812      	ldr	r2, [r2, #0]
 80066b4:	430b      	orrs	r3, r1
 80066b6:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80066b8:	687b      	ldr	r3, [r7, #4]
 80066ba:	681b      	ldr	r3, [r3, #0]
 80066bc:	68db      	ldr	r3, [r3, #12]
 80066be:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80066c2:	687b      	ldr	r3, [r7, #4]
 80066c4:	695a      	ldr	r2, [r3, #20]
 80066c6:	687b      	ldr	r3, [r7, #4]
 80066c8:	699b      	ldr	r3, [r3, #24]
 80066ca:	431a      	orrs	r2, r3
 80066cc:	687b      	ldr	r3, [r7, #4]
 80066ce:	681b      	ldr	r3, [r3, #0]
 80066d0:	430a      	orrs	r2, r1
 80066d2:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80066d4:	687b      	ldr	r3, [r7, #4]
 80066d6:	681b      	ldr	r3, [r3, #0]
 80066d8:	681a      	ldr	r2, [r3, #0]
 80066da:	687b      	ldr	r3, [r7, #4]
 80066dc:	681b      	ldr	r3, [r3, #0]
 80066de:	f042 0201 	orr.w	r2, r2, #1
 80066e2:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80066e4:	687b      	ldr	r3, [r7, #4]
 80066e6:	2200      	movs	r2, #0
 80066e8:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80066ea:	687b      	ldr	r3, [r7, #4]
 80066ec:	2220      	movs	r2, #32
 80066ee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80066f2:	687b      	ldr	r3, [r7, #4]
 80066f4:	2200      	movs	r2, #0
 80066f6:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80066f8:	687b      	ldr	r3, [r7, #4]
 80066fa:	2200      	movs	r2, #0
 80066fc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8006700:	2300      	movs	r3, #0
}
 8006702:	4618      	mov	r0, r3
 8006704:	3710      	adds	r7, #16
 8006706:	46bd      	mov	sp, r7
 8006708:	bd80      	pop	{r7, pc}
 800670a:	bf00      	nop
 800670c:	000186a0 	.word	0x000186a0
 8006710:	001e847f 	.word	0x001e847f
 8006714:	003d08ff 	.word	0x003d08ff
 8006718:	431bde83 	.word	0x431bde83
 800671c:	10624dd3 	.word	0x10624dd3

08006720 <HAL_I2C_DeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
 8006720:	b580      	push	{r7, lr}
 8006722:	b082      	sub	sp, #8
 8006724:	af00      	add	r7, sp, #0
 8006726:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8006728:	687b      	ldr	r3, [r7, #4]
 800672a:	2b00      	cmp	r3, #0
 800672c:	d101      	bne.n	8006732 <HAL_I2C_DeInit+0x12>
  {
    return HAL_ERROR;
 800672e:	2301      	movs	r3, #1
 8006730:	e021      	b.n	8006776 <HAL_I2C_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));

  hi2c->State = HAL_I2C_STATE_BUSY;
 8006732:	687b      	ldr	r3, [r7, #4]
 8006734:	2224      	movs	r2, #36	; 0x24
 8006736:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);
 800673a:	687b      	ldr	r3, [r7, #4]
 800673c:	681b      	ldr	r3, [r3, #0]
 800673e:	681a      	ldr	r2, [r3, #0]
 8006740:	687b      	ldr	r3, [r7, #4]
 8006742:	681b      	ldr	r3, [r3, #0]
 8006744:	f022 0201 	bic.w	r2, r2, #1
 8006748:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  hi2c->MspDeInitCallback(hi2c);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);
 800674a:	6878      	ldr	r0, [r7, #4]
 800674c:	f000 f821 	bl	8006792 <HAL_I2C_MspDeInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */

  hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 8006750:	687b      	ldr	r3, [r7, #4]
 8006752:	2200      	movs	r2, #0
 8006754:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State         = HAL_I2C_STATE_RESET;
 8006756:	687b      	ldr	r3, [r7, #4]
 8006758:	2200      	movs	r2, #0
 800675a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800675e:	687b      	ldr	r3, [r7, #4]
 8006760:	2200      	movs	r2, #0
 8006762:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 8006764:	687b      	ldr	r3, [r7, #4]
 8006766:	2200      	movs	r2, #0
 8006768:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Release Lock */
  __HAL_UNLOCK(hi2c);
 800676c:	687b      	ldr	r3, [r7, #4]
 800676e:	2200      	movs	r2, #0
 8006770:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006774:	2300      	movs	r3, #0
}
 8006776:	4618      	mov	r0, r3
 8006778:	3708      	adds	r7, #8
 800677a:	46bd      	mov	sp, r7
 800677c:	bd80      	pop	{r7, pc}

0800677e <HAL_I2C_MspInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MspInit(I2C_HandleTypeDef *hi2c)
{
 800677e:	b480      	push	{r7}
 8006780:	b083      	sub	sp, #12
 8006782:	af00      	add	r7, sp, #0
 8006784:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MspInit could be implemented in the user file
   */
}
 8006786:	bf00      	nop
 8006788:	370c      	adds	r7, #12
 800678a:	46bd      	mov	sp, r7
 800678c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006790:	4770      	bx	lr

08006792 <HAL_I2C_MspDeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MspDeInit(I2C_HandleTypeDef *hi2c)
{
 8006792:	b480      	push	{r7}
 8006794:	b083      	sub	sp, #12
 8006796:	af00      	add	r7, sp, #0
 8006798:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MspDeInit could be implemented in the user file
   */
}
 800679a:	bf00      	nop
 800679c:	370c      	adds	r7, #12
 800679e:	46bd      	mov	sp, r7
 80067a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067a4:	4770      	bx	lr
	...

080067a8 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80067a8:	b580      	push	{r7, lr}
 80067aa:	b088      	sub	sp, #32
 80067ac:	af02      	add	r7, sp, #8
 80067ae:	60f8      	str	r0, [r7, #12]
 80067b0:	4608      	mov	r0, r1
 80067b2:	4611      	mov	r1, r2
 80067b4:	461a      	mov	r2, r3
 80067b6:	4603      	mov	r3, r0
 80067b8:	817b      	strh	r3, [r7, #10]
 80067ba:	460b      	mov	r3, r1
 80067bc:	813b      	strh	r3, [r7, #8]
 80067be:	4613      	mov	r3, r2
 80067c0:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80067c2:	f7ff fa3f 	bl	8005c44 <HAL_GetTick>
 80067c6:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80067c8:	68fb      	ldr	r3, [r7, #12]
 80067ca:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80067ce:	b2db      	uxtb	r3, r3
 80067d0:	2b20      	cmp	r3, #32
 80067d2:	f040 80d9 	bne.w	8006988 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80067d6:	697b      	ldr	r3, [r7, #20]
 80067d8:	9300      	str	r3, [sp, #0]
 80067da:	2319      	movs	r3, #25
 80067dc:	2201      	movs	r2, #1
 80067de:	496d      	ldr	r1, [pc, #436]	; (8006994 <HAL_I2C_Mem_Write+0x1ec>)
 80067e0:	68f8      	ldr	r0, [r7, #12]
 80067e2:	f000 fc99 	bl	8007118 <I2C_WaitOnFlagUntilTimeout>
 80067e6:	4603      	mov	r3, r0
 80067e8:	2b00      	cmp	r3, #0
 80067ea:	d001      	beq.n	80067f0 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 80067ec:	2302      	movs	r3, #2
 80067ee:	e0cc      	b.n	800698a <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80067f0:	68fb      	ldr	r3, [r7, #12]
 80067f2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80067f6:	2b01      	cmp	r3, #1
 80067f8:	d101      	bne.n	80067fe <HAL_I2C_Mem_Write+0x56>
 80067fa:	2302      	movs	r3, #2
 80067fc:	e0c5      	b.n	800698a <HAL_I2C_Mem_Write+0x1e2>
 80067fe:	68fb      	ldr	r3, [r7, #12]
 8006800:	2201      	movs	r2, #1
 8006802:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8006806:	68fb      	ldr	r3, [r7, #12]
 8006808:	681b      	ldr	r3, [r3, #0]
 800680a:	681b      	ldr	r3, [r3, #0]
 800680c:	f003 0301 	and.w	r3, r3, #1
 8006810:	2b01      	cmp	r3, #1
 8006812:	d007      	beq.n	8006824 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8006814:	68fb      	ldr	r3, [r7, #12]
 8006816:	681b      	ldr	r3, [r3, #0]
 8006818:	681a      	ldr	r2, [r3, #0]
 800681a:	68fb      	ldr	r3, [r7, #12]
 800681c:	681b      	ldr	r3, [r3, #0]
 800681e:	f042 0201 	orr.w	r2, r2, #1
 8006822:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8006824:	68fb      	ldr	r3, [r7, #12]
 8006826:	681b      	ldr	r3, [r3, #0]
 8006828:	681a      	ldr	r2, [r3, #0]
 800682a:	68fb      	ldr	r3, [r7, #12]
 800682c:	681b      	ldr	r3, [r3, #0]
 800682e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8006832:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8006834:	68fb      	ldr	r3, [r7, #12]
 8006836:	2221      	movs	r2, #33	; 0x21
 8006838:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800683c:	68fb      	ldr	r3, [r7, #12]
 800683e:	2240      	movs	r2, #64	; 0x40
 8006840:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006844:	68fb      	ldr	r3, [r7, #12]
 8006846:	2200      	movs	r2, #0
 8006848:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800684a:	68fb      	ldr	r3, [r7, #12]
 800684c:	6a3a      	ldr	r2, [r7, #32]
 800684e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8006850:	68fb      	ldr	r3, [r7, #12]
 8006852:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8006854:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8006856:	68fb      	ldr	r3, [r7, #12]
 8006858:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800685a:	b29a      	uxth	r2, r3
 800685c:	68fb      	ldr	r3, [r7, #12]
 800685e:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8006860:	68fb      	ldr	r3, [r7, #12]
 8006862:	4a4d      	ldr	r2, [pc, #308]	; (8006998 <HAL_I2C_Mem_Write+0x1f0>)
 8006864:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8006866:	88f8      	ldrh	r0, [r7, #6]
 8006868:	893a      	ldrh	r2, [r7, #8]
 800686a:	8979      	ldrh	r1, [r7, #10]
 800686c:	697b      	ldr	r3, [r7, #20]
 800686e:	9301      	str	r3, [sp, #4]
 8006870:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006872:	9300      	str	r3, [sp, #0]
 8006874:	4603      	mov	r3, r0
 8006876:	68f8      	ldr	r0, [r7, #12]
 8006878:	f000 fad0 	bl	8006e1c <I2C_RequestMemoryWrite>
 800687c:	4603      	mov	r3, r0
 800687e:	2b00      	cmp	r3, #0
 8006880:	d052      	beq.n	8006928 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8006882:	2301      	movs	r3, #1
 8006884:	e081      	b.n	800698a <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006886:	697a      	ldr	r2, [r7, #20]
 8006888:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800688a:	68f8      	ldr	r0, [r7, #12]
 800688c:	f000 fd1a 	bl	80072c4 <I2C_WaitOnTXEFlagUntilTimeout>
 8006890:	4603      	mov	r3, r0
 8006892:	2b00      	cmp	r3, #0
 8006894:	d00d      	beq.n	80068b2 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006896:	68fb      	ldr	r3, [r7, #12]
 8006898:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800689a:	2b04      	cmp	r3, #4
 800689c:	d107      	bne.n	80068ae <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800689e:	68fb      	ldr	r3, [r7, #12]
 80068a0:	681b      	ldr	r3, [r3, #0]
 80068a2:	681a      	ldr	r2, [r3, #0]
 80068a4:	68fb      	ldr	r3, [r7, #12]
 80068a6:	681b      	ldr	r3, [r3, #0]
 80068a8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80068ac:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80068ae:	2301      	movs	r3, #1
 80068b0:	e06b      	b.n	800698a <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80068b2:	68fb      	ldr	r3, [r7, #12]
 80068b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80068b6:	781a      	ldrb	r2, [r3, #0]
 80068b8:	68fb      	ldr	r3, [r7, #12]
 80068ba:	681b      	ldr	r3, [r3, #0]
 80068bc:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80068be:	68fb      	ldr	r3, [r7, #12]
 80068c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80068c2:	1c5a      	adds	r2, r3, #1
 80068c4:	68fb      	ldr	r3, [r7, #12]
 80068c6:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 80068c8:	68fb      	ldr	r3, [r7, #12]
 80068ca:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80068cc:	3b01      	subs	r3, #1
 80068ce:	b29a      	uxth	r2, r3
 80068d0:	68fb      	ldr	r3, [r7, #12]
 80068d2:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80068d4:	68fb      	ldr	r3, [r7, #12]
 80068d6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80068d8:	b29b      	uxth	r3, r3
 80068da:	3b01      	subs	r3, #1
 80068dc:	b29a      	uxth	r2, r3
 80068de:	68fb      	ldr	r3, [r7, #12]
 80068e0:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80068e2:	68fb      	ldr	r3, [r7, #12]
 80068e4:	681b      	ldr	r3, [r3, #0]
 80068e6:	695b      	ldr	r3, [r3, #20]
 80068e8:	f003 0304 	and.w	r3, r3, #4
 80068ec:	2b04      	cmp	r3, #4
 80068ee:	d11b      	bne.n	8006928 <HAL_I2C_Mem_Write+0x180>
 80068f0:	68fb      	ldr	r3, [r7, #12]
 80068f2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80068f4:	2b00      	cmp	r3, #0
 80068f6:	d017      	beq.n	8006928 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80068f8:	68fb      	ldr	r3, [r7, #12]
 80068fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80068fc:	781a      	ldrb	r2, [r3, #0]
 80068fe:	68fb      	ldr	r3, [r7, #12]
 8006900:	681b      	ldr	r3, [r3, #0]
 8006902:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8006904:	68fb      	ldr	r3, [r7, #12]
 8006906:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006908:	1c5a      	adds	r2, r3, #1
 800690a:	68fb      	ldr	r3, [r7, #12]
 800690c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 800690e:	68fb      	ldr	r3, [r7, #12]
 8006910:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006912:	3b01      	subs	r3, #1
 8006914:	b29a      	uxth	r2, r3
 8006916:	68fb      	ldr	r3, [r7, #12]
 8006918:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 800691a:	68fb      	ldr	r3, [r7, #12]
 800691c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800691e:	b29b      	uxth	r3, r3
 8006920:	3b01      	subs	r3, #1
 8006922:	b29a      	uxth	r2, r3
 8006924:	68fb      	ldr	r3, [r7, #12]
 8006926:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8006928:	68fb      	ldr	r3, [r7, #12]
 800692a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800692c:	2b00      	cmp	r3, #0
 800692e:	d1aa      	bne.n	8006886 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006930:	697a      	ldr	r2, [r7, #20]
 8006932:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006934:	68f8      	ldr	r0, [r7, #12]
 8006936:	f000 fd06 	bl	8007346 <I2C_WaitOnBTFFlagUntilTimeout>
 800693a:	4603      	mov	r3, r0
 800693c:	2b00      	cmp	r3, #0
 800693e:	d00d      	beq.n	800695c <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006940:	68fb      	ldr	r3, [r7, #12]
 8006942:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006944:	2b04      	cmp	r3, #4
 8006946:	d107      	bne.n	8006958 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006948:	68fb      	ldr	r3, [r7, #12]
 800694a:	681b      	ldr	r3, [r3, #0]
 800694c:	681a      	ldr	r2, [r3, #0]
 800694e:	68fb      	ldr	r3, [r7, #12]
 8006950:	681b      	ldr	r3, [r3, #0]
 8006952:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006956:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8006958:	2301      	movs	r3, #1
 800695a:	e016      	b.n	800698a <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800695c:	68fb      	ldr	r3, [r7, #12]
 800695e:	681b      	ldr	r3, [r3, #0]
 8006960:	681a      	ldr	r2, [r3, #0]
 8006962:	68fb      	ldr	r3, [r7, #12]
 8006964:	681b      	ldr	r3, [r3, #0]
 8006966:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800696a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800696c:	68fb      	ldr	r3, [r7, #12]
 800696e:	2220      	movs	r2, #32
 8006970:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8006974:	68fb      	ldr	r3, [r7, #12]
 8006976:	2200      	movs	r2, #0
 8006978:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800697c:	68fb      	ldr	r3, [r7, #12]
 800697e:	2200      	movs	r2, #0
 8006980:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8006984:	2300      	movs	r3, #0
 8006986:	e000      	b.n	800698a <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8006988:	2302      	movs	r3, #2
  }
}
 800698a:	4618      	mov	r0, r3
 800698c:	3718      	adds	r7, #24
 800698e:	46bd      	mov	sp, r7
 8006990:	bd80      	pop	{r7, pc}
 8006992:	bf00      	nop
 8006994:	00100002 	.word	0x00100002
 8006998:	ffff0000 	.word	0xffff0000

0800699c <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800699c:	b580      	push	{r7, lr}
 800699e:	b08c      	sub	sp, #48	; 0x30
 80069a0:	af02      	add	r7, sp, #8
 80069a2:	60f8      	str	r0, [r7, #12]
 80069a4:	4608      	mov	r0, r1
 80069a6:	4611      	mov	r1, r2
 80069a8:	461a      	mov	r2, r3
 80069aa:	4603      	mov	r3, r0
 80069ac:	817b      	strh	r3, [r7, #10]
 80069ae:	460b      	mov	r3, r1
 80069b0:	813b      	strh	r3, [r7, #8]
 80069b2:	4613      	mov	r3, r2
 80069b4:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80069b6:	f7ff f945 	bl	8005c44 <HAL_GetTick>
 80069ba:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80069bc:	68fb      	ldr	r3, [r7, #12]
 80069be:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80069c2:	b2db      	uxtb	r3, r3
 80069c4:	2b20      	cmp	r3, #32
 80069c6:	f040 8208 	bne.w	8006dda <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80069ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80069cc:	9300      	str	r3, [sp, #0]
 80069ce:	2319      	movs	r3, #25
 80069d0:	2201      	movs	r2, #1
 80069d2:	497b      	ldr	r1, [pc, #492]	; (8006bc0 <HAL_I2C_Mem_Read+0x224>)
 80069d4:	68f8      	ldr	r0, [r7, #12]
 80069d6:	f000 fb9f 	bl	8007118 <I2C_WaitOnFlagUntilTimeout>
 80069da:	4603      	mov	r3, r0
 80069dc:	2b00      	cmp	r3, #0
 80069de:	d001      	beq.n	80069e4 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 80069e0:	2302      	movs	r3, #2
 80069e2:	e1fb      	b.n	8006ddc <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80069e4:	68fb      	ldr	r3, [r7, #12]
 80069e6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80069ea:	2b01      	cmp	r3, #1
 80069ec:	d101      	bne.n	80069f2 <HAL_I2C_Mem_Read+0x56>
 80069ee:	2302      	movs	r3, #2
 80069f0:	e1f4      	b.n	8006ddc <HAL_I2C_Mem_Read+0x440>
 80069f2:	68fb      	ldr	r3, [r7, #12]
 80069f4:	2201      	movs	r2, #1
 80069f6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80069fa:	68fb      	ldr	r3, [r7, #12]
 80069fc:	681b      	ldr	r3, [r3, #0]
 80069fe:	681b      	ldr	r3, [r3, #0]
 8006a00:	f003 0301 	and.w	r3, r3, #1
 8006a04:	2b01      	cmp	r3, #1
 8006a06:	d007      	beq.n	8006a18 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8006a08:	68fb      	ldr	r3, [r7, #12]
 8006a0a:	681b      	ldr	r3, [r3, #0]
 8006a0c:	681a      	ldr	r2, [r3, #0]
 8006a0e:	68fb      	ldr	r3, [r7, #12]
 8006a10:	681b      	ldr	r3, [r3, #0]
 8006a12:	f042 0201 	orr.w	r2, r2, #1
 8006a16:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8006a18:	68fb      	ldr	r3, [r7, #12]
 8006a1a:	681b      	ldr	r3, [r3, #0]
 8006a1c:	681a      	ldr	r2, [r3, #0]
 8006a1e:	68fb      	ldr	r3, [r7, #12]
 8006a20:	681b      	ldr	r3, [r3, #0]
 8006a22:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8006a26:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8006a28:	68fb      	ldr	r3, [r7, #12]
 8006a2a:	2222      	movs	r2, #34	; 0x22
 8006a2c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8006a30:	68fb      	ldr	r3, [r7, #12]
 8006a32:	2240      	movs	r2, #64	; 0x40
 8006a34:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006a38:	68fb      	ldr	r3, [r7, #12]
 8006a3a:	2200      	movs	r2, #0
 8006a3c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8006a3e:	68fb      	ldr	r3, [r7, #12]
 8006a40:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006a42:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8006a44:	68fb      	ldr	r3, [r7, #12]
 8006a46:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8006a48:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8006a4a:	68fb      	ldr	r3, [r7, #12]
 8006a4c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006a4e:	b29a      	uxth	r2, r3
 8006a50:	68fb      	ldr	r3, [r7, #12]
 8006a52:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8006a54:	68fb      	ldr	r3, [r7, #12]
 8006a56:	4a5b      	ldr	r2, [pc, #364]	; (8006bc4 <HAL_I2C_Mem_Read+0x228>)
 8006a58:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8006a5a:	88f8      	ldrh	r0, [r7, #6]
 8006a5c:	893a      	ldrh	r2, [r7, #8]
 8006a5e:	8979      	ldrh	r1, [r7, #10]
 8006a60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a62:	9301      	str	r3, [sp, #4]
 8006a64:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006a66:	9300      	str	r3, [sp, #0]
 8006a68:	4603      	mov	r3, r0
 8006a6a:	68f8      	ldr	r0, [r7, #12]
 8006a6c:	f000 fa6c 	bl	8006f48 <I2C_RequestMemoryRead>
 8006a70:	4603      	mov	r3, r0
 8006a72:	2b00      	cmp	r3, #0
 8006a74:	d001      	beq.n	8006a7a <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 8006a76:	2301      	movs	r3, #1
 8006a78:	e1b0      	b.n	8006ddc <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 8006a7a:	68fb      	ldr	r3, [r7, #12]
 8006a7c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006a7e:	2b00      	cmp	r3, #0
 8006a80:	d113      	bne.n	8006aaa <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006a82:	2300      	movs	r3, #0
 8006a84:	623b      	str	r3, [r7, #32]
 8006a86:	68fb      	ldr	r3, [r7, #12]
 8006a88:	681b      	ldr	r3, [r3, #0]
 8006a8a:	695b      	ldr	r3, [r3, #20]
 8006a8c:	623b      	str	r3, [r7, #32]
 8006a8e:	68fb      	ldr	r3, [r7, #12]
 8006a90:	681b      	ldr	r3, [r3, #0]
 8006a92:	699b      	ldr	r3, [r3, #24]
 8006a94:	623b      	str	r3, [r7, #32]
 8006a96:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006a98:	68fb      	ldr	r3, [r7, #12]
 8006a9a:	681b      	ldr	r3, [r3, #0]
 8006a9c:	681a      	ldr	r2, [r3, #0]
 8006a9e:	68fb      	ldr	r3, [r7, #12]
 8006aa0:	681b      	ldr	r3, [r3, #0]
 8006aa2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006aa6:	601a      	str	r2, [r3, #0]
 8006aa8:	e184      	b.n	8006db4 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 8006aaa:	68fb      	ldr	r3, [r7, #12]
 8006aac:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006aae:	2b01      	cmp	r3, #1
 8006ab0:	d11b      	bne.n	8006aea <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006ab2:	68fb      	ldr	r3, [r7, #12]
 8006ab4:	681b      	ldr	r3, [r3, #0]
 8006ab6:	681a      	ldr	r2, [r3, #0]
 8006ab8:	68fb      	ldr	r3, [r7, #12]
 8006aba:	681b      	ldr	r3, [r3, #0]
 8006abc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006ac0:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006ac2:	2300      	movs	r3, #0
 8006ac4:	61fb      	str	r3, [r7, #28]
 8006ac6:	68fb      	ldr	r3, [r7, #12]
 8006ac8:	681b      	ldr	r3, [r3, #0]
 8006aca:	695b      	ldr	r3, [r3, #20]
 8006acc:	61fb      	str	r3, [r7, #28]
 8006ace:	68fb      	ldr	r3, [r7, #12]
 8006ad0:	681b      	ldr	r3, [r3, #0]
 8006ad2:	699b      	ldr	r3, [r3, #24]
 8006ad4:	61fb      	str	r3, [r7, #28]
 8006ad6:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006ad8:	68fb      	ldr	r3, [r7, #12]
 8006ada:	681b      	ldr	r3, [r3, #0]
 8006adc:	681a      	ldr	r2, [r3, #0]
 8006ade:	68fb      	ldr	r3, [r7, #12]
 8006ae0:	681b      	ldr	r3, [r3, #0]
 8006ae2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006ae6:	601a      	str	r2, [r3, #0]
 8006ae8:	e164      	b.n	8006db4 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 8006aea:	68fb      	ldr	r3, [r7, #12]
 8006aec:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006aee:	2b02      	cmp	r3, #2
 8006af0:	d11b      	bne.n	8006b2a <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006af2:	68fb      	ldr	r3, [r7, #12]
 8006af4:	681b      	ldr	r3, [r3, #0]
 8006af6:	681a      	ldr	r2, [r3, #0]
 8006af8:	68fb      	ldr	r3, [r7, #12]
 8006afa:	681b      	ldr	r3, [r3, #0]
 8006afc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006b00:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8006b02:	68fb      	ldr	r3, [r7, #12]
 8006b04:	681b      	ldr	r3, [r3, #0]
 8006b06:	681a      	ldr	r2, [r3, #0]
 8006b08:	68fb      	ldr	r3, [r7, #12]
 8006b0a:	681b      	ldr	r3, [r3, #0]
 8006b0c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006b10:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006b12:	2300      	movs	r3, #0
 8006b14:	61bb      	str	r3, [r7, #24]
 8006b16:	68fb      	ldr	r3, [r7, #12]
 8006b18:	681b      	ldr	r3, [r3, #0]
 8006b1a:	695b      	ldr	r3, [r3, #20]
 8006b1c:	61bb      	str	r3, [r7, #24]
 8006b1e:	68fb      	ldr	r3, [r7, #12]
 8006b20:	681b      	ldr	r3, [r3, #0]
 8006b22:	699b      	ldr	r3, [r3, #24]
 8006b24:	61bb      	str	r3, [r7, #24]
 8006b26:	69bb      	ldr	r3, [r7, #24]
 8006b28:	e144      	b.n	8006db4 <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006b2a:	2300      	movs	r3, #0
 8006b2c:	617b      	str	r3, [r7, #20]
 8006b2e:	68fb      	ldr	r3, [r7, #12]
 8006b30:	681b      	ldr	r3, [r3, #0]
 8006b32:	695b      	ldr	r3, [r3, #20]
 8006b34:	617b      	str	r3, [r7, #20]
 8006b36:	68fb      	ldr	r3, [r7, #12]
 8006b38:	681b      	ldr	r3, [r3, #0]
 8006b3a:	699b      	ldr	r3, [r3, #24]
 8006b3c:	617b      	str	r3, [r7, #20]
 8006b3e:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8006b40:	e138      	b.n	8006db4 <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 8006b42:	68fb      	ldr	r3, [r7, #12]
 8006b44:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006b46:	2b03      	cmp	r3, #3
 8006b48:	f200 80f1 	bhi.w	8006d2e <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8006b4c:	68fb      	ldr	r3, [r7, #12]
 8006b4e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006b50:	2b01      	cmp	r3, #1
 8006b52:	d123      	bne.n	8006b9c <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006b54:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006b56:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8006b58:	68f8      	ldr	r0, [r7, #12]
 8006b5a:	f000 fc35 	bl	80073c8 <I2C_WaitOnRXNEFlagUntilTimeout>
 8006b5e:	4603      	mov	r3, r0
 8006b60:	2b00      	cmp	r3, #0
 8006b62:	d001      	beq.n	8006b68 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8006b64:	2301      	movs	r3, #1
 8006b66:	e139      	b.n	8006ddc <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006b68:	68fb      	ldr	r3, [r7, #12]
 8006b6a:	681b      	ldr	r3, [r3, #0]
 8006b6c:	691a      	ldr	r2, [r3, #16]
 8006b6e:	68fb      	ldr	r3, [r7, #12]
 8006b70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b72:	b2d2      	uxtb	r2, r2
 8006b74:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006b76:	68fb      	ldr	r3, [r7, #12]
 8006b78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b7a:	1c5a      	adds	r2, r3, #1
 8006b7c:	68fb      	ldr	r3, [r7, #12]
 8006b7e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006b80:	68fb      	ldr	r3, [r7, #12]
 8006b82:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006b84:	3b01      	subs	r3, #1
 8006b86:	b29a      	uxth	r2, r3
 8006b88:	68fb      	ldr	r3, [r7, #12]
 8006b8a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8006b8c:	68fb      	ldr	r3, [r7, #12]
 8006b8e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006b90:	b29b      	uxth	r3, r3
 8006b92:	3b01      	subs	r3, #1
 8006b94:	b29a      	uxth	r2, r3
 8006b96:	68fb      	ldr	r3, [r7, #12]
 8006b98:	855a      	strh	r2, [r3, #42]	; 0x2a
 8006b9a:	e10b      	b.n	8006db4 <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8006b9c:	68fb      	ldr	r3, [r7, #12]
 8006b9e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006ba0:	2b02      	cmp	r3, #2
 8006ba2:	d14e      	bne.n	8006c42 <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8006ba4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ba6:	9300      	str	r3, [sp, #0]
 8006ba8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006baa:	2200      	movs	r2, #0
 8006bac:	4906      	ldr	r1, [pc, #24]	; (8006bc8 <HAL_I2C_Mem_Read+0x22c>)
 8006bae:	68f8      	ldr	r0, [r7, #12]
 8006bb0:	f000 fab2 	bl	8007118 <I2C_WaitOnFlagUntilTimeout>
 8006bb4:	4603      	mov	r3, r0
 8006bb6:	2b00      	cmp	r3, #0
 8006bb8:	d008      	beq.n	8006bcc <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 8006bba:	2301      	movs	r3, #1
 8006bbc:	e10e      	b.n	8006ddc <HAL_I2C_Mem_Read+0x440>
 8006bbe:	bf00      	nop
 8006bc0:	00100002 	.word	0x00100002
 8006bc4:	ffff0000 	.word	0xffff0000
 8006bc8:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006bcc:	68fb      	ldr	r3, [r7, #12]
 8006bce:	681b      	ldr	r3, [r3, #0]
 8006bd0:	681a      	ldr	r2, [r3, #0]
 8006bd2:	68fb      	ldr	r3, [r7, #12]
 8006bd4:	681b      	ldr	r3, [r3, #0]
 8006bd6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006bda:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006bdc:	68fb      	ldr	r3, [r7, #12]
 8006bde:	681b      	ldr	r3, [r3, #0]
 8006be0:	691a      	ldr	r2, [r3, #16]
 8006be2:	68fb      	ldr	r3, [r7, #12]
 8006be4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006be6:	b2d2      	uxtb	r2, r2
 8006be8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006bea:	68fb      	ldr	r3, [r7, #12]
 8006bec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006bee:	1c5a      	adds	r2, r3, #1
 8006bf0:	68fb      	ldr	r3, [r7, #12]
 8006bf2:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006bf4:	68fb      	ldr	r3, [r7, #12]
 8006bf6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006bf8:	3b01      	subs	r3, #1
 8006bfa:	b29a      	uxth	r2, r3
 8006bfc:	68fb      	ldr	r3, [r7, #12]
 8006bfe:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8006c00:	68fb      	ldr	r3, [r7, #12]
 8006c02:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006c04:	b29b      	uxth	r3, r3
 8006c06:	3b01      	subs	r3, #1
 8006c08:	b29a      	uxth	r2, r3
 8006c0a:	68fb      	ldr	r3, [r7, #12]
 8006c0c:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006c0e:	68fb      	ldr	r3, [r7, #12]
 8006c10:	681b      	ldr	r3, [r3, #0]
 8006c12:	691a      	ldr	r2, [r3, #16]
 8006c14:	68fb      	ldr	r3, [r7, #12]
 8006c16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c18:	b2d2      	uxtb	r2, r2
 8006c1a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006c1c:	68fb      	ldr	r3, [r7, #12]
 8006c1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c20:	1c5a      	adds	r2, r3, #1
 8006c22:	68fb      	ldr	r3, [r7, #12]
 8006c24:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006c26:	68fb      	ldr	r3, [r7, #12]
 8006c28:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006c2a:	3b01      	subs	r3, #1
 8006c2c:	b29a      	uxth	r2, r3
 8006c2e:	68fb      	ldr	r3, [r7, #12]
 8006c30:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8006c32:	68fb      	ldr	r3, [r7, #12]
 8006c34:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006c36:	b29b      	uxth	r3, r3
 8006c38:	3b01      	subs	r3, #1
 8006c3a:	b29a      	uxth	r2, r3
 8006c3c:	68fb      	ldr	r3, [r7, #12]
 8006c3e:	855a      	strh	r2, [r3, #42]	; 0x2a
 8006c40:	e0b8      	b.n	8006db4 <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8006c42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c44:	9300      	str	r3, [sp, #0]
 8006c46:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006c48:	2200      	movs	r2, #0
 8006c4a:	4966      	ldr	r1, [pc, #408]	; (8006de4 <HAL_I2C_Mem_Read+0x448>)
 8006c4c:	68f8      	ldr	r0, [r7, #12]
 8006c4e:	f000 fa63 	bl	8007118 <I2C_WaitOnFlagUntilTimeout>
 8006c52:	4603      	mov	r3, r0
 8006c54:	2b00      	cmp	r3, #0
 8006c56:	d001      	beq.n	8006c5c <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8006c58:	2301      	movs	r3, #1
 8006c5a:	e0bf      	b.n	8006ddc <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006c5c:	68fb      	ldr	r3, [r7, #12]
 8006c5e:	681b      	ldr	r3, [r3, #0]
 8006c60:	681a      	ldr	r2, [r3, #0]
 8006c62:	68fb      	ldr	r3, [r7, #12]
 8006c64:	681b      	ldr	r3, [r3, #0]
 8006c66:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006c6a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006c6c:	68fb      	ldr	r3, [r7, #12]
 8006c6e:	681b      	ldr	r3, [r3, #0]
 8006c70:	691a      	ldr	r2, [r3, #16]
 8006c72:	68fb      	ldr	r3, [r7, #12]
 8006c74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c76:	b2d2      	uxtb	r2, r2
 8006c78:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006c7a:	68fb      	ldr	r3, [r7, #12]
 8006c7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c7e:	1c5a      	adds	r2, r3, #1
 8006c80:	68fb      	ldr	r3, [r7, #12]
 8006c82:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006c84:	68fb      	ldr	r3, [r7, #12]
 8006c86:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006c88:	3b01      	subs	r3, #1
 8006c8a:	b29a      	uxth	r2, r3
 8006c8c:	68fb      	ldr	r3, [r7, #12]
 8006c8e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8006c90:	68fb      	ldr	r3, [r7, #12]
 8006c92:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006c94:	b29b      	uxth	r3, r3
 8006c96:	3b01      	subs	r3, #1
 8006c98:	b29a      	uxth	r2, r3
 8006c9a:	68fb      	ldr	r3, [r7, #12]
 8006c9c:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8006c9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ca0:	9300      	str	r3, [sp, #0]
 8006ca2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006ca4:	2200      	movs	r2, #0
 8006ca6:	494f      	ldr	r1, [pc, #316]	; (8006de4 <HAL_I2C_Mem_Read+0x448>)
 8006ca8:	68f8      	ldr	r0, [r7, #12]
 8006caa:	f000 fa35 	bl	8007118 <I2C_WaitOnFlagUntilTimeout>
 8006cae:	4603      	mov	r3, r0
 8006cb0:	2b00      	cmp	r3, #0
 8006cb2:	d001      	beq.n	8006cb8 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8006cb4:	2301      	movs	r3, #1
 8006cb6:	e091      	b.n	8006ddc <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006cb8:	68fb      	ldr	r3, [r7, #12]
 8006cba:	681b      	ldr	r3, [r3, #0]
 8006cbc:	681a      	ldr	r2, [r3, #0]
 8006cbe:	68fb      	ldr	r3, [r7, #12]
 8006cc0:	681b      	ldr	r3, [r3, #0]
 8006cc2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006cc6:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006cc8:	68fb      	ldr	r3, [r7, #12]
 8006cca:	681b      	ldr	r3, [r3, #0]
 8006ccc:	691a      	ldr	r2, [r3, #16]
 8006cce:	68fb      	ldr	r3, [r7, #12]
 8006cd0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006cd2:	b2d2      	uxtb	r2, r2
 8006cd4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006cd6:	68fb      	ldr	r3, [r7, #12]
 8006cd8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006cda:	1c5a      	adds	r2, r3, #1
 8006cdc:	68fb      	ldr	r3, [r7, #12]
 8006cde:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006ce0:	68fb      	ldr	r3, [r7, #12]
 8006ce2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006ce4:	3b01      	subs	r3, #1
 8006ce6:	b29a      	uxth	r2, r3
 8006ce8:	68fb      	ldr	r3, [r7, #12]
 8006cea:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8006cec:	68fb      	ldr	r3, [r7, #12]
 8006cee:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006cf0:	b29b      	uxth	r3, r3
 8006cf2:	3b01      	subs	r3, #1
 8006cf4:	b29a      	uxth	r2, r3
 8006cf6:	68fb      	ldr	r3, [r7, #12]
 8006cf8:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006cfa:	68fb      	ldr	r3, [r7, #12]
 8006cfc:	681b      	ldr	r3, [r3, #0]
 8006cfe:	691a      	ldr	r2, [r3, #16]
 8006d00:	68fb      	ldr	r3, [r7, #12]
 8006d02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d04:	b2d2      	uxtb	r2, r2
 8006d06:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006d08:	68fb      	ldr	r3, [r7, #12]
 8006d0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d0c:	1c5a      	adds	r2, r3, #1
 8006d0e:	68fb      	ldr	r3, [r7, #12]
 8006d10:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006d12:	68fb      	ldr	r3, [r7, #12]
 8006d14:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006d16:	3b01      	subs	r3, #1
 8006d18:	b29a      	uxth	r2, r3
 8006d1a:	68fb      	ldr	r3, [r7, #12]
 8006d1c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8006d1e:	68fb      	ldr	r3, [r7, #12]
 8006d20:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006d22:	b29b      	uxth	r3, r3
 8006d24:	3b01      	subs	r3, #1
 8006d26:	b29a      	uxth	r2, r3
 8006d28:	68fb      	ldr	r3, [r7, #12]
 8006d2a:	855a      	strh	r2, [r3, #42]	; 0x2a
 8006d2c:	e042      	b.n	8006db4 <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006d2e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006d30:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8006d32:	68f8      	ldr	r0, [r7, #12]
 8006d34:	f000 fb48 	bl	80073c8 <I2C_WaitOnRXNEFlagUntilTimeout>
 8006d38:	4603      	mov	r3, r0
 8006d3a:	2b00      	cmp	r3, #0
 8006d3c:	d001      	beq.n	8006d42 <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 8006d3e:	2301      	movs	r3, #1
 8006d40:	e04c      	b.n	8006ddc <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006d42:	68fb      	ldr	r3, [r7, #12]
 8006d44:	681b      	ldr	r3, [r3, #0]
 8006d46:	691a      	ldr	r2, [r3, #16]
 8006d48:	68fb      	ldr	r3, [r7, #12]
 8006d4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d4c:	b2d2      	uxtb	r2, r2
 8006d4e:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8006d50:	68fb      	ldr	r3, [r7, #12]
 8006d52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d54:	1c5a      	adds	r2, r3, #1
 8006d56:	68fb      	ldr	r3, [r7, #12]
 8006d58:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8006d5a:	68fb      	ldr	r3, [r7, #12]
 8006d5c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006d5e:	3b01      	subs	r3, #1
 8006d60:	b29a      	uxth	r2, r3
 8006d62:	68fb      	ldr	r3, [r7, #12]
 8006d64:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8006d66:	68fb      	ldr	r3, [r7, #12]
 8006d68:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006d6a:	b29b      	uxth	r3, r3
 8006d6c:	3b01      	subs	r3, #1
 8006d6e:	b29a      	uxth	r2, r3
 8006d70:	68fb      	ldr	r3, [r7, #12]
 8006d72:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8006d74:	68fb      	ldr	r3, [r7, #12]
 8006d76:	681b      	ldr	r3, [r3, #0]
 8006d78:	695b      	ldr	r3, [r3, #20]
 8006d7a:	f003 0304 	and.w	r3, r3, #4
 8006d7e:	2b04      	cmp	r3, #4
 8006d80:	d118      	bne.n	8006db4 <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006d82:	68fb      	ldr	r3, [r7, #12]
 8006d84:	681b      	ldr	r3, [r3, #0]
 8006d86:	691a      	ldr	r2, [r3, #16]
 8006d88:	68fb      	ldr	r3, [r7, #12]
 8006d8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d8c:	b2d2      	uxtb	r2, r2
 8006d8e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006d90:	68fb      	ldr	r3, [r7, #12]
 8006d92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d94:	1c5a      	adds	r2, r3, #1
 8006d96:	68fb      	ldr	r3, [r7, #12]
 8006d98:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006d9a:	68fb      	ldr	r3, [r7, #12]
 8006d9c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006d9e:	3b01      	subs	r3, #1
 8006da0:	b29a      	uxth	r2, r3
 8006da2:	68fb      	ldr	r3, [r7, #12]
 8006da4:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8006da6:	68fb      	ldr	r3, [r7, #12]
 8006da8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006daa:	b29b      	uxth	r3, r3
 8006dac:	3b01      	subs	r3, #1
 8006dae:	b29a      	uxth	r2, r3
 8006db0:	68fb      	ldr	r3, [r7, #12]
 8006db2:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8006db4:	68fb      	ldr	r3, [r7, #12]
 8006db6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006db8:	2b00      	cmp	r3, #0
 8006dba:	f47f aec2 	bne.w	8006b42 <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8006dbe:	68fb      	ldr	r3, [r7, #12]
 8006dc0:	2220      	movs	r2, #32
 8006dc2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8006dc6:	68fb      	ldr	r3, [r7, #12]
 8006dc8:	2200      	movs	r2, #0
 8006dca:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006dce:	68fb      	ldr	r3, [r7, #12]
 8006dd0:	2200      	movs	r2, #0
 8006dd2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8006dd6:	2300      	movs	r3, #0
 8006dd8:	e000      	b.n	8006ddc <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 8006dda:	2302      	movs	r3, #2
  }
}
 8006ddc:	4618      	mov	r0, r3
 8006dde:	3728      	adds	r7, #40	; 0x28
 8006de0:	46bd      	mov	sp, r7
 8006de2:	bd80      	pop	{r7, pc}
 8006de4:	00010004 	.word	0x00010004

08006de8 <HAL_I2C_GetState>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL state
  */
HAL_I2C_StateTypeDef HAL_I2C_GetState(I2C_HandleTypeDef *hi2c)
{
 8006de8:	b480      	push	{r7}
 8006dea:	b083      	sub	sp, #12
 8006dec:	af00      	add	r7, sp, #0
 8006dee:	6078      	str	r0, [r7, #4]
  /* Return I2C handle state */
  return hi2c->State;
 8006df0:	687b      	ldr	r3, [r7, #4]
 8006df2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006df6:	b2db      	uxtb	r3, r3
}
 8006df8:	4618      	mov	r0, r3
 8006dfa:	370c      	adds	r7, #12
 8006dfc:	46bd      	mov	sp, r7
 8006dfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e02:	4770      	bx	lr

08006e04 <HAL_I2C_GetError>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *              the configuration information for the specified I2C.
  * @retval I2C Error Code
  */
uint32_t HAL_I2C_GetError(I2C_HandleTypeDef *hi2c)
{
 8006e04:	b480      	push	{r7}
 8006e06:	b083      	sub	sp, #12
 8006e08:	af00      	add	r7, sp, #0
 8006e0a:	6078      	str	r0, [r7, #4]
  return hi2c->ErrorCode;
 8006e0c:	687b      	ldr	r3, [r7, #4]
 8006e0e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 8006e10:	4618      	mov	r0, r3
 8006e12:	370c      	adds	r7, #12
 8006e14:	46bd      	mov	sp, r7
 8006e16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e1a:	4770      	bx	lr

08006e1c <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8006e1c:	b580      	push	{r7, lr}
 8006e1e:	b088      	sub	sp, #32
 8006e20:	af02      	add	r7, sp, #8
 8006e22:	60f8      	str	r0, [r7, #12]
 8006e24:	4608      	mov	r0, r1
 8006e26:	4611      	mov	r1, r2
 8006e28:	461a      	mov	r2, r3
 8006e2a:	4603      	mov	r3, r0
 8006e2c:	817b      	strh	r3, [r7, #10]
 8006e2e:	460b      	mov	r3, r1
 8006e30:	813b      	strh	r3, [r7, #8]
 8006e32:	4613      	mov	r3, r2
 8006e34:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8006e36:	68fb      	ldr	r3, [r7, #12]
 8006e38:	681b      	ldr	r3, [r3, #0]
 8006e3a:	681a      	ldr	r2, [r3, #0]
 8006e3c:	68fb      	ldr	r3, [r7, #12]
 8006e3e:	681b      	ldr	r3, [r3, #0]
 8006e40:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006e44:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8006e46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e48:	9300      	str	r3, [sp, #0]
 8006e4a:	6a3b      	ldr	r3, [r7, #32]
 8006e4c:	2200      	movs	r2, #0
 8006e4e:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8006e52:	68f8      	ldr	r0, [r7, #12]
 8006e54:	f000 f960 	bl	8007118 <I2C_WaitOnFlagUntilTimeout>
 8006e58:	4603      	mov	r3, r0
 8006e5a:	2b00      	cmp	r3, #0
 8006e5c:	d00d      	beq.n	8006e7a <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8006e5e:	68fb      	ldr	r3, [r7, #12]
 8006e60:	681b      	ldr	r3, [r3, #0]
 8006e62:	681b      	ldr	r3, [r3, #0]
 8006e64:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006e68:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006e6c:	d103      	bne.n	8006e76 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8006e6e:	68fb      	ldr	r3, [r7, #12]
 8006e70:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006e74:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8006e76:	2303      	movs	r3, #3
 8006e78:	e05f      	b.n	8006f3a <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8006e7a:	897b      	ldrh	r3, [r7, #10]
 8006e7c:	b2db      	uxtb	r3, r3
 8006e7e:	461a      	mov	r2, r3
 8006e80:	68fb      	ldr	r3, [r7, #12]
 8006e82:	681b      	ldr	r3, [r3, #0]
 8006e84:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8006e88:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8006e8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e8c:	6a3a      	ldr	r2, [r7, #32]
 8006e8e:	492d      	ldr	r1, [pc, #180]	; (8006f44 <I2C_RequestMemoryWrite+0x128>)
 8006e90:	68f8      	ldr	r0, [r7, #12]
 8006e92:	f000 f998 	bl	80071c6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8006e96:	4603      	mov	r3, r0
 8006e98:	2b00      	cmp	r3, #0
 8006e9a:	d001      	beq.n	8006ea0 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8006e9c:	2301      	movs	r3, #1
 8006e9e:	e04c      	b.n	8006f3a <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006ea0:	2300      	movs	r3, #0
 8006ea2:	617b      	str	r3, [r7, #20]
 8006ea4:	68fb      	ldr	r3, [r7, #12]
 8006ea6:	681b      	ldr	r3, [r3, #0]
 8006ea8:	695b      	ldr	r3, [r3, #20]
 8006eaa:	617b      	str	r3, [r7, #20]
 8006eac:	68fb      	ldr	r3, [r7, #12]
 8006eae:	681b      	ldr	r3, [r3, #0]
 8006eb0:	699b      	ldr	r3, [r3, #24]
 8006eb2:	617b      	str	r3, [r7, #20]
 8006eb4:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006eb6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006eb8:	6a39      	ldr	r1, [r7, #32]
 8006eba:	68f8      	ldr	r0, [r7, #12]
 8006ebc:	f000 fa02 	bl	80072c4 <I2C_WaitOnTXEFlagUntilTimeout>
 8006ec0:	4603      	mov	r3, r0
 8006ec2:	2b00      	cmp	r3, #0
 8006ec4:	d00d      	beq.n	8006ee2 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006ec6:	68fb      	ldr	r3, [r7, #12]
 8006ec8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006eca:	2b04      	cmp	r3, #4
 8006ecc:	d107      	bne.n	8006ede <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006ece:	68fb      	ldr	r3, [r7, #12]
 8006ed0:	681b      	ldr	r3, [r3, #0]
 8006ed2:	681a      	ldr	r2, [r3, #0]
 8006ed4:	68fb      	ldr	r3, [r7, #12]
 8006ed6:	681b      	ldr	r3, [r3, #0]
 8006ed8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006edc:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8006ede:	2301      	movs	r3, #1
 8006ee0:	e02b      	b.n	8006f3a <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8006ee2:	88fb      	ldrh	r3, [r7, #6]
 8006ee4:	2b01      	cmp	r3, #1
 8006ee6:	d105      	bne.n	8006ef4 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8006ee8:	893b      	ldrh	r3, [r7, #8]
 8006eea:	b2da      	uxtb	r2, r3
 8006eec:	68fb      	ldr	r3, [r7, #12]
 8006eee:	681b      	ldr	r3, [r3, #0]
 8006ef0:	611a      	str	r2, [r3, #16]
 8006ef2:	e021      	b.n	8006f38 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8006ef4:	893b      	ldrh	r3, [r7, #8]
 8006ef6:	0a1b      	lsrs	r3, r3, #8
 8006ef8:	b29b      	uxth	r3, r3
 8006efa:	b2da      	uxtb	r2, r3
 8006efc:	68fb      	ldr	r3, [r7, #12]
 8006efe:	681b      	ldr	r3, [r3, #0]
 8006f00:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006f02:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006f04:	6a39      	ldr	r1, [r7, #32]
 8006f06:	68f8      	ldr	r0, [r7, #12]
 8006f08:	f000 f9dc 	bl	80072c4 <I2C_WaitOnTXEFlagUntilTimeout>
 8006f0c:	4603      	mov	r3, r0
 8006f0e:	2b00      	cmp	r3, #0
 8006f10:	d00d      	beq.n	8006f2e <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006f12:	68fb      	ldr	r3, [r7, #12]
 8006f14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006f16:	2b04      	cmp	r3, #4
 8006f18:	d107      	bne.n	8006f2a <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006f1a:	68fb      	ldr	r3, [r7, #12]
 8006f1c:	681b      	ldr	r3, [r3, #0]
 8006f1e:	681a      	ldr	r2, [r3, #0]
 8006f20:	68fb      	ldr	r3, [r7, #12]
 8006f22:	681b      	ldr	r3, [r3, #0]
 8006f24:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006f28:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8006f2a:	2301      	movs	r3, #1
 8006f2c:	e005      	b.n	8006f3a <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8006f2e:	893b      	ldrh	r3, [r7, #8]
 8006f30:	b2da      	uxtb	r2, r3
 8006f32:	68fb      	ldr	r3, [r7, #12]
 8006f34:	681b      	ldr	r3, [r3, #0]
 8006f36:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8006f38:	2300      	movs	r3, #0
}
 8006f3a:	4618      	mov	r0, r3
 8006f3c:	3718      	adds	r7, #24
 8006f3e:	46bd      	mov	sp, r7
 8006f40:	bd80      	pop	{r7, pc}
 8006f42:	bf00      	nop
 8006f44:	00010002 	.word	0x00010002

08006f48 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8006f48:	b580      	push	{r7, lr}
 8006f4a:	b088      	sub	sp, #32
 8006f4c:	af02      	add	r7, sp, #8
 8006f4e:	60f8      	str	r0, [r7, #12]
 8006f50:	4608      	mov	r0, r1
 8006f52:	4611      	mov	r1, r2
 8006f54:	461a      	mov	r2, r3
 8006f56:	4603      	mov	r3, r0
 8006f58:	817b      	strh	r3, [r7, #10]
 8006f5a:	460b      	mov	r3, r1
 8006f5c:	813b      	strh	r3, [r7, #8]
 8006f5e:	4613      	mov	r3, r2
 8006f60:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006f62:	68fb      	ldr	r3, [r7, #12]
 8006f64:	681b      	ldr	r3, [r3, #0]
 8006f66:	681a      	ldr	r2, [r3, #0]
 8006f68:	68fb      	ldr	r3, [r7, #12]
 8006f6a:	681b      	ldr	r3, [r3, #0]
 8006f6c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8006f70:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8006f72:	68fb      	ldr	r3, [r7, #12]
 8006f74:	681b      	ldr	r3, [r3, #0]
 8006f76:	681a      	ldr	r2, [r3, #0]
 8006f78:	68fb      	ldr	r3, [r7, #12]
 8006f7a:	681b      	ldr	r3, [r3, #0]
 8006f7c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006f80:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8006f82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f84:	9300      	str	r3, [sp, #0]
 8006f86:	6a3b      	ldr	r3, [r7, #32]
 8006f88:	2200      	movs	r2, #0
 8006f8a:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8006f8e:	68f8      	ldr	r0, [r7, #12]
 8006f90:	f000 f8c2 	bl	8007118 <I2C_WaitOnFlagUntilTimeout>
 8006f94:	4603      	mov	r3, r0
 8006f96:	2b00      	cmp	r3, #0
 8006f98:	d00d      	beq.n	8006fb6 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8006f9a:	68fb      	ldr	r3, [r7, #12]
 8006f9c:	681b      	ldr	r3, [r3, #0]
 8006f9e:	681b      	ldr	r3, [r3, #0]
 8006fa0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006fa4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006fa8:	d103      	bne.n	8006fb2 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8006faa:	68fb      	ldr	r3, [r7, #12]
 8006fac:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006fb0:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8006fb2:	2303      	movs	r3, #3
 8006fb4:	e0aa      	b.n	800710c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8006fb6:	897b      	ldrh	r3, [r7, #10]
 8006fb8:	b2db      	uxtb	r3, r3
 8006fba:	461a      	mov	r2, r3
 8006fbc:	68fb      	ldr	r3, [r7, #12]
 8006fbe:	681b      	ldr	r3, [r3, #0]
 8006fc0:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8006fc4:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8006fc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006fc8:	6a3a      	ldr	r2, [r7, #32]
 8006fca:	4952      	ldr	r1, [pc, #328]	; (8007114 <I2C_RequestMemoryRead+0x1cc>)
 8006fcc:	68f8      	ldr	r0, [r7, #12]
 8006fce:	f000 f8fa 	bl	80071c6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8006fd2:	4603      	mov	r3, r0
 8006fd4:	2b00      	cmp	r3, #0
 8006fd6:	d001      	beq.n	8006fdc <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8006fd8:	2301      	movs	r3, #1
 8006fda:	e097      	b.n	800710c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006fdc:	2300      	movs	r3, #0
 8006fde:	617b      	str	r3, [r7, #20]
 8006fe0:	68fb      	ldr	r3, [r7, #12]
 8006fe2:	681b      	ldr	r3, [r3, #0]
 8006fe4:	695b      	ldr	r3, [r3, #20]
 8006fe6:	617b      	str	r3, [r7, #20]
 8006fe8:	68fb      	ldr	r3, [r7, #12]
 8006fea:	681b      	ldr	r3, [r3, #0]
 8006fec:	699b      	ldr	r3, [r3, #24]
 8006fee:	617b      	str	r3, [r7, #20]
 8006ff0:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006ff2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006ff4:	6a39      	ldr	r1, [r7, #32]
 8006ff6:	68f8      	ldr	r0, [r7, #12]
 8006ff8:	f000 f964 	bl	80072c4 <I2C_WaitOnTXEFlagUntilTimeout>
 8006ffc:	4603      	mov	r3, r0
 8006ffe:	2b00      	cmp	r3, #0
 8007000:	d00d      	beq.n	800701e <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8007002:	68fb      	ldr	r3, [r7, #12]
 8007004:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007006:	2b04      	cmp	r3, #4
 8007008:	d107      	bne.n	800701a <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800700a:	68fb      	ldr	r3, [r7, #12]
 800700c:	681b      	ldr	r3, [r3, #0]
 800700e:	681a      	ldr	r2, [r3, #0]
 8007010:	68fb      	ldr	r3, [r7, #12]
 8007012:	681b      	ldr	r3, [r3, #0]
 8007014:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007018:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800701a:	2301      	movs	r3, #1
 800701c:	e076      	b.n	800710c <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800701e:	88fb      	ldrh	r3, [r7, #6]
 8007020:	2b01      	cmp	r3, #1
 8007022:	d105      	bne.n	8007030 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8007024:	893b      	ldrh	r3, [r7, #8]
 8007026:	b2da      	uxtb	r2, r3
 8007028:	68fb      	ldr	r3, [r7, #12]
 800702a:	681b      	ldr	r3, [r3, #0]
 800702c:	611a      	str	r2, [r3, #16]
 800702e:	e021      	b.n	8007074 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8007030:	893b      	ldrh	r3, [r7, #8]
 8007032:	0a1b      	lsrs	r3, r3, #8
 8007034:	b29b      	uxth	r3, r3
 8007036:	b2da      	uxtb	r2, r3
 8007038:	68fb      	ldr	r3, [r7, #12]
 800703a:	681b      	ldr	r3, [r3, #0]
 800703c:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800703e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007040:	6a39      	ldr	r1, [r7, #32]
 8007042:	68f8      	ldr	r0, [r7, #12]
 8007044:	f000 f93e 	bl	80072c4 <I2C_WaitOnTXEFlagUntilTimeout>
 8007048:	4603      	mov	r3, r0
 800704a:	2b00      	cmp	r3, #0
 800704c:	d00d      	beq.n	800706a <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800704e:	68fb      	ldr	r3, [r7, #12]
 8007050:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007052:	2b04      	cmp	r3, #4
 8007054:	d107      	bne.n	8007066 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007056:	68fb      	ldr	r3, [r7, #12]
 8007058:	681b      	ldr	r3, [r3, #0]
 800705a:	681a      	ldr	r2, [r3, #0]
 800705c:	68fb      	ldr	r3, [r7, #12]
 800705e:	681b      	ldr	r3, [r3, #0]
 8007060:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007064:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8007066:	2301      	movs	r3, #1
 8007068:	e050      	b.n	800710c <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800706a:	893b      	ldrh	r3, [r7, #8]
 800706c:	b2da      	uxtb	r2, r3
 800706e:	68fb      	ldr	r3, [r7, #12]
 8007070:	681b      	ldr	r3, [r3, #0]
 8007072:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8007074:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007076:	6a39      	ldr	r1, [r7, #32]
 8007078:	68f8      	ldr	r0, [r7, #12]
 800707a:	f000 f923 	bl	80072c4 <I2C_WaitOnTXEFlagUntilTimeout>
 800707e:	4603      	mov	r3, r0
 8007080:	2b00      	cmp	r3, #0
 8007082:	d00d      	beq.n	80070a0 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8007084:	68fb      	ldr	r3, [r7, #12]
 8007086:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007088:	2b04      	cmp	r3, #4
 800708a:	d107      	bne.n	800709c <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800708c:	68fb      	ldr	r3, [r7, #12]
 800708e:	681b      	ldr	r3, [r3, #0]
 8007090:	681a      	ldr	r2, [r3, #0]
 8007092:	68fb      	ldr	r3, [r7, #12]
 8007094:	681b      	ldr	r3, [r3, #0]
 8007096:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800709a:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800709c:	2301      	movs	r3, #1
 800709e:	e035      	b.n	800710c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80070a0:	68fb      	ldr	r3, [r7, #12]
 80070a2:	681b      	ldr	r3, [r3, #0]
 80070a4:	681a      	ldr	r2, [r3, #0]
 80070a6:	68fb      	ldr	r3, [r7, #12]
 80070a8:	681b      	ldr	r3, [r3, #0]
 80070aa:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80070ae:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80070b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80070b2:	9300      	str	r3, [sp, #0]
 80070b4:	6a3b      	ldr	r3, [r7, #32]
 80070b6:	2200      	movs	r2, #0
 80070b8:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80070bc:	68f8      	ldr	r0, [r7, #12]
 80070be:	f000 f82b 	bl	8007118 <I2C_WaitOnFlagUntilTimeout>
 80070c2:	4603      	mov	r3, r0
 80070c4:	2b00      	cmp	r3, #0
 80070c6:	d00d      	beq.n	80070e4 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80070c8:	68fb      	ldr	r3, [r7, #12]
 80070ca:	681b      	ldr	r3, [r3, #0]
 80070cc:	681b      	ldr	r3, [r3, #0]
 80070ce:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80070d2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80070d6:	d103      	bne.n	80070e0 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80070d8:	68fb      	ldr	r3, [r7, #12]
 80070da:	f44f 7200 	mov.w	r2, #512	; 0x200
 80070de:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80070e0:	2303      	movs	r3, #3
 80070e2:	e013      	b.n	800710c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 80070e4:	897b      	ldrh	r3, [r7, #10]
 80070e6:	b2db      	uxtb	r3, r3
 80070e8:	f043 0301 	orr.w	r3, r3, #1
 80070ec:	b2da      	uxtb	r2, r3
 80070ee:	68fb      	ldr	r3, [r7, #12]
 80070f0:	681b      	ldr	r3, [r3, #0]
 80070f2:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80070f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80070f6:	6a3a      	ldr	r2, [r7, #32]
 80070f8:	4906      	ldr	r1, [pc, #24]	; (8007114 <I2C_RequestMemoryRead+0x1cc>)
 80070fa:	68f8      	ldr	r0, [r7, #12]
 80070fc:	f000 f863 	bl	80071c6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8007100:	4603      	mov	r3, r0
 8007102:	2b00      	cmp	r3, #0
 8007104:	d001      	beq.n	800710a <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8007106:	2301      	movs	r3, #1
 8007108:	e000      	b.n	800710c <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 800710a:	2300      	movs	r3, #0
}
 800710c:	4618      	mov	r0, r3
 800710e:	3718      	adds	r7, #24
 8007110:	46bd      	mov	sp, r7
 8007112:	bd80      	pop	{r7, pc}
 8007114:	00010002 	.word	0x00010002

08007118 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8007118:	b580      	push	{r7, lr}
 800711a:	b084      	sub	sp, #16
 800711c:	af00      	add	r7, sp, #0
 800711e:	60f8      	str	r0, [r7, #12]
 8007120:	60b9      	str	r1, [r7, #8]
 8007122:	603b      	str	r3, [r7, #0]
 8007124:	4613      	mov	r3, r2
 8007126:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8007128:	e025      	b.n	8007176 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800712a:	683b      	ldr	r3, [r7, #0]
 800712c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007130:	d021      	beq.n	8007176 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007132:	f7fe fd87 	bl	8005c44 <HAL_GetTick>
 8007136:	4602      	mov	r2, r0
 8007138:	69bb      	ldr	r3, [r7, #24]
 800713a:	1ad3      	subs	r3, r2, r3
 800713c:	683a      	ldr	r2, [r7, #0]
 800713e:	429a      	cmp	r2, r3
 8007140:	d302      	bcc.n	8007148 <I2C_WaitOnFlagUntilTimeout+0x30>
 8007142:	683b      	ldr	r3, [r7, #0]
 8007144:	2b00      	cmp	r3, #0
 8007146:	d116      	bne.n	8007176 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8007148:	68fb      	ldr	r3, [r7, #12]
 800714a:	2200      	movs	r2, #0
 800714c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 800714e:	68fb      	ldr	r3, [r7, #12]
 8007150:	2220      	movs	r2, #32
 8007152:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8007156:	68fb      	ldr	r3, [r7, #12]
 8007158:	2200      	movs	r2, #0
 800715a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800715e:	68fb      	ldr	r3, [r7, #12]
 8007160:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007162:	f043 0220 	orr.w	r2, r3, #32
 8007166:	68fb      	ldr	r3, [r7, #12]
 8007168:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800716a:	68fb      	ldr	r3, [r7, #12]
 800716c:	2200      	movs	r2, #0
 800716e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8007172:	2301      	movs	r3, #1
 8007174:	e023      	b.n	80071be <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8007176:	68bb      	ldr	r3, [r7, #8]
 8007178:	0c1b      	lsrs	r3, r3, #16
 800717a:	b2db      	uxtb	r3, r3
 800717c:	2b01      	cmp	r3, #1
 800717e:	d10d      	bne.n	800719c <I2C_WaitOnFlagUntilTimeout+0x84>
 8007180:	68fb      	ldr	r3, [r7, #12]
 8007182:	681b      	ldr	r3, [r3, #0]
 8007184:	695b      	ldr	r3, [r3, #20]
 8007186:	43da      	mvns	r2, r3
 8007188:	68bb      	ldr	r3, [r7, #8]
 800718a:	4013      	ands	r3, r2
 800718c:	b29b      	uxth	r3, r3
 800718e:	2b00      	cmp	r3, #0
 8007190:	bf0c      	ite	eq
 8007192:	2301      	moveq	r3, #1
 8007194:	2300      	movne	r3, #0
 8007196:	b2db      	uxtb	r3, r3
 8007198:	461a      	mov	r2, r3
 800719a:	e00c      	b.n	80071b6 <I2C_WaitOnFlagUntilTimeout+0x9e>
 800719c:	68fb      	ldr	r3, [r7, #12]
 800719e:	681b      	ldr	r3, [r3, #0]
 80071a0:	699b      	ldr	r3, [r3, #24]
 80071a2:	43da      	mvns	r2, r3
 80071a4:	68bb      	ldr	r3, [r7, #8]
 80071a6:	4013      	ands	r3, r2
 80071a8:	b29b      	uxth	r3, r3
 80071aa:	2b00      	cmp	r3, #0
 80071ac:	bf0c      	ite	eq
 80071ae:	2301      	moveq	r3, #1
 80071b0:	2300      	movne	r3, #0
 80071b2:	b2db      	uxtb	r3, r3
 80071b4:	461a      	mov	r2, r3
 80071b6:	79fb      	ldrb	r3, [r7, #7]
 80071b8:	429a      	cmp	r2, r3
 80071ba:	d0b6      	beq.n	800712a <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80071bc:	2300      	movs	r3, #0
}
 80071be:	4618      	mov	r0, r3
 80071c0:	3710      	adds	r7, #16
 80071c2:	46bd      	mov	sp, r7
 80071c4:	bd80      	pop	{r7, pc}

080071c6 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80071c6:	b580      	push	{r7, lr}
 80071c8:	b084      	sub	sp, #16
 80071ca:	af00      	add	r7, sp, #0
 80071cc:	60f8      	str	r0, [r7, #12]
 80071ce:	60b9      	str	r1, [r7, #8]
 80071d0:	607a      	str	r2, [r7, #4]
 80071d2:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80071d4:	e051      	b.n	800727a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80071d6:	68fb      	ldr	r3, [r7, #12]
 80071d8:	681b      	ldr	r3, [r3, #0]
 80071da:	695b      	ldr	r3, [r3, #20]
 80071dc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80071e0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80071e4:	d123      	bne.n	800722e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80071e6:	68fb      	ldr	r3, [r7, #12]
 80071e8:	681b      	ldr	r3, [r3, #0]
 80071ea:	681a      	ldr	r2, [r3, #0]
 80071ec:	68fb      	ldr	r3, [r7, #12]
 80071ee:	681b      	ldr	r3, [r3, #0]
 80071f0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80071f4:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80071f6:	68fb      	ldr	r3, [r7, #12]
 80071f8:	681b      	ldr	r3, [r3, #0]
 80071fa:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80071fe:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8007200:	68fb      	ldr	r3, [r7, #12]
 8007202:	2200      	movs	r2, #0
 8007204:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8007206:	68fb      	ldr	r3, [r7, #12]
 8007208:	2220      	movs	r2, #32
 800720a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800720e:	68fb      	ldr	r3, [r7, #12]
 8007210:	2200      	movs	r2, #0
 8007212:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8007216:	68fb      	ldr	r3, [r7, #12]
 8007218:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800721a:	f043 0204 	orr.w	r2, r3, #4
 800721e:	68fb      	ldr	r3, [r7, #12]
 8007220:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8007222:	68fb      	ldr	r3, [r7, #12]
 8007224:	2200      	movs	r2, #0
 8007226:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800722a:	2301      	movs	r3, #1
 800722c:	e046      	b.n	80072bc <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800722e:	687b      	ldr	r3, [r7, #4]
 8007230:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007234:	d021      	beq.n	800727a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007236:	f7fe fd05 	bl	8005c44 <HAL_GetTick>
 800723a:	4602      	mov	r2, r0
 800723c:	683b      	ldr	r3, [r7, #0]
 800723e:	1ad3      	subs	r3, r2, r3
 8007240:	687a      	ldr	r2, [r7, #4]
 8007242:	429a      	cmp	r2, r3
 8007244:	d302      	bcc.n	800724c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8007246:	687b      	ldr	r3, [r7, #4]
 8007248:	2b00      	cmp	r3, #0
 800724a:	d116      	bne.n	800727a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800724c:	68fb      	ldr	r3, [r7, #12]
 800724e:	2200      	movs	r2, #0
 8007250:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8007252:	68fb      	ldr	r3, [r7, #12]
 8007254:	2220      	movs	r2, #32
 8007256:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800725a:	68fb      	ldr	r3, [r7, #12]
 800725c:	2200      	movs	r2, #0
 800725e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8007262:	68fb      	ldr	r3, [r7, #12]
 8007264:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007266:	f043 0220 	orr.w	r2, r3, #32
 800726a:	68fb      	ldr	r3, [r7, #12]
 800726c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800726e:	68fb      	ldr	r3, [r7, #12]
 8007270:	2200      	movs	r2, #0
 8007272:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8007276:	2301      	movs	r3, #1
 8007278:	e020      	b.n	80072bc <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800727a:	68bb      	ldr	r3, [r7, #8]
 800727c:	0c1b      	lsrs	r3, r3, #16
 800727e:	b2db      	uxtb	r3, r3
 8007280:	2b01      	cmp	r3, #1
 8007282:	d10c      	bne.n	800729e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8007284:	68fb      	ldr	r3, [r7, #12]
 8007286:	681b      	ldr	r3, [r3, #0]
 8007288:	695b      	ldr	r3, [r3, #20]
 800728a:	43da      	mvns	r2, r3
 800728c:	68bb      	ldr	r3, [r7, #8]
 800728e:	4013      	ands	r3, r2
 8007290:	b29b      	uxth	r3, r3
 8007292:	2b00      	cmp	r3, #0
 8007294:	bf14      	ite	ne
 8007296:	2301      	movne	r3, #1
 8007298:	2300      	moveq	r3, #0
 800729a:	b2db      	uxtb	r3, r3
 800729c:	e00b      	b.n	80072b6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 800729e:	68fb      	ldr	r3, [r7, #12]
 80072a0:	681b      	ldr	r3, [r3, #0]
 80072a2:	699b      	ldr	r3, [r3, #24]
 80072a4:	43da      	mvns	r2, r3
 80072a6:	68bb      	ldr	r3, [r7, #8]
 80072a8:	4013      	ands	r3, r2
 80072aa:	b29b      	uxth	r3, r3
 80072ac:	2b00      	cmp	r3, #0
 80072ae:	bf14      	ite	ne
 80072b0:	2301      	movne	r3, #1
 80072b2:	2300      	moveq	r3, #0
 80072b4:	b2db      	uxtb	r3, r3
 80072b6:	2b00      	cmp	r3, #0
 80072b8:	d18d      	bne.n	80071d6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 80072ba:	2300      	movs	r3, #0
}
 80072bc:	4618      	mov	r0, r3
 80072be:	3710      	adds	r7, #16
 80072c0:	46bd      	mov	sp, r7
 80072c2:	bd80      	pop	{r7, pc}

080072c4 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80072c4:	b580      	push	{r7, lr}
 80072c6:	b084      	sub	sp, #16
 80072c8:	af00      	add	r7, sp, #0
 80072ca:	60f8      	str	r0, [r7, #12]
 80072cc:	60b9      	str	r1, [r7, #8]
 80072ce:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80072d0:	e02d      	b.n	800732e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80072d2:	68f8      	ldr	r0, [r7, #12]
 80072d4:	f000 f8ce 	bl	8007474 <I2C_IsAcknowledgeFailed>
 80072d8:	4603      	mov	r3, r0
 80072da:	2b00      	cmp	r3, #0
 80072dc:	d001      	beq.n	80072e2 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80072de:	2301      	movs	r3, #1
 80072e0:	e02d      	b.n	800733e <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80072e2:	68bb      	ldr	r3, [r7, #8]
 80072e4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80072e8:	d021      	beq.n	800732e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80072ea:	f7fe fcab 	bl	8005c44 <HAL_GetTick>
 80072ee:	4602      	mov	r2, r0
 80072f0:	687b      	ldr	r3, [r7, #4]
 80072f2:	1ad3      	subs	r3, r2, r3
 80072f4:	68ba      	ldr	r2, [r7, #8]
 80072f6:	429a      	cmp	r2, r3
 80072f8:	d302      	bcc.n	8007300 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80072fa:	68bb      	ldr	r3, [r7, #8]
 80072fc:	2b00      	cmp	r3, #0
 80072fe:	d116      	bne.n	800732e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8007300:	68fb      	ldr	r3, [r7, #12]
 8007302:	2200      	movs	r2, #0
 8007304:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8007306:	68fb      	ldr	r3, [r7, #12]
 8007308:	2220      	movs	r2, #32
 800730a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800730e:	68fb      	ldr	r3, [r7, #12]
 8007310:	2200      	movs	r2, #0
 8007312:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8007316:	68fb      	ldr	r3, [r7, #12]
 8007318:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800731a:	f043 0220 	orr.w	r2, r3, #32
 800731e:	68fb      	ldr	r3, [r7, #12]
 8007320:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8007322:	68fb      	ldr	r3, [r7, #12]
 8007324:	2200      	movs	r2, #0
 8007326:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800732a:	2301      	movs	r3, #1
 800732c:	e007      	b.n	800733e <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800732e:	68fb      	ldr	r3, [r7, #12]
 8007330:	681b      	ldr	r3, [r3, #0]
 8007332:	695b      	ldr	r3, [r3, #20]
 8007334:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007338:	2b80      	cmp	r3, #128	; 0x80
 800733a:	d1ca      	bne.n	80072d2 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800733c:	2300      	movs	r3, #0
}
 800733e:	4618      	mov	r0, r3
 8007340:	3710      	adds	r7, #16
 8007342:	46bd      	mov	sp, r7
 8007344:	bd80      	pop	{r7, pc}

08007346 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8007346:	b580      	push	{r7, lr}
 8007348:	b084      	sub	sp, #16
 800734a:	af00      	add	r7, sp, #0
 800734c:	60f8      	str	r0, [r7, #12]
 800734e:	60b9      	str	r1, [r7, #8]
 8007350:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8007352:	e02d      	b.n	80073b0 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8007354:	68f8      	ldr	r0, [r7, #12]
 8007356:	f000 f88d 	bl	8007474 <I2C_IsAcknowledgeFailed>
 800735a:	4603      	mov	r3, r0
 800735c:	2b00      	cmp	r3, #0
 800735e:	d001      	beq.n	8007364 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8007360:	2301      	movs	r3, #1
 8007362:	e02d      	b.n	80073c0 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007364:	68bb      	ldr	r3, [r7, #8]
 8007366:	f1b3 3fff 	cmp.w	r3, #4294967295
 800736a:	d021      	beq.n	80073b0 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800736c:	f7fe fc6a 	bl	8005c44 <HAL_GetTick>
 8007370:	4602      	mov	r2, r0
 8007372:	687b      	ldr	r3, [r7, #4]
 8007374:	1ad3      	subs	r3, r2, r3
 8007376:	68ba      	ldr	r2, [r7, #8]
 8007378:	429a      	cmp	r2, r3
 800737a:	d302      	bcc.n	8007382 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 800737c:	68bb      	ldr	r3, [r7, #8]
 800737e:	2b00      	cmp	r3, #0
 8007380:	d116      	bne.n	80073b0 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8007382:	68fb      	ldr	r3, [r7, #12]
 8007384:	2200      	movs	r2, #0
 8007386:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8007388:	68fb      	ldr	r3, [r7, #12]
 800738a:	2220      	movs	r2, #32
 800738c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8007390:	68fb      	ldr	r3, [r7, #12]
 8007392:	2200      	movs	r2, #0
 8007394:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8007398:	68fb      	ldr	r3, [r7, #12]
 800739a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800739c:	f043 0220 	orr.w	r2, r3, #32
 80073a0:	68fb      	ldr	r3, [r7, #12]
 80073a2:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80073a4:	68fb      	ldr	r3, [r7, #12]
 80073a6:	2200      	movs	r2, #0
 80073a8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80073ac:	2301      	movs	r3, #1
 80073ae:	e007      	b.n	80073c0 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80073b0:	68fb      	ldr	r3, [r7, #12]
 80073b2:	681b      	ldr	r3, [r3, #0]
 80073b4:	695b      	ldr	r3, [r3, #20]
 80073b6:	f003 0304 	and.w	r3, r3, #4
 80073ba:	2b04      	cmp	r3, #4
 80073bc:	d1ca      	bne.n	8007354 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80073be:	2300      	movs	r3, #0
}
 80073c0:	4618      	mov	r0, r3
 80073c2:	3710      	adds	r7, #16
 80073c4:	46bd      	mov	sp, r7
 80073c6:	bd80      	pop	{r7, pc}

080073c8 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80073c8:	b580      	push	{r7, lr}
 80073ca:	b084      	sub	sp, #16
 80073cc:	af00      	add	r7, sp, #0
 80073ce:	60f8      	str	r0, [r7, #12]
 80073d0:	60b9      	str	r1, [r7, #8]
 80073d2:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80073d4:	e042      	b.n	800745c <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80073d6:	68fb      	ldr	r3, [r7, #12]
 80073d8:	681b      	ldr	r3, [r3, #0]
 80073da:	695b      	ldr	r3, [r3, #20]
 80073dc:	f003 0310 	and.w	r3, r3, #16
 80073e0:	2b10      	cmp	r3, #16
 80073e2:	d119      	bne.n	8007418 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80073e4:	68fb      	ldr	r3, [r7, #12]
 80073e6:	681b      	ldr	r3, [r3, #0]
 80073e8:	f06f 0210 	mvn.w	r2, #16
 80073ec:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80073ee:	68fb      	ldr	r3, [r7, #12]
 80073f0:	2200      	movs	r2, #0
 80073f2:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80073f4:	68fb      	ldr	r3, [r7, #12]
 80073f6:	2220      	movs	r2, #32
 80073f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80073fc:	68fb      	ldr	r3, [r7, #12]
 80073fe:	2200      	movs	r2, #0
 8007400:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8007404:	68fb      	ldr	r3, [r7, #12]
 8007406:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8007408:	68fb      	ldr	r3, [r7, #12]
 800740a:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800740c:	68fb      	ldr	r3, [r7, #12]
 800740e:	2200      	movs	r2, #0
 8007410:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8007414:	2301      	movs	r3, #1
 8007416:	e029      	b.n	800746c <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007418:	f7fe fc14 	bl	8005c44 <HAL_GetTick>
 800741c:	4602      	mov	r2, r0
 800741e:	687b      	ldr	r3, [r7, #4]
 8007420:	1ad3      	subs	r3, r2, r3
 8007422:	68ba      	ldr	r2, [r7, #8]
 8007424:	429a      	cmp	r2, r3
 8007426:	d302      	bcc.n	800742e <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8007428:	68bb      	ldr	r3, [r7, #8]
 800742a:	2b00      	cmp	r3, #0
 800742c:	d116      	bne.n	800745c <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 800742e:	68fb      	ldr	r3, [r7, #12]
 8007430:	2200      	movs	r2, #0
 8007432:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8007434:	68fb      	ldr	r3, [r7, #12]
 8007436:	2220      	movs	r2, #32
 8007438:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800743c:	68fb      	ldr	r3, [r7, #12]
 800743e:	2200      	movs	r2, #0
 8007440:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8007444:	68fb      	ldr	r3, [r7, #12]
 8007446:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007448:	f043 0220 	orr.w	r2, r3, #32
 800744c:	68fb      	ldr	r3, [r7, #12]
 800744e:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8007450:	68fb      	ldr	r3, [r7, #12]
 8007452:	2200      	movs	r2, #0
 8007454:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8007458:	2301      	movs	r3, #1
 800745a:	e007      	b.n	800746c <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800745c:	68fb      	ldr	r3, [r7, #12]
 800745e:	681b      	ldr	r3, [r3, #0]
 8007460:	695b      	ldr	r3, [r3, #20]
 8007462:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007466:	2b40      	cmp	r3, #64	; 0x40
 8007468:	d1b5      	bne.n	80073d6 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800746a:	2300      	movs	r3, #0
}
 800746c:	4618      	mov	r0, r3
 800746e:	3710      	adds	r7, #16
 8007470:	46bd      	mov	sp, r7
 8007472:	bd80      	pop	{r7, pc}

08007474 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8007474:	b480      	push	{r7}
 8007476:	b083      	sub	sp, #12
 8007478:	af00      	add	r7, sp, #0
 800747a:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800747c:	687b      	ldr	r3, [r7, #4]
 800747e:	681b      	ldr	r3, [r3, #0]
 8007480:	695b      	ldr	r3, [r3, #20]
 8007482:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007486:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800748a:	d11b      	bne.n	80074c4 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800748c:	687b      	ldr	r3, [r7, #4]
 800748e:	681b      	ldr	r3, [r3, #0]
 8007490:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8007494:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8007496:	687b      	ldr	r3, [r7, #4]
 8007498:	2200      	movs	r2, #0
 800749a:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 800749c:	687b      	ldr	r3, [r7, #4]
 800749e:	2220      	movs	r2, #32
 80074a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80074a4:	687b      	ldr	r3, [r7, #4]
 80074a6:	2200      	movs	r2, #0
 80074a8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80074ac:	687b      	ldr	r3, [r7, #4]
 80074ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80074b0:	f043 0204 	orr.w	r2, r3, #4
 80074b4:	687b      	ldr	r3, [r7, #4]
 80074b6:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80074b8:	687b      	ldr	r3, [r7, #4]
 80074ba:	2200      	movs	r2, #0
 80074bc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 80074c0:	2301      	movs	r3, #1
 80074c2:	e000      	b.n	80074c6 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80074c4:	2300      	movs	r3, #0
}
 80074c6:	4618      	mov	r0, r3
 80074c8:	370c      	adds	r7, #12
 80074ca:	46bd      	mov	sp, r7
 80074cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074d0:	4770      	bx	lr
	...

080074d4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80074d4:	b580      	push	{r7, lr}
 80074d6:	b084      	sub	sp, #16
 80074d8:	af00      	add	r7, sp, #0
 80074da:	6078      	str	r0, [r7, #4]
 80074dc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80074de:	687b      	ldr	r3, [r7, #4]
 80074e0:	2b00      	cmp	r3, #0
 80074e2:	d101      	bne.n	80074e8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80074e4:	2301      	movs	r3, #1
 80074e6:	e0cc      	b.n	8007682 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80074e8:	4b68      	ldr	r3, [pc, #416]	; (800768c <HAL_RCC_ClockConfig+0x1b8>)
 80074ea:	681b      	ldr	r3, [r3, #0]
 80074ec:	f003 030f 	and.w	r3, r3, #15
 80074f0:	683a      	ldr	r2, [r7, #0]
 80074f2:	429a      	cmp	r2, r3
 80074f4:	d90c      	bls.n	8007510 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80074f6:	4b65      	ldr	r3, [pc, #404]	; (800768c <HAL_RCC_ClockConfig+0x1b8>)
 80074f8:	683a      	ldr	r2, [r7, #0]
 80074fa:	b2d2      	uxtb	r2, r2
 80074fc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80074fe:	4b63      	ldr	r3, [pc, #396]	; (800768c <HAL_RCC_ClockConfig+0x1b8>)
 8007500:	681b      	ldr	r3, [r3, #0]
 8007502:	f003 030f 	and.w	r3, r3, #15
 8007506:	683a      	ldr	r2, [r7, #0]
 8007508:	429a      	cmp	r2, r3
 800750a:	d001      	beq.n	8007510 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800750c:	2301      	movs	r3, #1
 800750e:	e0b8      	b.n	8007682 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8007510:	687b      	ldr	r3, [r7, #4]
 8007512:	681b      	ldr	r3, [r3, #0]
 8007514:	f003 0302 	and.w	r3, r3, #2
 8007518:	2b00      	cmp	r3, #0
 800751a:	d020      	beq.n	800755e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800751c:	687b      	ldr	r3, [r7, #4]
 800751e:	681b      	ldr	r3, [r3, #0]
 8007520:	f003 0304 	and.w	r3, r3, #4
 8007524:	2b00      	cmp	r3, #0
 8007526:	d005      	beq.n	8007534 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8007528:	4b59      	ldr	r3, [pc, #356]	; (8007690 <HAL_RCC_ClockConfig+0x1bc>)
 800752a:	689b      	ldr	r3, [r3, #8]
 800752c:	4a58      	ldr	r2, [pc, #352]	; (8007690 <HAL_RCC_ClockConfig+0x1bc>)
 800752e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8007532:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007534:	687b      	ldr	r3, [r7, #4]
 8007536:	681b      	ldr	r3, [r3, #0]
 8007538:	f003 0308 	and.w	r3, r3, #8
 800753c:	2b00      	cmp	r3, #0
 800753e:	d005      	beq.n	800754c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8007540:	4b53      	ldr	r3, [pc, #332]	; (8007690 <HAL_RCC_ClockConfig+0x1bc>)
 8007542:	689b      	ldr	r3, [r3, #8]
 8007544:	4a52      	ldr	r2, [pc, #328]	; (8007690 <HAL_RCC_ClockConfig+0x1bc>)
 8007546:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800754a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800754c:	4b50      	ldr	r3, [pc, #320]	; (8007690 <HAL_RCC_ClockConfig+0x1bc>)
 800754e:	689b      	ldr	r3, [r3, #8]
 8007550:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8007554:	687b      	ldr	r3, [r7, #4]
 8007556:	689b      	ldr	r3, [r3, #8]
 8007558:	494d      	ldr	r1, [pc, #308]	; (8007690 <HAL_RCC_ClockConfig+0x1bc>)
 800755a:	4313      	orrs	r3, r2
 800755c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800755e:	687b      	ldr	r3, [r7, #4]
 8007560:	681b      	ldr	r3, [r3, #0]
 8007562:	f003 0301 	and.w	r3, r3, #1
 8007566:	2b00      	cmp	r3, #0
 8007568:	d044      	beq.n	80075f4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800756a:	687b      	ldr	r3, [r7, #4]
 800756c:	685b      	ldr	r3, [r3, #4]
 800756e:	2b01      	cmp	r3, #1
 8007570:	d107      	bne.n	8007582 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007572:	4b47      	ldr	r3, [pc, #284]	; (8007690 <HAL_RCC_ClockConfig+0x1bc>)
 8007574:	681b      	ldr	r3, [r3, #0]
 8007576:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800757a:	2b00      	cmp	r3, #0
 800757c:	d119      	bne.n	80075b2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800757e:	2301      	movs	r3, #1
 8007580:	e07f      	b.n	8007682 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8007582:	687b      	ldr	r3, [r7, #4]
 8007584:	685b      	ldr	r3, [r3, #4]
 8007586:	2b02      	cmp	r3, #2
 8007588:	d003      	beq.n	8007592 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800758a:	687b      	ldr	r3, [r7, #4]
 800758c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800758e:	2b03      	cmp	r3, #3
 8007590:	d107      	bne.n	80075a2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007592:	4b3f      	ldr	r3, [pc, #252]	; (8007690 <HAL_RCC_ClockConfig+0x1bc>)
 8007594:	681b      	ldr	r3, [r3, #0]
 8007596:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800759a:	2b00      	cmp	r3, #0
 800759c:	d109      	bne.n	80075b2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800759e:	2301      	movs	r3, #1
 80075a0:	e06f      	b.n	8007682 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80075a2:	4b3b      	ldr	r3, [pc, #236]	; (8007690 <HAL_RCC_ClockConfig+0x1bc>)
 80075a4:	681b      	ldr	r3, [r3, #0]
 80075a6:	f003 0302 	and.w	r3, r3, #2
 80075aa:	2b00      	cmp	r3, #0
 80075ac:	d101      	bne.n	80075b2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80075ae:	2301      	movs	r3, #1
 80075b0:	e067      	b.n	8007682 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80075b2:	4b37      	ldr	r3, [pc, #220]	; (8007690 <HAL_RCC_ClockConfig+0x1bc>)
 80075b4:	689b      	ldr	r3, [r3, #8]
 80075b6:	f023 0203 	bic.w	r2, r3, #3
 80075ba:	687b      	ldr	r3, [r7, #4]
 80075bc:	685b      	ldr	r3, [r3, #4]
 80075be:	4934      	ldr	r1, [pc, #208]	; (8007690 <HAL_RCC_ClockConfig+0x1bc>)
 80075c0:	4313      	orrs	r3, r2
 80075c2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80075c4:	f7fe fb3e 	bl	8005c44 <HAL_GetTick>
 80075c8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80075ca:	e00a      	b.n	80075e2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80075cc:	f7fe fb3a 	bl	8005c44 <HAL_GetTick>
 80075d0:	4602      	mov	r2, r0
 80075d2:	68fb      	ldr	r3, [r7, #12]
 80075d4:	1ad3      	subs	r3, r2, r3
 80075d6:	f241 3288 	movw	r2, #5000	; 0x1388
 80075da:	4293      	cmp	r3, r2
 80075dc:	d901      	bls.n	80075e2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80075de:	2303      	movs	r3, #3
 80075e0:	e04f      	b.n	8007682 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80075e2:	4b2b      	ldr	r3, [pc, #172]	; (8007690 <HAL_RCC_ClockConfig+0x1bc>)
 80075e4:	689b      	ldr	r3, [r3, #8]
 80075e6:	f003 020c 	and.w	r2, r3, #12
 80075ea:	687b      	ldr	r3, [r7, #4]
 80075ec:	685b      	ldr	r3, [r3, #4]
 80075ee:	009b      	lsls	r3, r3, #2
 80075f0:	429a      	cmp	r2, r3
 80075f2:	d1eb      	bne.n	80075cc <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80075f4:	4b25      	ldr	r3, [pc, #148]	; (800768c <HAL_RCC_ClockConfig+0x1b8>)
 80075f6:	681b      	ldr	r3, [r3, #0]
 80075f8:	f003 030f 	and.w	r3, r3, #15
 80075fc:	683a      	ldr	r2, [r7, #0]
 80075fe:	429a      	cmp	r2, r3
 8007600:	d20c      	bcs.n	800761c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007602:	4b22      	ldr	r3, [pc, #136]	; (800768c <HAL_RCC_ClockConfig+0x1b8>)
 8007604:	683a      	ldr	r2, [r7, #0]
 8007606:	b2d2      	uxtb	r2, r2
 8007608:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800760a:	4b20      	ldr	r3, [pc, #128]	; (800768c <HAL_RCC_ClockConfig+0x1b8>)
 800760c:	681b      	ldr	r3, [r3, #0]
 800760e:	f003 030f 	and.w	r3, r3, #15
 8007612:	683a      	ldr	r2, [r7, #0]
 8007614:	429a      	cmp	r2, r3
 8007616:	d001      	beq.n	800761c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8007618:	2301      	movs	r3, #1
 800761a:	e032      	b.n	8007682 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800761c:	687b      	ldr	r3, [r7, #4]
 800761e:	681b      	ldr	r3, [r3, #0]
 8007620:	f003 0304 	and.w	r3, r3, #4
 8007624:	2b00      	cmp	r3, #0
 8007626:	d008      	beq.n	800763a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8007628:	4b19      	ldr	r3, [pc, #100]	; (8007690 <HAL_RCC_ClockConfig+0x1bc>)
 800762a:	689b      	ldr	r3, [r3, #8]
 800762c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8007630:	687b      	ldr	r3, [r7, #4]
 8007632:	68db      	ldr	r3, [r3, #12]
 8007634:	4916      	ldr	r1, [pc, #88]	; (8007690 <HAL_RCC_ClockConfig+0x1bc>)
 8007636:	4313      	orrs	r3, r2
 8007638:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800763a:	687b      	ldr	r3, [r7, #4]
 800763c:	681b      	ldr	r3, [r3, #0]
 800763e:	f003 0308 	and.w	r3, r3, #8
 8007642:	2b00      	cmp	r3, #0
 8007644:	d009      	beq.n	800765a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8007646:	4b12      	ldr	r3, [pc, #72]	; (8007690 <HAL_RCC_ClockConfig+0x1bc>)
 8007648:	689b      	ldr	r3, [r3, #8]
 800764a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800764e:	687b      	ldr	r3, [r7, #4]
 8007650:	691b      	ldr	r3, [r3, #16]
 8007652:	00db      	lsls	r3, r3, #3
 8007654:	490e      	ldr	r1, [pc, #56]	; (8007690 <HAL_RCC_ClockConfig+0x1bc>)
 8007656:	4313      	orrs	r3, r2
 8007658:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800765a:	f000 f855 	bl	8007708 <HAL_RCC_GetSysClockFreq>
 800765e:	4602      	mov	r2, r0
 8007660:	4b0b      	ldr	r3, [pc, #44]	; (8007690 <HAL_RCC_ClockConfig+0x1bc>)
 8007662:	689b      	ldr	r3, [r3, #8]
 8007664:	091b      	lsrs	r3, r3, #4
 8007666:	f003 030f 	and.w	r3, r3, #15
 800766a:	490a      	ldr	r1, [pc, #40]	; (8007694 <HAL_RCC_ClockConfig+0x1c0>)
 800766c:	5ccb      	ldrb	r3, [r1, r3]
 800766e:	fa22 f303 	lsr.w	r3, r2, r3
 8007672:	4a09      	ldr	r2, [pc, #36]	; (8007698 <HAL_RCC_ClockConfig+0x1c4>)
 8007674:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8007676:	4b09      	ldr	r3, [pc, #36]	; (800769c <HAL_RCC_ClockConfig+0x1c8>)
 8007678:	681b      	ldr	r3, [r3, #0]
 800767a:	4618      	mov	r0, r3
 800767c:	f7fe fa9e 	bl	8005bbc <HAL_InitTick>

  return HAL_OK;
 8007680:	2300      	movs	r3, #0
}
 8007682:	4618      	mov	r0, r3
 8007684:	3710      	adds	r7, #16
 8007686:	46bd      	mov	sp, r7
 8007688:	bd80      	pop	{r7, pc}
 800768a:	bf00      	nop
 800768c:	40023c00 	.word	0x40023c00
 8007690:	40023800 	.word	0x40023800
 8007694:	0800b1fc 	.word	0x0800b1fc
 8007698:	20000000 	.word	0x20000000
 800769c:	20000048 	.word	0x20000048

080076a0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80076a0:	b480      	push	{r7}
 80076a2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80076a4:	4b03      	ldr	r3, [pc, #12]	; (80076b4 <HAL_RCC_GetHCLKFreq+0x14>)
 80076a6:	681b      	ldr	r3, [r3, #0]
}
 80076a8:	4618      	mov	r0, r3
 80076aa:	46bd      	mov	sp, r7
 80076ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076b0:	4770      	bx	lr
 80076b2:	bf00      	nop
 80076b4:	20000000 	.word	0x20000000

080076b8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80076b8:	b580      	push	{r7, lr}
 80076ba:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80076bc:	f7ff fff0 	bl	80076a0 <HAL_RCC_GetHCLKFreq>
 80076c0:	4602      	mov	r2, r0
 80076c2:	4b05      	ldr	r3, [pc, #20]	; (80076d8 <HAL_RCC_GetPCLK1Freq+0x20>)
 80076c4:	689b      	ldr	r3, [r3, #8]
 80076c6:	0a9b      	lsrs	r3, r3, #10
 80076c8:	f003 0307 	and.w	r3, r3, #7
 80076cc:	4903      	ldr	r1, [pc, #12]	; (80076dc <HAL_RCC_GetPCLK1Freq+0x24>)
 80076ce:	5ccb      	ldrb	r3, [r1, r3]
 80076d0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80076d4:	4618      	mov	r0, r3
 80076d6:	bd80      	pop	{r7, pc}
 80076d8:	40023800 	.word	0x40023800
 80076dc:	0800b20c 	.word	0x0800b20c

080076e0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80076e0:	b580      	push	{r7, lr}
 80076e2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80076e4:	f7ff ffdc 	bl	80076a0 <HAL_RCC_GetHCLKFreq>
 80076e8:	4602      	mov	r2, r0
 80076ea:	4b05      	ldr	r3, [pc, #20]	; (8007700 <HAL_RCC_GetPCLK2Freq+0x20>)
 80076ec:	689b      	ldr	r3, [r3, #8]
 80076ee:	0b5b      	lsrs	r3, r3, #13
 80076f0:	f003 0307 	and.w	r3, r3, #7
 80076f4:	4903      	ldr	r1, [pc, #12]	; (8007704 <HAL_RCC_GetPCLK2Freq+0x24>)
 80076f6:	5ccb      	ldrb	r3, [r1, r3]
 80076f8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80076fc:	4618      	mov	r0, r3
 80076fe:	bd80      	pop	{r7, pc}
 8007700:	40023800 	.word	0x40023800
 8007704:	0800b20c 	.word	0x0800b20c

08007708 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8007708:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800770c:	b0ae      	sub	sp, #184	; 0xb8
 800770e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8007710:	2300      	movs	r3, #0
 8007712:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t pllvco = 0U;
 8007716:	2300      	movs	r3, #0
 8007718:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  uint32_t pllp = 0U;
 800771c:	2300      	movs	r3, #0
 800771e:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  uint32_t pllr = 0U;
 8007722:	2300      	movs	r3, #0
 8007724:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  uint32_t sysclockfreq = 0U;
 8007728:	2300      	movs	r3, #0
 800772a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800772e:	4bcb      	ldr	r3, [pc, #812]	; (8007a5c <HAL_RCC_GetSysClockFreq+0x354>)
 8007730:	689b      	ldr	r3, [r3, #8]
 8007732:	f003 030c 	and.w	r3, r3, #12
 8007736:	2b0c      	cmp	r3, #12
 8007738:	f200 8206 	bhi.w	8007b48 <HAL_RCC_GetSysClockFreq+0x440>
 800773c:	a201      	add	r2, pc, #4	; (adr r2, 8007744 <HAL_RCC_GetSysClockFreq+0x3c>)
 800773e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007742:	bf00      	nop
 8007744:	08007779 	.word	0x08007779
 8007748:	08007b49 	.word	0x08007b49
 800774c:	08007b49 	.word	0x08007b49
 8007750:	08007b49 	.word	0x08007b49
 8007754:	08007781 	.word	0x08007781
 8007758:	08007b49 	.word	0x08007b49
 800775c:	08007b49 	.word	0x08007b49
 8007760:	08007b49 	.word	0x08007b49
 8007764:	08007789 	.word	0x08007789
 8007768:	08007b49 	.word	0x08007b49
 800776c:	08007b49 	.word	0x08007b49
 8007770:	08007b49 	.word	0x08007b49
 8007774:	08007979 	.word	0x08007979
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8007778:	4bb9      	ldr	r3, [pc, #740]	; (8007a60 <HAL_RCC_GetSysClockFreq+0x358>)
 800777a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
       break;
 800777e:	e1e7      	b.n	8007b50 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8007780:	4bb8      	ldr	r3, [pc, #736]	; (8007a64 <HAL_RCC_GetSysClockFreq+0x35c>)
 8007782:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8007786:	e1e3      	b.n	8007b50 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8007788:	4bb4      	ldr	r3, [pc, #720]	; (8007a5c <HAL_RCC_GetSysClockFreq+0x354>)
 800778a:	685b      	ldr	r3, [r3, #4]
 800778c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007790:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8007794:	4bb1      	ldr	r3, [pc, #708]	; (8007a5c <HAL_RCC_GetSysClockFreq+0x354>)
 8007796:	685b      	ldr	r3, [r3, #4]
 8007798:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800779c:	2b00      	cmp	r3, #0
 800779e:	d071      	beq.n	8007884 <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80077a0:	4bae      	ldr	r3, [pc, #696]	; (8007a5c <HAL_RCC_GetSysClockFreq+0x354>)
 80077a2:	685b      	ldr	r3, [r3, #4]
 80077a4:	099b      	lsrs	r3, r3, #6
 80077a6:	2200      	movs	r2, #0
 80077a8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80077ac:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
 80077b0:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80077b4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80077b8:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80077bc:	2300      	movs	r3, #0
 80077be:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80077c2:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 80077c6:	4622      	mov	r2, r4
 80077c8:	462b      	mov	r3, r5
 80077ca:	f04f 0000 	mov.w	r0, #0
 80077ce:	f04f 0100 	mov.w	r1, #0
 80077d2:	0159      	lsls	r1, r3, #5
 80077d4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80077d8:	0150      	lsls	r0, r2, #5
 80077da:	4602      	mov	r2, r0
 80077dc:	460b      	mov	r3, r1
 80077de:	4621      	mov	r1, r4
 80077e0:	1a51      	subs	r1, r2, r1
 80077e2:	6439      	str	r1, [r7, #64]	; 0x40
 80077e4:	4629      	mov	r1, r5
 80077e6:	eb63 0301 	sbc.w	r3, r3, r1
 80077ea:	647b      	str	r3, [r7, #68]	; 0x44
 80077ec:	f04f 0200 	mov.w	r2, #0
 80077f0:	f04f 0300 	mov.w	r3, #0
 80077f4:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	; 0x40
 80077f8:	4649      	mov	r1, r9
 80077fa:	018b      	lsls	r3, r1, #6
 80077fc:	4641      	mov	r1, r8
 80077fe:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8007802:	4641      	mov	r1, r8
 8007804:	018a      	lsls	r2, r1, #6
 8007806:	4641      	mov	r1, r8
 8007808:	1a51      	subs	r1, r2, r1
 800780a:	63b9      	str	r1, [r7, #56]	; 0x38
 800780c:	4649      	mov	r1, r9
 800780e:	eb63 0301 	sbc.w	r3, r3, r1
 8007812:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007814:	f04f 0200 	mov.w	r2, #0
 8007818:	f04f 0300 	mov.w	r3, #0
 800781c:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	; 0x38
 8007820:	4649      	mov	r1, r9
 8007822:	00cb      	lsls	r3, r1, #3
 8007824:	4641      	mov	r1, r8
 8007826:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800782a:	4641      	mov	r1, r8
 800782c:	00ca      	lsls	r2, r1, #3
 800782e:	4610      	mov	r0, r2
 8007830:	4619      	mov	r1, r3
 8007832:	4603      	mov	r3, r0
 8007834:	4622      	mov	r2, r4
 8007836:	189b      	adds	r3, r3, r2
 8007838:	633b      	str	r3, [r7, #48]	; 0x30
 800783a:	462b      	mov	r3, r5
 800783c:	460a      	mov	r2, r1
 800783e:	eb42 0303 	adc.w	r3, r2, r3
 8007842:	637b      	str	r3, [r7, #52]	; 0x34
 8007844:	f04f 0200 	mov.w	r2, #0
 8007848:	f04f 0300 	mov.w	r3, #0
 800784c:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8007850:	4629      	mov	r1, r5
 8007852:	024b      	lsls	r3, r1, #9
 8007854:	4621      	mov	r1, r4
 8007856:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800785a:	4621      	mov	r1, r4
 800785c:	024a      	lsls	r2, r1, #9
 800785e:	4610      	mov	r0, r2
 8007860:	4619      	mov	r1, r3
 8007862:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8007866:	2200      	movs	r2, #0
 8007868:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800786c:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8007870:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 8007874:	f7f9 f932 	bl	8000adc <__aeabi_uldivmod>
 8007878:	4602      	mov	r2, r0
 800787a:	460b      	mov	r3, r1
 800787c:	4613      	mov	r3, r2
 800787e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8007882:	e067      	b.n	8007954 <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8007884:	4b75      	ldr	r3, [pc, #468]	; (8007a5c <HAL_RCC_GetSysClockFreq+0x354>)
 8007886:	685b      	ldr	r3, [r3, #4]
 8007888:	099b      	lsrs	r3, r3, #6
 800788a:	2200      	movs	r2, #0
 800788c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8007890:	f8c7 2084 	str.w	r2, [r7, #132]	; 0x84
 8007894:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8007898:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800789c:	67bb      	str	r3, [r7, #120]	; 0x78
 800789e:	2300      	movs	r3, #0
 80078a0:	67fb      	str	r3, [r7, #124]	; 0x7c
 80078a2:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	; 0x78
 80078a6:	4622      	mov	r2, r4
 80078a8:	462b      	mov	r3, r5
 80078aa:	f04f 0000 	mov.w	r0, #0
 80078ae:	f04f 0100 	mov.w	r1, #0
 80078b2:	0159      	lsls	r1, r3, #5
 80078b4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80078b8:	0150      	lsls	r0, r2, #5
 80078ba:	4602      	mov	r2, r0
 80078bc:	460b      	mov	r3, r1
 80078be:	4621      	mov	r1, r4
 80078c0:	1a51      	subs	r1, r2, r1
 80078c2:	62b9      	str	r1, [r7, #40]	; 0x28
 80078c4:	4629      	mov	r1, r5
 80078c6:	eb63 0301 	sbc.w	r3, r3, r1
 80078ca:	62fb      	str	r3, [r7, #44]	; 0x2c
 80078cc:	f04f 0200 	mov.w	r2, #0
 80078d0:	f04f 0300 	mov.w	r3, #0
 80078d4:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	; 0x28
 80078d8:	4649      	mov	r1, r9
 80078da:	018b      	lsls	r3, r1, #6
 80078dc:	4641      	mov	r1, r8
 80078de:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80078e2:	4641      	mov	r1, r8
 80078e4:	018a      	lsls	r2, r1, #6
 80078e6:	4641      	mov	r1, r8
 80078e8:	ebb2 0a01 	subs.w	sl, r2, r1
 80078ec:	4649      	mov	r1, r9
 80078ee:	eb63 0b01 	sbc.w	fp, r3, r1
 80078f2:	f04f 0200 	mov.w	r2, #0
 80078f6:	f04f 0300 	mov.w	r3, #0
 80078fa:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80078fe:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8007902:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8007906:	4692      	mov	sl, r2
 8007908:	469b      	mov	fp, r3
 800790a:	4623      	mov	r3, r4
 800790c:	eb1a 0303 	adds.w	r3, sl, r3
 8007910:	623b      	str	r3, [r7, #32]
 8007912:	462b      	mov	r3, r5
 8007914:	eb4b 0303 	adc.w	r3, fp, r3
 8007918:	627b      	str	r3, [r7, #36]	; 0x24
 800791a:	f04f 0200 	mov.w	r2, #0
 800791e:	f04f 0300 	mov.w	r3, #0
 8007922:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 8007926:	4629      	mov	r1, r5
 8007928:	028b      	lsls	r3, r1, #10
 800792a:	4621      	mov	r1, r4
 800792c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8007930:	4621      	mov	r1, r4
 8007932:	028a      	lsls	r2, r1, #10
 8007934:	4610      	mov	r0, r2
 8007936:	4619      	mov	r1, r3
 8007938:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800793c:	2200      	movs	r2, #0
 800793e:	673b      	str	r3, [r7, #112]	; 0x70
 8007940:	677a      	str	r2, [r7, #116]	; 0x74
 8007942:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 8007946:	f7f9 f8c9 	bl	8000adc <__aeabi_uldivmod>
 800794a:	4602      	mov	r2, r0
 800794c:	460b      	mov	r3, r1
 800794e:	4613      	mov	r3, r2
 8007950:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8007954:	4b41      	ldr	r3, [pc, #260]	; (8007a5c <HAL_RCC_GetSysClockFreq+0x354>)
 8007956:	685b      	ldr	r3, [r3, #4]
 8007958:	0c1b      	lsrs	r3, r3, #16
 800795a:	f003 0303 	and.w	r3, r3, #3
 800795e:	3301      	adds	r3, #1
 8007960:	005b      	lsls	r3, r3, #1
 8007962:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

      sysclockfreq = pllvco/pllp;
 8007966:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800796a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800796e:	fbb2 f3f3 	udiv	r3, r2, r3
 8007972:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8007976:	e0eb      	b.n	8007b50 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8007978:	4b38      	ldr	r3, [pc, #224]	; (8007a5c <HAL_RCC_GetSysClockFreq+0x354>)
 800797a:	685b      	ldr	r3, [r3, #4]
 800797c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007980:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8007984:	4b35      	ldr	r3, [pc, #212]	; (8007a5c <HAL_RCC_GetSysClockFreq+0x354>)
 8007986:	685b      	ldr	r3, [r3, #4]
 8007988:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800798c:	2b00      	cmp	r3, #0
 800798e:	d06b      	beq.n	8007a68 <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8007990:	4b32      	ldr	r3, [pc, #200]	; (8007a5c <HAL_RCC_GetSysClockFreq+0x354>)
 8007992:	685b      	ldr	r3, [r3, #4]
 8007994:	099b      	lsrs	r3, r3, #6
 8007996:	2200      	movs	r2, #0
 8007998:	66bb      	str	r3, [r7, #104]	; 0x68
 800799a:	66fa      	str	r2, [r7, #108]	; 0x6c
 800799c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800799e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80079a2:	663b      	str	r3, [r7, #96]	; 0x60
 80079a4:	2300      	movs	r3, #0
 80079a6:	667b      	str	r3, [r7, #100]	; 0x64
 80079a8:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	; 0x60
 80079ac:	4622      	mov	r2, r4
 80079ae:	462b      	mov	r3, r5
 80079b0:	f04f 0000 	mov.w	r0, #0
 80079b4:	f04f 0100 	mov.w	r1, #0
 80079b8:	0159      	lsls	r1, r3, #5
 80079ba:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80079be:	0150      	lsls	r0, r2, #5
 80079c0:	4602      	mov	r2, r0
 80079c2:	460b      	mov	r3, r1
 80079c4:	4621      	mov	r1, r4
 80079c6:	1a51      	subs	r1, r2, r1
 80079c8:	61b9      	str	r1, [r7, #24]
 80079ca:	4629      	mov	r1, r5
 80079cc:	eb63 0301 	sbc.w	r3, r3, r1
 80079d0:	61fb      	str	r3, [r7, #28]
 80079d2:	f04f 0200 	mov.w	r2, #0
 80079d6:	f04f 0300 	mov.w	r3, #0
 80079da:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 80079de:	4659      	mov	r1, fp
 80079e0:	018b      	lsls	r3, r1, #6
 80079e2:	4651      	mov	r1, sl
 80079e4:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80079e8:	4651      	mov	r1, sl
 80079ea:	018a      	lsls	r2, r1, #6
 80079ec:	4651      	mov	r1, sl
 80079ee:	ebb2 0801 	subs.w	r8, r2, r1
 80079f2:	4659      	mov	r1, fp
 80079f4:	eb63 0901 	sbc.w	r9, r3, r1
 80079f8:	f04f 0200 	mov.w	r2, #0
 80079fc:	f04f 0300 	mov.w	r3, #0
 8007a00:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8007a04:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8007a08:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8007a0c:	4690      	mov	r8, r2
 8007a0e:	4699      	mov	r9, r3
 8007a10:	4623      	mov	r3, r4
 8007a12:	eb18 0303 	adds.w	r3, r8, r3
 8007a16:	613b      	str	r3, [r7, #16]
 8007a18:	462b      	mov	r3, r5
 8007a1a:	eb49 0303 	adc.w	r3, r9, r3
 8007a1e:	617b      	str	r3, [r7, #20]
 8007a20:	f04f 0200 	mov.w	r2, #0
 8007a24:	f04f 0300 	mov.w	r3, #0
 8007a28:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 8007a2c:	4629      	mov	r1, r5
 8007a2e:	024b      	lsls	r3, r1, #9
 8007a30:	4621      	mov	r1, r4
 8007a32:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8007a36:	4621      	mov	r1, r4
 8007a38:	024a      	lsls	r2, r1, #9
 8007a3a:	4610      	mov	r0, r2
 8007a3c:	4619      	mov	r1, r3
 8007a3e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8007a42:	2200      	movs	r2, #0
 8007a44:	65bb      	str	r3, [r7, #88]	; 0x58
 8007a46:	65fa      	str	r2, [r7, #92]	; 0x5c
 8007a48:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8007a4c:	f7f9 f846 	bl	8000adc <__aeabi_uldivmod>
 8007a50:	4602      	mov	r2, r0
 8007a52:	460b      	mov	r3, r1
 8007a54:	4613      	mov	r3, r2
 8007a56:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8007a5a:	e065      	b.n	8007b28 <HAL_RCC_GetSysClockFreq+0x420>
 8007a5c:	40023800 	.word	0x40023800
 8007a60:	00f42400 	.word	0x00f42400
 8007a64:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8007a68:	4b3d      	ldr	r3, [pc, #244]	; (8007b60 <HAL_RCC_GetSysClockFreq+0x458>)
 8007a6a:	685b      	ldr	r3, [r3, #4]
 8007a6c:	099b      	lsrs	r3, r3, #6
 8007a6e:	2200      	movs	r2, #0
 8007a70:	4618      	mov	r0, r3
 8007a72:	4611      	mov	r1, r2
 8007a74:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8007a78:	653b      	str	r3, [r7, #80]	; 0x50
 8007a7a:	2300      	movs	r3, #0
 8007a7c:	657b      	str	r3, [r7, #84]	; 0x54
 8007a7e:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	; 0x50
 8007a82:	4642      	mov	r2, r8
 8007a84:	464b      	mov	r3, r9
 8007a86:	f04f 0000 	mov.w	r0, #0
 8007a8a:	f04f 0100 	mov.w	r1, #0
 8007a8e:	0159      	lsls	r1, r3, #5
 8007a90:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8007a94:	0150      	lsls	r0, r2, #5
 8007a96:	4602      	mov	r2, r0
 8007a98:	460b      	mov	r3, r1
 8007a9a:	4641      	mov	r1, r8
 8007a9c:	1a51      	subs	r1, r2, r1
 8007a9e:	60b9      	str	r1, [r7, #8]
 8007aa0:	4649      	mov	r1, r9
 8007aa2:	eb63 0301 	sbc.w	r3, r3, r1
 8007aa6:	60fb      	str	r3, [r7, #12]
 8007aa8:	f04f 0200 	mov.w	r2, #0
 8007aac:	f04f 0300 	mov.w	r3, #0
 8007ab0:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 8007ab4:	4659      	mov	r1, fp
 8007ab6:	018b      	lsls	r3, r1, #6
 8007ab8:	4651      	mov	r1, sl
 8007aba:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8007abe:	4651      	mov	r1, sl
 8007ac0:	018a      	lsls	r2, r1, #6
 8007ac2:	4651      	mov	r1, sl
 8007ac4:	1a54      	subs	r4, r2, r1
 8007ac6:	4659      	mov	r1, fp
 8007ac8:	eb63 0501 	sbc.w	r5, r3, r1
 8007acc:	f04f 0200 	mov.w	r2, #0
 8007ad0:	f04f 0300 	mov.w	r3, #0
 8007ad4:	00eb      	lsls	r3, r5, #3
 8007ad6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8007ada:	00e2      	lsls	r2, r4, #3
 8007adc:	4614      	mov	r4, r2
 8007ade:	461d      	mov	r5, r3
 8007ae0:	4643      	mov	r3, r8
 8007ae2:	18e3      	adds	r3, r4, r3
 8007ae4:	603b      	str	r3, [r7, #0]
 8007ae6:	464b      	mov	r3, r9
 8007ae8:	eb45 0303 	adc.w	r3, r5, r3
 8007aec:	607b      	str	r3, [r7, #4]
 8007aee:	f04f 0200 	mov.w	r2, #0
 8007af2:	f04f 0300 	mov.w	r3, #0
 8007af6:	e9d7 4500 	ldrd	r4, r5, [r7]
 8007afa:	4629      	mov	r1, r5
 8007afc:	028b      	lsls	r3, r1, #10
 8007afe:	4621      	mov	r1, r4
 8007b00:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8007b04:	4621      	mov	r1, r4
 8007b06:	028a      	lsls	r2, r1, #10
 8007b08:	4610      	mov	r0, r2
 8007b0a:	4619      	mov	r1, r3
 8007b0c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8007b10:	2200      	movs	r2, #0
 8007b12:	64bb      	str	r3, [r7, #72]	; 0x48
 8007b14:	64fa      	str	r2, [r7, #76]	; 0x4c
 8007b16:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8007b1a:	f7f8 ffdf 	bl	8000adc <__aeabi_uldivmod>
 8007b1e:	4602      	mov	r2, r0
 8007b20:	460b      	mov	r3, r1
 8007b22:	4613      	mov	r3, r2
 8007b24:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8007b28:	4b0d      	ldr	r3, [pc, #52]	; (8007b60 <HAL_RCC_GetSysClockFreq+0x458>)
 8007b2a:	685b      	ldr	r3, [r3, #4]
 8007b2c:	0f1b      	lsrs	r3, r3, #28
 8007b2e:	f003 0307 	and.w	r3, r3, #7
 8007b32:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4

      sysclockfreq = pllvco/pllr;
 8007b36:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8007b3a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8007b3e:	fbb2 f3f3 	udiv	r3, r2, r3
 8007b42:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8007b46:	e003      	b.n	8007b50 <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8007b48:	4b06      	ldr	r3, [pc, #24]	; (8007b64 <HAL_RCC_GetSysClockFreq+0x45c>)
 8007b4a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8007b4e:	bf00      	nop
    }
  }
  return sysclockfreq;
 8007b50:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
}
 8007b54:	4618      	mov	r0, r3
 8007b56:	37b8      	adds	r7, #184	; 0xb8
 8007b58:	46bd      	mov	sp, r7
 8007b5a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8007b5e:	bf00      	nop
 8007b60:	40023800 	.word	0x40023800
 8007b64:	00f42400 	.word	0x00f42400

08007b68 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8007b68:	b580      	push	{r7, lr}
 8007b6a:	b086      	sub	sp, #24
 8007b6c:	af00      	add	r7, sp, #0
 8007b6e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8007b70:	687b      	ldr	r3, [r7, #4]
 8007b72:	2b00      	cmp	r3, #0
 8007b74:	d101      	bne.n	8007b7a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8007b76:	2301      	movs	r3, #1
 8007b78:	e28d      	b.n	8008096 <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8007b7a:	687b      	ldr	r3, [r7, #4]
 8007b7c:	681b      	ldr	r3, [r3, #0]
 8007b7e:	f003 0301 	and.w	r3, r3, #1
 8007b82:	2b00      	cmp	r3, #0
 8007b84:	f000 8083 	beq.w	8007c8e <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8007b88:	4b94      	ldr	r3, [pc, #592]	; (8007ddc <HAL_RCC_OscConfig+0x274>)
 8007b8a:	689b      	ldr	r3, [r3, #8]
 8007b8c:	f003 030c 	and.w	r3, r3, #12
 8007b90:	2b04      	cmp	r3, #4
 8007b92:	d019      	beq.n	8007bc8 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8007b94:	4b91      	ldr	r3, [pc, #580]	; (8007ddc <HAL_RCC_OscConfig+0x274>)
 8007b96:	689b      	ldr	r3, [r3, #8]
 8007b98:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8007b9c:	2b08      	cmp	r3, #8
 8007b9e:	d106      	bne.n	8007bae <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8007ba0:	4b8e      	ldr	r3, [pc, #568]	; (8007ddc <HAL_RCC_OscConfig+0x274>)
 8007ba2:	685b      	ldr	r3, [r3, #4]
 8007ba4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007ba8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8007bac:	d00c      	beq.n	8007bc8 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8007bae:	4b8b      	ldr	r3, [pc, #556]	; (8007ddc <HAL_RCC_OscConfig+0x274>)
 8007bb0:	689b      	ldr	r3, [r3, #8]
 8007bb2:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8007bb6:	2b0c      	cmp	r3, #12
 8007bb8:	d112      	bne.n	8007be0 <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8007bba:	4b88      	ldr	r3, [pc, #544]	; (8007ddc <HAL_RCC_OscConfig+0x274>)
 8007bbc:	685b      	ldr	r3, [r3, #4]
 8007bbe:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007bc2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8007bc6:	d10b      	bne.n	8007be0 <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007bc8:	4b84      	ldr	r3, [pc, #528]	; (8007ddc <HAL_RCC_OscConfig+0x274>)
 8007bca:	681b      	ldr	r3, [r3, #0]
 8007bcc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007bd0:	2b00      	cmp	r3, #0
 8007bd2:	d05b      	beq.n	8007c8c <HAL_RCC_OscConfig+0x124>
 8007bd4:	687b      	ldr	r3, [r7, #4]
 8007bd6:	685b      	ldr	r3, [r3, #4]
 8007bd8:	2b00      	cmp	r3, #0
 8007bda:	d157      	bne.n	8007c8c <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8007bdc:	2301      	movs	r3, #1
 8007bde:	e25a      	b.n	8008096 <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8007be0:	687b      	ldr	r3, [r7, #4]
 8007be2:	685b      	ldr	r3, [r3, #4]
 8007be4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007be8:	d106      	bne.n	8007bf8 <HAL_RCC_OscConfig+0x90>
 8007bea:	4b7c      	ldr	r3, [pc, #496]	; (8007ddc <HAL_RCC_OscConfig+0x274>)
 8007bec:	681b      	ldr	r3, [r3, #0]
 8007bee:	4a7b      	ldr	r2, [pc, #492]	; (8007ddc <HAL_RCC_OscConfig+0x274>)
 8007bf0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007bf4:	6013      	str	r3, [r2, #0]
 8007bf6:	e01d      	b.n	8007c34 <HAL_RCC_OscConfig+0xcc>
 8007bf8:	687b      	ldr	r3, [r7, #4]
 8007bfa:	685b      	ldr	r3, [r3, #4]
 8007bfc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8007c00:	d10c      	bne.n	8007c1c <HAL_RCC_OscConfig+0xb4>
 8007c02:	4b76      	ldr	r3, [pc, #472]	; (8007ddc <HAL_RCC_OscConfig+0x274>)
 8007c04:	681b      	ldr	r3, [r3, #0]
 8007c06:	4a75      	ldr	r2, [pc, #468]	; (8007ddc <HAL_RCC_OscConfig+0x274>)
 8007c08:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8007c0c:	6013      	str	r3, [r2, #0]
 8007c0e:	4b73      	ldr	r3, [pc, #460]	; (8007ddc <HAL_RCC_OscConfig+0x274>)
 8007c10:	681b      	ldr	r3, [r3, #0]
 8007c12:	4a72      	ldr	r2, [pc, #456]	; (8007ddc <HAL_RCC_OscConfig+0x274>)
 8007c14:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007c18:	6013      	str	r3, [r2, #0]
 8007c1a:	e00b      	b.n	8007c34 <HAL_RCC_OscConfig+0xcc>
 8007c1c:	4b6f      	ldr	r3, [pc, #444]	; (8007ddc <HAL_RCC_OscConfig+0x274>)
 8007c1e:	681b      	ldr	r3, [r3, #0]
 8007c20:	4a6e      	ldr	r2, [pc, #440]	; (8007ddc <HAL_RCC_OscConfig+0x274>)
 8007c22:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007c26:	6013      	str	r3, [r2, #0]
 8007c28:	4b6c      	ldr	r3, [pc, #432]	; (8007ddc <HAL_RCC_OscConfig+0x274>)
 8007c2a:	681b      	ldr	r3, [r3, #0]
 8007c2c:	4a6b      	ldr	r2, [pc, #428]	; (8007ddc <HAL_RCC_OscConfig+0x274>)
 8007c2e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8007c32:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8007c34:	687b      	ldr	r3, [r7, #4]
 8007c36:	685b      	ldr	r3, [r3, #4]
 8007c38:	2b00      	cmp	r3, #0
 8007c3a:	d013      	beq.n	8007c64 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007c3c:	f7fe f802 	bl	8005c44 <HAL_GetTick>
 8007c40:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007c42:	e008      	b.n	8007c56 <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8007c44:	f7fd fffe 	bl	8005c44 <HAL_GetTick>
 8007c48:	4602      	mov	r2, r0
 8007c4a:	693b      	ldr	r3, [r7, #16]
 8007c4c:	1ad3      	subs	r3, r2, r3
 8007c4e:	2b64      	cmp	r3, #100	; 0x64
 8007c50:	d901      	bls.n	8007c56 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8007c52:	2303      	movs	r3, #3
 8007c54:	e21f      	b.n	8008096 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007c56:	4b61      	ldr	r3, [pc, #388]	; (8007ddc <HAL_RCC_OscConfig+0x274>)
 8007c58:	681b      	ldr	r3, [r3, #0]
 8007c5a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007c5e:	2b00      	cmp	r3, #0
 8007c60:	d0f0      	beq.n	8007c44 <HAL_RCC_OscConfig+0xdc>
 8007c62:	e014      	b.n	8007c8e <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007c64:	f7fd ffee 	bl	8005c44 <HAL_GetTick>
 8007c68:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8007c6a:	e008      	b.n	8007c7e <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8007c6c:	f7fd ffea 	bl	8005c44 <HAL_GetTick>
 8007c70:	4602      	mov	r2, r0
 8007c72:	693b      	ldr	r3, [r7, #16]
 8007c74:	1ad3      	subs	r3, r2, r3
 8007c76:	2b64      	cmp	r3, #100	; 0x64
 8007c78:	d901      	bls.n	8007c7e <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 8007c7a:	2303      	movs	r3, #3
 8007c7c:	e20b      	b.n	8008096 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8007c7e:	4b57      	ldr	r3, [pc, #348]	; (8007ddc <HAL_RCC_OscConfig+0x274>)
 8007c80:	681b      	ldr	r3, [r3, #0]
 8007c82:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007c86:	2b00      	cmp	r3, #0
 8007c88:	d1f0      	bne.n	8007c6c <HAL_RCC_OscConfig+0x104>
 8007c8a:	e000      	b.n	8007c8e <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007c8c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8007c8e:	687b      	ldr	r3, [r7, #4]
 8007c90:	681b      	ldr	r3, [r3, #0]
 8007c92:	f003 0302 	and.w	r3, r3, #2
 8007c96:	2b00      	cmp	r3, #0
 8007c98:	d06f      	beq.n	8007d7a <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8007c9a:	4b50      	ldr	r3, [pc, #320]	; (8007ddc <HAL_RCC_OscConfig+0x274>)
 8007c9c:	689b      	ldr	r3, [r3, #8]
 8007c9e:	f003 030c 	and.w	r3, r3, #12
 8007ca2:	2b00      	cmp	r3, #0
 8007ca4:	d017      	beq.n	8007cd6 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8007ca6:	4b4d      	ldr	r3, [pc, #308]	; (8007ddc <HAL_RCC_OscConfig+0x274>)
 8007ca8:	689b      	ldr	r3, [r3, #8]
 8007caa:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8007cae:	2b08      	cmp	r3, #8
 8007cb0:	d105      	bne.n	8007cbe <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8007cb2:	4b4a      	ldr	r3, [pc, #296]	; (8007ddc <HAL_RCC_OscConfig+0x274>)
 8007cb4:	685b      	ldr	r3, [r3, #4]
 8007cb6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007cba:	2b00      	cmp	r3, #0
 8007cbc:	d00b      	beq.n	8007cd6 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8007cbe:	4b47      	ldr	r3, [pc, #284]	; (8007ddc <HAL_RCC_OscConfig+0x274>)
 8007cc0:	689b      	ldr	r3, [r3, #8]
 8007cc2:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8007cc6:	2b0c      	cmp	r3, #12
 8007cc8:	d11c      	bne.n	8007d04 <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8007cca:	4b44      	ldr	r3, [pc, #272]	; (8007ddc <HAL_RCC_OscConfig+0x274>)
 8007ccc:	685b      	ldr	r3, [r3, #4]
 8007cce:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007cd2:	2b00      	cmp	r3, #0
 8007cd4:	d116      	bne.n	8007d04 <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8007cd6:	4b41      	ldr	r3, [pc, #260]	; (8007ddc <HAL_RCC_OscConfig+0x274>)
 8007cd8:	681b      	ldr	r3, [r3, #0]
 8007cda:	f003 0302 	and.w	r3, r3, #2
 8007cde:	2b00      	cmp	r3, #0
 8007ce0:	d005      	beq.n	8007cee <HAL_RCC_OscConfig+0x186>
 8007ce2:	687b      	ldr	r3, [r7, #4]
 8007ce4:	68db      	ldr	r3, [r3, #12]
 8007ce6:	2b01      	cmp	r3, #1
 8007ce8:	d001      	beq.n	8007cee <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8007cea:	2301      	movs	r3, #1
 8007cec:	e1d3      	b.n	8008096 <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007cee:	4b3b      	ldr	r3, [pc, #236]	; (8007ddc <HAL_RCC_OscConfig+0x274>)
 8007cf0:	681b      	ldr	r3, [r3, #0]
 8007cf2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8007cf6:	687b      	ldr	r3, [r7, #4]
 8007cf8:	691b      	ldr	r3, [r3, #16]
 8007cfa:	00db      	lsls	r3, r3, #3
 8007cfc:	4937      	ldr	r1, [pc, #220]	; (8007ddc <HAL_RCC_OscConfig+0x274>)
 8007cfe:	4313      	orrs	r3, r2
 8007d00:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8007d02:	e03a      	b.n	8007d7a <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8007d04:	687b      	ldr	r3, [r7, #4]
 8007d06:	68db      	ldr	r3, [r3, #12]
 8007d08:	2b00      	cmp	r3, #0
 8007d0a:	d020      	beq.n	8007d4e <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8007d0c:	4b34      	ldr	r3, [pc, #208]	; (8007de0 <HAL_RCC_OscConfig+0x278>)
 8007d0e:	2201      	movs	r2, #1
 8007d10:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007d12:	f7fd ff97 	bl	8005c44 <HAL_GetTick>
 8007d16:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007d18:	e008      	b.n	8007d2c <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8007d1a:	f7fd ff93 	bl	8005c44 <HAL_GetTick>
 8007d1e:	4602      	mov	r2, r0
 8007d20:	693b      	ldr	r3, [r7, #16]
 8007d22:	1ad3      	subs	r3, r2, r3
 8007d24:	2b02      	cmp	r3, #2
 8007d26:	d901      	bls.n	8007d2c <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8007d28:	2303      	movs	r3, #3
 8007d2a:	e1b4      	b.n	8008096 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007d2c:	4b2b      	ldr	r3, [pc, #172]	; (8007ddc <HAL_RCC_OscConfig+0x274>)
 8007d2e:	681b      	ldr	r3, [r3, #0]
 8007d30:	f003 0302 	and.w	r3, r3, #2
 8007d34:	2b00      	cmp	r3, #0
 8007d36:	d0f0      	beq.n	8007d1a <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007d38:	4b28      	ldr	r3, [pc, #160]	; (8007ddc <HAL_RCC_OscConfig+0x274>)
 8007d3a:	681b      	ldr	r3, [r3, #0]
 8007d3c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8007d40:	687b      	ldr	r3, [r7, #4]
 8007d42:	691b      	ldr	r3, [r3, #16]
 8007d44:	00db      	lsls	r3, r3, #3
 8007d46:	4925      	ldr	r1, [pc, #148]	; (8007ddc <HAL_RCC_OscConfig+0x274>)
 8007d48:	4313      	orrs	r3, r2
 8007d4a:	600b      	str	r3, [r1, #0]
 8007d4c:	e015      	b.n	8007d7a <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8007d4e:	4b24      	ldr	r3, [pc, #144]	; (8007de0 <HAL_RCC_OscConfig+0x278>)
 8007d50:	2200      	movs	r2, #0
 8007d52:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007d54:	f7fd ff76 	bl	8005c44 <HAL_GetTick>
 8007d58:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8007d5a:	e008      	b.n	8007d6e <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8007d5c:	f7fd ff72 	bl	8005c44 <HAL_GetTick>
 8007d60:	4602      	mov	r2, r0
 8007d62:	693b      	ldr	r3, [r7, #16]
 8007d64:	1ad3      	subs	r3, r2, r3
 8007d66:	2b02      	cmp	r3, #2
 8007d68:	d901      	bls.n	8007d6e <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8007d6a:	2303      	movs	r3, #3
 8007d6c:	e193      	b.n	8008096 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8007d6e:	4b1b      	ldr	r3, [pc, #108]	; (8007ddc <HAL_RCC_OscConfig+0x274>)
 8007d70:	681b      	ldr	r3, [r3, #0]
 8007d72:	f003 0302 	and.w	r3, r3, #2
 8007d76:	2b00      	cmp	r3, #0
 8007d78:	d1f0      	bne.n	8007d5c <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8007d7a:	687b      	ldr	r3, [r7, #4]
 8007d7c:	681b      	ldr	r3, [r3, #0]
 8007d7e:	f003 0308 	and.w	r3, r3, #8
 8007d82:	2b00      	cmp	r3, #0
 8007d84:	d036      	beq.n	8007df4 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8007d86:	687b      	ldr	r3, [r7, #4]
 8007d88:	695b      	ldr	r3, [r3, #20]
 8007d8a:	2b00      	cmp	r3, #0
 8007d8c:	d016      	beq.n	8007dbc <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8007d8e:	4b15      	ldr	r3, [pc, #84]	; (8007de4 <HAL_RCC_OscConfig+0x27c>)
 8007d90:	2201      	movs	r2, #1
 8007d92:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007d94:	f7fd ff56 	bl	8005c44 <HAL_GetTick>
 8007d98:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8007d9a:	e008      	b.n	8007dae <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8007d9c:	f7fd ff52 	bl	8005c44 <HAL_GetTick>
 8007da0:	4602      	mov	r2, r0
 8007da2:	693b      	ldr	r3, [r7, #16]
 8007da4:	1ad3      	subs	r3, r2, r3
 8007da6:	2b02      	cmp	r3, #2
 8007da8:	d901      	bls.n	8007dae <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 8007daa:	2303      	movs	r3, #3
 8007dac:	e173      	b.n	8008096 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8007dae:	4b0b      	ldr	r3, [pc, #44]	; (8007ddc <HAL_RCC_OscConfig+0x274>)
 8007db0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007db2:	f003 0302 	and.w	r3, r3, #2
 8007db6:	2b00      	cmp	r3, #0
 8007db8:	d0f0      	beq.n	8007d9c <HAL_RCC_OscConfig+0x234>
 8007dba:	e01b      	b.n	8007df4 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8007dbc:	4b09      	ldr	r3, [pc, #36]	; (8007de4 <HAL_RCC_OscConfig+0x27c>)
 8007dbe:	2200      	movs	r2, #0
 8007dc0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007dc2:	f7fd ff3f 	bl	8005c44 <HAL_GetTick>
 8007dc6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8007dc8:	e00e      	b.n	8007de8 <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8007dca:	f7fd ff3b 	bl	8005c44 <HAL_GetTick>
 8007dce:	4602      	mov	r2, r0
 8007dd0:	693b      	ldr	r3, [r7, #16]
 8007dd2:	1ad3      	subs	r3, r2, r3
 8007dd4:	2b02      	cmp	r3, #2
 8007dd6:	d907      	bls.n	8007de8 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8007dd8:	2303      	movs	r3, #3
 8007dda:	e15c      	b.n	8008096 <HAL_RCC_OscConfig+0x52e>
 8007ddc:	40023800 	.word	0x40023800
 8007de0:	42470000 	.word	0x42470000
 8007de4:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8007de8:	4b8a      	ldr	r3, [pc, #552]	; (8008014 <HAL_RCC_OscConfig+0x4ac>)
 8007dea:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007dec:	f003 0302 	and.w	r3, r3, #2
 8007df0:	2b00      	cmp	r3, #0
 8007df2:	d1ea      	bne.n	8007dca <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8007df4:	687b      	ldr	r3, [r7, #4]
 8007df6:	681b      	ldr	r3, [r3, #0]
 8007df8:	f003 0304 	and.w	r3, r3, #4
 8007dfc:	2b00      	cmp	r3, #0
 8007dfe:	f000 8097 	beq.w	8007f30 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8007e02:	2300      	movs	r3, #0
 8007e04:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8007e06:	4b83      	ldr	r3, [pc, #524]	; (8008014 <HAL_RCC_OscConfig+0x4ac>)
 8007e08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007e0a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007e0e:	2b00      	cmp	r3, #0
 8007e10:	d10f      	bne.n	8007e32 <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8007e12:	2300      	movs	r3, #0
 8007e14:	60bb      	str	r3, [r7, #8]
 8007e16:	4b7f      	ldr	r3, [pc, #508]	; (8008014 <HAL_RCC_OscConfig+0x4ac>)
 8007e18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007e1a:	4a7e      	ldr	r2, [pc, #504]	; (8008014 <HAL_RCC_OscConfig+0x4ac>)
 8007e1c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007e20:	6413      	str	r3, [r2, #64]	; 0x40
 8007e22:	4b7c      	ldr	r3, [pc, #496]	; (8008014 <HAL_RCC_OscConfig+0x4ac>)
 8007e24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007e26:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007e2a:	60bb      	str	r3, [r7, #8]
 8007e2c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8007e2e:	2301      	movs	r3, #1
 8007e30:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007e32:	4b79      	ldr	r3, [pc, #484]	; (8008018 <HAL_RCC_OscConfig+0x4b0>)
 8007e34:	681b      	ldr	r3, [r3, #0]
 8007e36:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007e3a:	2b00      	cmp	r3, #0
 8007e3c:	d118      	bne.n	8007e70 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8007e3e:	4b76      	ldr	r3, [pc, #472]	; (8008018 <HAL_RCC_OscConfig+0x4b0>)
 8007e40:	681b      	ldr	r3, [r3, #0]
 8007e42:	4a75      	ldr	r2, [pc, #468]	; (8008018 <HAL_RCC_OscConfig+0x4b0>)
 8007e44:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007e48:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8007e4a:	f7fd fefb 	bl	8005c44 <HAL_GetTick>
 8007e4e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007e50:	e008      	b.n	8007e64 <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007e52:	f7fd fef7 	bl	8005c44 <HAL_GetTick>
 8007e56:	4602      	mov	r2, r0
 8007e58:	693b      	ldr	r3, [r7, #16]
 8007e5a:	1ad3      	subs	r3, r2, r3
 8007e5c:	2b02      	cmp	r3, #2
 8007e5e:	d901      	bls.n	8007e64 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8007e60:	2303      	movs	r3, #3
 8007e62:	e118      	b.n	8008096 <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007e64:	4b6c      	ldr	r3, [pc, #432]	; (8008018 <HAL_RCC_OscConfig+0x4b0>)
 8007e66:	681b      	ldr	r3, [r3, #0]
 8007e68:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007e6c:	2b00      	cmp	r3, #0
 8007e6e:	d0f0      	beq.n	8007e52 <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8007e70:	687b      	ldr	r3, [r7, #4]
 8007e72:	689b      	ldr	r3, [r3, #8]
 8007e74:	2b01      	cmp	r3, #1
 8007e76:	d106      	bne.n	8007e86 <HAL_RCC_OscConfig+0x31e>
 8007e78:	4b66      	ldr	r3, [pc, #408]	; (8008014 <HAL_RCC_OscConfig+0x4ac>)
 8007e7a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007e7c:	4a65      	ldr	r2, [pc, #404]	; (8008014 <HAL_RCC_OscConfig+0x4ac>)
 8007e7e:	f043 0301 	orr.w	r3, r3, #1
 8007e82:	6713      	str	r3, [r2, #112]	; 0x70
 8007e84:	e01c      	b.n	8007ec0 <HAL_RCC_OscConfig+0x358>
 8007e86:	687b      	ldr	r3, [r7, #4]
 8007e88:	689b      	ldr	r3, [r3, #8]
 8007e8a:	2b05      	cmp	r3, #5
 8007e8c:	d10c      	bne.n	8007ea8 <HAL_RCC_OscConfig+0x340>
 8007e8e:	4b61      	ldr	r3, [pc, #388]	; (8008014 <HAL_RCC_OscConfig+0x4ac>)
 8007e90:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007e92:	4a60      	ldr	r2, [pc, #384]	; (8008014 <HAL_RCC_OscConfig+0x4ac>)
 8007e94:	f043 0304 	orr.w	r3, r3, #4
 8007e98:	6713      	str	r3, [r2, #112]	; 0x70
 8007e9a:	4b5e      	ldr	r3, [pc, #376]	; (8008014 <HAL_RCC_OscConfig+0x4ac>)
 8007e9c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007e9e:	4a5d      	ldr	r2, [pc, #372]	; (8008014 <HAL_RCC_OscConfig+0x4ac>)
 8007ea0:	f043 0301 	orr.w	r3, r3, #1
 8007ea4:	6713      	str	r3, [r2, #112]	; 0x70
 8007ea6:	e00b      	b.n	8007ec0 <HAL_RCC_OscConfig+0x358>
 8007ea8:	4b5a      	ldr	r3, [pc, #360]	; (8008014 <HAL_RCC_OscConfig+0x4ac>)
 8007eaa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007eac:	4a59      	ldr	r2, [pc, #356]	; (8008014 <HAL_RCC_OscConfig+0x4ac>)
 8007eae:	f023 0301 	bic.w	r3, r3, #1
 8007eb2:	6713      	str	r3, [r2, #112]	; 0x70
 8007eb4:	4b57      	ldr	r3, [pc, #348]	; (8008014 <HAL_RCC_OscConfig+0x4ac>)
 8007eb6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007eb8:	4a56      	ldr	r2, [pc, #344]	; (8008014 <HAL_RCC_OscConfig+0x4ac>)
 8007eba:	f023 0304 	bic.w	r3, r3, #4
 8007ebe:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8007ec0:	687b      	ldr	r3, [r7, #4]
 8007ec2:	689b      	ldr	r3, [r3, #8]
 8007ec4:	2b00      	cmp	r3, #0
 8007ec6:	d015      	beq.n	8007ef4 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007ec8:	f7fd febc 	bl	8005c44 <HAL_GetTick>
 8007ecc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007ece:	e00a      	b.n	8007ee6 <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8007ed0:	f7fd feb8 	bl	8005c44 <HAL_GetTick>
 8007ed4:	4602      	mov	r2, r0
 8007ed6:	693b      	ldr	r3, [r7, #16]
 8007ed8:	1ad3      	subs	r3, r2, r3
 8007eda:	f241 3288 	movw	r2, #5000	; 0x1388
 8007ede:	4293      	cmp	r3, r2
 8007ee0:	d901      	bls.n	8007ee6 <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8007ee2:	2303      	movs	r3, #3
 8007ee4:	e0d7      	b.n	8008096 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007ee6:	4b4b      	ldr	r3, [pc, #300]	; (8008014 <HAL_RCC_OscConfig+0x4ac>)
 8007ee8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007eea:	f003 0302 	and.w	r3, r3, #2
 8007eee:	2b00      	cmp	r3, #0
 8007ef0:	d0ee      	beq.n	8007ed0 <HAL_RCC_OscConfig+0x368>
 8007ef2:	e014      	b.n	8007f1e <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007ef4:	f7fd fea6 	bl	8005c44 <HAL_GetTick>
 8007ef8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8007efa:	e00a      	b.n	8007f12 <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8007efc:	f7fd fea2 	bl	8005c44 <HAL_GetTick>
 8007f00:	4602      	mov	r2, r0
 8007f02:	693b      	ldr	r3, [r7, #16]
 8007f04:	1ad3      	subs	r3, r2, r3
 8007f06:	f241 3288 	movw	r2, #5000	; 0x1388
 8007f0a:	4293      	cmp	r3, r2
 8007f0c:	d901      	bls.n	8007f12 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8007f0e:	2303      	movs	r3, #3
 8007f10:	e0c1      	b.n	8008096 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8007f12:	4b40      	ldr	r3, [pc, #256]	; (8008014 <HAL_RCC_OscConfig+0x4ac>)
 8007f14:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007f16:	f003 0302 	and.w	r3, r3, #2
 8007f1a:	2b00      	cmp	r3, #0
 8007f1c:	d1ee      	bne.n	8007efc <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8007f1e:	7dfb      	ldrb	r3, [r7, #23]
 8007f20:	2b01      	cmp	r3, #1
 8007f22:	d105      	bne.n	8007f30 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8007f24:	4b3b      	ldr	r3, [pc, #236]	; (8008014 <HAL_RCC_OscConfig+0x4ac>)
 8007f26:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007f28:	4a3a      	ldr	r2, [pc, #232]	; (8008014 <HAL_RCC_OscConfig+0x4ac>)
 8007f2a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007f2e:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8007f30:	687b      	ldr	r3, [r7, #4]
 8007f32:	699b      	ldr	r3, [r3, #24]
 8007f34:	2b00      	cmp	r3, #0
 8007f36:	f000 80ad 	beq.w	8008094 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8007f3a:	4b36      	ldr	r3, [pc, #216]	; (8008014 <HAL_RCC_OscConfig+0x4ac>)
 8007f3c:	689b      	ldr	r3, [r3, #8]
 8007f3e:	f003 030c 	and.w	r3, r3, #12
 8007f42:	2b08      	cmp	r3, #8
 8007f44:	d060      	beq.n	8008008 <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8007f46:	687b      	ldr	r3, [r7, #4]
 8007f48:	699b      	ldr	r3, [r3, #24]
 8007f4a:	2b02      	cmp	r3, #2
 8007f4c:	d145      	bne.n	8007fda <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007f4e:	4b33      	ldr	r3, [pc, #204]	; (800801c <HAL_RCC_OscConfig+0x4b4>)
 8007f50:	2200      	movs	r2, #0
 8007f52:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007f54:	f7fd fe76 	bl	8005c44 <HAL_GetTick>
 8007f58:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007f5a:	e008      	b.n	8007f6e <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8007f5c:	f7fd fe72 	bl	8005c44 <HAL_GetTick>
 8007f60:	4602      	mov	r2, r0
 8007f62:	693b      	ldr	r3, [r7, #16]
 8007f64:	1ad3      	subs	r3, r2, r3
 8007f66:	2b02      	cmp	r3, #2
 8007f68:	d901      	bls.n	8007f6e <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 8007f6a:	2303      	movs	r3, #3
 8007f6c:	e093      	b.n	8008096 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007f6e:	4b29      	ldr	r3, [pc, #164]	; (8008014 <HAL_RCC_OscConfig+0x4ac>)
 8007f70:	681b      	ldr	r3, [r3, #0]
 8007f72:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007f76:	2b00      	cmp	r3, #0
 8007f78:	d1f0      	bne.n	8007f5c <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8007f7a:	687b      	ldr	r3, [r7, #4]
 8007f7c:	69da      	ldr	r2, [r3, #28]
 8007f7e:	687b      	ldr	r3, [r7, #4]
 8007f80:	6a1b      	ldr	r3, [r3, #32]
 8007f82:	431a      	orrs	r2, r3
 8007f84:	687b      	ldr	r3, [r7, #4]
 8007f86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007f88:	019b      	lsls	r3, r3, #6
 8007f8a:	431a      	orrs	r2, r3
 8007f8c:	687b      	ldr	r3, [r7, #4]
 8007f8e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007f90:	085b      	lsrs	r3, r3, #1
 8007f92:	3b01      	subs	r3, #1
 8007f94:	041b      	lsls	r3, r3, #16
 8007f96:	431a      	orrs	r2, r3
 8007f98:	687b      	ldr	r3, [r7, #4]
 8007f9a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007f9c:	061b      	lsls	r3, r3, #24
 8007f9e:	431a      	orrs	r2, r3
 8007fa0:	687b      	ldr	r3, [r7, #4]
 8007fa2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007fa4:	071b      	lsls	r3, r3, #28
 8007fa6:	491b      	ldr	r1, [pc, #108]	; (8008014 <HAL_RCC_OscConfig+0x4ac>)
 8007fa8:	4313      	orrs	r3, r2
 8007faa:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8007fac:	4b1b      	ldr	r3, [pc, #108]	; (800801c <HAL_RCC_OscConfig+0x4b4>)
 8007fae:	2201      	movs	r2, #1
 8007fb0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007fb2:	f7fd fe47 	bl	8005c44 <HAL_GetTick>
 8007fb6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007fb8:	e008      	b.n	8007fcc <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8007fba:	f7fd fe43 	bl	8005c44 <HAL_GetTick>
 8007fbe:	4602      	mov	r2, r0
 8007fc0:	693b      	ldr	r3, [r7, #16]
 8007fc2:	1ad3      	subs	r3, r2, r3
 8007fc4:	2b02      	cmp	r3, #2
 8007fc6:	d901      	bls.n	8007fcc <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8007fc8:	2303      	movs	r3, #3
 8007fca:	e064      	b.n	8008096 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007fcc:	4b11      	ldr	r3, [pc, #68]	; (8008014 <HAL_RCC_OscConfig+0x4ac>)
 8007fce:	681b      	ldr	r3, [r3, #0]
 8007fd0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007fd4:	2b00      	cmp	r3, #0
 8007fd6:	d0f0      	beq.n	8007fba <HAL_RCC_OscConfig+0x452>
 8007fd8:	e05c      	b.n	8008094 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007fda:	4b10      	ldr	r3, [pc, #64]	; (800801c <HAL_RCC_OscConfig+0x4b4>)
 8007fdc:	2200      	movs	r2, #0
 8007fde:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007fe0:	f7fd fe30 	bl	8005c44 <HAL_GetTick>
 8007fe4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007fe6:	e008      	b.n	8007ffa <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8007fe8:	f7fd fe2c 	bl	8005c44 <HAL_GetTick>
 8007fec:	4602      	mov	r2, r0
 8007fee:	693b      	ldr	r3, [r7, #16]
 8007ff0:	1ad3      	subs	r3, r2, r3
 8007ff2:	2b02      	cmp	r3, #2
 8007ff4:	d901      	bls.n	8007ffa <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 8007ff6:	2303      	movs	r3, #3
 8007ff8:	e04d      	b.n	8008096 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007ffa:	4b06      	ldr	r3, [pc, #24]	; (8008014 <HAL_RCC_OscConfig+0x4ac>)
 8007ffc:	681b      	ldr	r3, [r3, #0]
 8007ffe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008002:	2b00      	cmp	r3, #0
 8008004:	d1f0      	bne.n	8007fe8 <HAL_RCC_OscConfig+0x480>
 8008006:	e045      	b.n	8008094 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8008008:	687b      	ldr	r3, [r7, #4]
 800800a:	699b      	ldr	r3, [r3, #24]
 800800c:	2b01      	cmp	r3, #1
 800800e:	d107      	bne.n	8008020 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8008010:	2301      	movs	r3, #1
 8008012:	e040      	b.n	8008096 <HAL_RCC_OscConfig+0x52e>
 8008014:	40023800 	.word	0x40023800
 8008018:	40007000 	.word	0x40007000
 800801c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8008020:	4b1f      	ldr	r3, [pc, #124]	; (80080a0 <HAL_RCC_OscConfig+0x538>)
 8008022:	685b      	ldr	r3, [r3, #4]
 8008024:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8008026:	687b      	ldr	r3, [r7, #4]
 8008028:	699b      	ldr	r3, [r3, #24]
 800802a:	2b01      	cmp	r3, #1
 800802c:	d030      	beq.n	8008090 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800802e:	68fb      	ldr	r3, [r7, #12]
 8008030:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8008034:	687b      	ldr	r3, [r7, #4]
 8008036:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8008038:	429a      	cmp	r2, r3
 800803a:	d129      	bne.n	8008090 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800803c:	68fb      	ldr	r3, [r7, #12]
 800803e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8008042:	687b      	ldr	r3, [r7, #4]
 8008044:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8008046:	429a      	cmp	r2, r3
 8008048:	d122      	bne.n	8008090 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800804a:	68fa      	ldr	r2, [r7, #12]
 800804c:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8008050:	4013      	ands	r3, r2
 8008052:	687a      	ldr	r2, [r7, #4]
 8008054:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8008056:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8008058:	4293      	cmp	r3, r2
 800805a:	d119      	bne.n	8008090 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800805c:	68fb      	ldr	r3, [r7, #12]
 800805e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8008062:	687b      	ldr	r3, [r7, #4]
 8008064:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008066:	085b      	lsrs	r3, r3, #1
 8008068:	3b01      	subs	r3, #1
 800806a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800806c:	429a      	cmp	r2, r3
 800806e:	d10f      	bne.n	8008090 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8008070:	68fb      	ldr	r3, [r7, #12]
 8008072:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8008076:	687b      	ldr	r3, [r7, #4]
 8008078:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800807a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800807c:	429a      	cmp	r2, r3
 800807e:	d107      	bne.n	8008090 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8008080:	68fb      	ldr	r3, [r7, #12]
 8008082:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8008086:	687b      	ldr	r3, [r7, #4]
 8008088:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800808a:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 800808c:	429a      	cmp	r2, r3
 800808e:	d001      	beq.n	8008094 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 8008090:	2301      	movs	r3, #1
 8008092:	e000      	b.n	8008096 <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8008094:	2300      	movs	r3, #0
}
 8008096:	4618      	mov	r0, r3
 8008098:	3718      	adds	r7, #24
 800809a:	46bd      	mov	sp, r7
 800809c:	bd80      	pop	{r7, pc}
 800809e:	bf00      	nop
 80080a0:	40023800 	.word	0x40023800

080080a4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80080a4:	b580      	push	{r7, lr}
 80080a6:	b082      	sub	sp, #8
 80080a8:	af00      	add	r7, sp, #0
 80080aa:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80080ac:	687b      	ldr	r3, [r7, #4]
 80080ae:	2b00      	cmp	r3, #0
 80080b0:	d101      	bne.n	80080b6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80080b2:	2301      	movs	r3, #1
 80080b4:	e041      	b.n	800813a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80080b6:	687b      	ldr	r3, [r7, #4]
 80080b8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80080bc:	b2db      	uxtb	r3, r3
 80080be:	2b00      	cmp	r3, #0
 80080c0:	d106      	bne.n	80080d0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80080c2:	687b      	ldr	r3, [r7, #4]
 80080c4:	2200      	movs	r2, #0
 80080c6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80080ca:	6878      	ldr	r0, [r7, #4]
 80080cc:	f7f9 fd0c 	bl	8001ae8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80080d0:	687b      	ldr	r3, [r7, #4]
 80080d2:	2202      	movs	r2, #2
 80080d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80080d8:	687b      	ldr	r3, [r7, #4]
 80080da:	681a      	ldr	r2, [r3, #0]
 80080dc:	687b      	ldr	r3, [r7, #4]
 80080de:	3304      	adds	r3, #4
 80080e0:	4619      	mov	r1, r3
 80080e2:	4610      	mov	r0, r2
 80080e4:	f000 fc68 	bl	80089b8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80080e8:	687b      	ldr	r3, [r7, #4]
 80080ea:	2201      	movs	r2, #1
 80080ec:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80080f0:	687b      	ldr	r3, [r7, #4]
 80080f2:	2201      	movs	r2, #1
 80080f4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80080f8:	687b      	ldr	r3, [r7, #4]
 80080fa:	2201      	movs	r2, #1
 80080fc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8008100:	687b      	ldr	r3, [r7, #4]
 8008102:	2201      	movs	r2, #1
 8008104:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8008108:	687b      	ldr	r3, [r7, #4]
 800810a:	2201      	movs	r2, #1
 800810c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008110:	687b      	ldr	r3, [r7, #4]
 8008112:	2201      	movs	r2, #1
 8008114:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8008118:	687b      	ldr	r3, [r7, #4]
 800811a:	2201      	movs	r2, #1
 800811c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8008120:	687b      	ldr	r3, [r7, #4]
 8008122:	2201      	movs	r2, #1
 8008124:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008128:	687b      	ldr	r3, [r7, #4]
 800812a:	2201      	movs	r2, #1
 800812c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008130:	687b      	ldr	r3, [r7, #4]
 8008132:	2201      	movs	r2, #1
 8008134:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8008138:	2300      	movs	r3, #0
}
 800813a:	4618      	mov	r0, r3
 800813c:	3708      	adds	r7, #8
 800813e:	46bd      	mov	sp, r7
 8008140:	bd80      	pop	{r7, pc}
	...

08008144 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8008144:	b480      	push	{r7}
 8008146:	b085      	sub	sp, #20
 8008148:	af00      	add	r7, sp, #0
 800814a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800814c:	687b      	ldr	r3, [r7, #4]
 800814e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008152:	b2db      	uxtb	r3, r3
 8008154:	2b01      	cmp	r3, #1
 8008156:	d001      	beq.n	800815c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8008158:	2301      	movs	r3, #1
 800815a:	e04e      	b.n	80081fa <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800815c:	687b      	ldr	r3, [r7, #4]
 800815e:	2202      	movs	r2, #2
 8008160:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8008164:	687b      	ldr	r3, [r7, #4]
 8008166:	681b      	ldr	r3, [r3, #0]
 8008168:	68da      	ldr	r2, [r3, #12]
 800816a:	687b      	ldr	r3, [r7, #4]
 800816c:	681b      	ldr	r3, [r3, #0]
 800816e:	f042 0201 	orr.w	r2, r2, #1
 8008172:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008174:	687b      	ldr	r3, [r7, #4]
 8008176:	681b      	ldr	r3, [r3, #0]
 8008178:	4a23      	ldr	r2, [pc, #140]	; (8008208 <HAL_TIM_Base_Start_IT+0xc4>)
 800817a:	4293      	cmp	r3, r2
 800817c:	d022      	beq.n	80081c4 <HAL_TIM_Base_Start_IT+0x80>
 800817e:	687b      	ldr	r3, [r7, #4]
 8008180:	681b      	ldr	r3, [r3, #0]
 8008182:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008186:	d01d      	beq.n	80081c4 <HAL_TIM_Base_Start_IT+0x80>
 8008188:	687b      	ldr	r3, [r7, #4]
 800818a:	681b      	ldr	r3, [r3, #0]
 800818c:	4a1f      	ldr	r2, [pc, #124]	; (800820c <HAL_TIM_Base_Start_IT+0xc8>)
 800818e:	4293      	cmp	r3, r2
 8008190:	d018      	beq.n	80081c4 <HAL_TIM_Base_Start_IT+0x80>
 8008192:	687b      	ldr	r3, [r7, #4]
 8008194:	681b      	ldr	r3, [r3, #0]
 8008196:	4a1e      	ldr	r2, [pc, #120]	; (8008210 <HAL_TIM_Base_Start_IT+0xcc>)
 8008198:	4293      	cmp	r3, r2
 800819a:	d013      	beq.n	80081c4 <HAL_TIM_Base_Start_IT+0x80>
 800819c:	687b      	ldr	r3, [r7, #4]
 800819e:	681b      	ldr	r3, [r3, #0]
 80081a0:	4a1c      	ldr	r2, [pc, #112]	; (8008214 <HAL_TIM_Base_Start_IT+0xd0>)
 80081a2:	4293      	cmp	r3, r2
 80081a4:	d00e      	beq.n	80081c4 <HAL_TIM_Base_Start_IT+0x80>
 80081a6:	687b      	ldr	r3, [r7, #4]
 80081a8:	681b      	ldr	r3, [r3, #0]
 80081aa:	4a1b      	ldr	r2, [pc, #108]	; (8008218 <HAL_TIM_Base_Start_IT+0xd4>)
 80081ac:	4293      	cmp	r3, r2
 80081ae:	d009      	beq.n	80081c4 <HAL_TIM_Base_Start_IT+0x80>
 80081b0:	687b      	ldr	r3, [r7, #4]
 80081b2:	681b      	ldr	r3, [r3, #0]
 80081b4:	4a19      	ldr	r2, [pc, #100]	; (800821c <HAL_TIM_Base_Start_IT+0xd8>)
 80081b6:	4293      	cmp	r3, r2
 80081b8:	d004      	beq.n	80081c4 <HAL_TIM_Base_Start_IT+0x80>
 80081ba:	687b      	ldr	r3, [r7, #4]
 80081bc:	681b      	ldr	r3, [r3, #0]
 80081be:	4a18      	ldr	r2, [pc, #96]	; (8008220 <HAL_TIM_Base_Start_IT+0xdc>)
 80081c0:	4293      	cmp	r3, r2
 80081c2:	d111      	bne.n	80081e8 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80081c4:	687b      	ldr	r3, [r7, #4]
 80081c6:	681b      	ldr	r3, [r3, #0]
 80081c8:	689b      	ldr	r3, [r3, #8]
 80081ca:	f003 0307 	and.w	r3, r3, #7
 80081ce:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80081d0:	68fb      	ldr	r3, [r7, #12]
 80081d2:	2b06      	cmp	r3, #6
 80081d4:	d010      	beq.n	80081f8 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 80081d6:	687b      	ldr	r3, [r7, #4]
 80081d8:	681b      	ldr	r3, [r3, #0]
 80081da:	681a      	ldr	r2, [r3, #0]
 80081dc:	687b      	ldr	r3, [r7, #4]
 80081de:	681b      	ldr	r3, [r3, #0]
 80081e0:	f042 0201 	orr.w	r2, r2, #1
 80081e4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80081e6:	e007      	b.n	80081f8 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80081e8:	687b      	ldr	r3, [r7, #4]
 80081ea:	681b      	ldr	r3, [r3, #0]
 80081ec:	681a      	ldr	r2, [r3, #0]
 80081ee:	687b      	ldr	r3, [r7, #4]
 80081f0:	681b      	ldr	r3, [r3, #0]
 80081f2:	f042 0201 	orr.w	r2, r2, #1
 80081f6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80081f8:	2300      	movs	r3, #0
}
 80081fa:	4618      	mov	r0, r3
 80081fc:	3714      	adds	r7, #20
 80081fe:	46bd      	mov	sp, r7
 8008200:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008204:	4770      	bx	lr
 8008206:	bf00      	nop
 8008208:	40010000 	.word	0x40010000
 800820c:	40000400 	.word	0x40000400
 8008210:	40000800 	.word	0x40000800
 8008214:	40000c00 	.word	0x40000c00
 8008218:	40010400 	.word	0x40010400
 800821c:	40014000 	.word	0x40014000
 8008220:	40001800 	.word	0x40001800

08008224 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8008224:	b580      	push	{r7, lr}
 8008226:	b082      	sub	sp, #8
 8008228:	af00      	add	r7, sp, #0
 800822a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800822c:	687b      	ldr	r3, [r7, #4]
 800822e:	2b00      	cmp	r3, #0
 8008230:	d101      	bne.n	8008236 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8008232:	2301      	movs	r3, #1
 8008234:	e041      	b.n	80082ba <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8008236:	687b      	ldr	r3, [r7, #4]
 8008238:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800823c:	b2db      	uxtb	r3, r3
 800823e:	2b00      	cmp	r3, #0
 8008240:	d106      	bne.n	8008250 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8008242:	687b      	ldr	r3, [r7, #4]
 8008244:	2200      	movs	r2, #0
 8008246:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800824a:	6878      	ldr	r0, [r7, #4]
 800824c:	f7f9 fc2c 	bl	8001aa8 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008250:	687b      	ldr	r3, [r7, #4]
 8008252:	2202      	movs	r2, #2
 8008254:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8008258:	687b      	ldr	r3, [r7, #4]
 800825a:	681a      	ldr	r2, [r3, #0]
 800825c:	687b      	ldr	r3, [r7, #4]
 800825e:	3304      	adds	r3, #4
 8008260:	4619      	mov	r1, r3
 8008262:	4610      	mov	r0, r2
 8008264:	f000 fba8 	bl	80089b8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8008268:	687b      	ldr	r3, [r7, #4]
 800826a:	2201      	movs	r2, #1
 800826c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008270:	687b      	ldr	r3, [r7, #4]
 8008272:	2201      	movs	r2, #1
 8008274:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8008278:	687b      	ldr	r3, [r7, #4]
 800827a:	2201      	movs	r2, #1
 800827c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8008280:	687b      	ldr	r3, [r7, #4]
 8008282:	2201      	movs	r2, #1
 8008284:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8008288:	687b      	ldr	r3, [r7, #4]
 800828a:	2201      	movs	r2, #1
 800828c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008290:	687b      	ldr	r3, [r7, #4]
 8008292:	2201      	movs	r2, #1
 8008294:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8008298:	687b      	ldr	r3, [r7, #4]
 800829a:	2201      	movs	r2, #1
 800829c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80082a0:	687b      	ldr	r3, [r7, #4]
 80082a2:	2201      	movs	r2, #1
 80082a4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80082a8:	687b      	ldr	r3, [r7, #4]
 80082aa:	2201      	movs	r2, #1
 80082ac:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80082b0:	687b      	ldr	r3, [r7, #4]
 80082b2:	2201      	movs	r2, #1
 80082b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80082b8:	2300      	movs	r3, #0
}
 80082ba:	4618      	mov	r0, r3
 80082bc:	3708      	adds	r7, #8
 80082be:	46bd      	mov	sp, r7
 80082c0:	bd80      	pop	{r7, pc}
	...

080082c4 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80082c4:	b580      	push	{r7, lr}
 80082c6:	b084      	sub	sp, #16
 80082c8:	af00      	add	r7, sp, #0
 80082ca:	6078      	str	r0, [r7, #4]
 80082cc:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80082ce:	683b      	ldr	r3, [r7, #0]
 80082d0:	2b00      	cmp	r3, #0
 80082d2:	d109      	bne.n	80082e8 <HAL_TIM_PWM_Start+0x24>
 80082d4:	687b      	ldr	r3, [r7, #4]
 80082d6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80082da:	b2db      	uxtb	r3, r3
 80082dc:	2b01      	cmp	r3, #1
 80082de:	bf14      	ite	ne
 80082e0:	2301      	movne	r3, #1
 80082e2:	2300      	moveq	r3, #0
 80082e4:	b2db      	uxtb	r3, r3
 80082e6:	e022      	b.n	800832e <HAL_TIM_PWM_Start+0x6a>
 80082e8:	683b      	ldr	r3, [r7, #0]
 80082ea:	2b04      	cmp	r3, #4
 80082ec:	d109      	bne.n	8008302 <HAL_TIM_PWM_Start+0x3e>
 80082ee:	687b      	ldr	r3, [r7, #4]
 80082f0:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80082f4:	b2db      	uxtb	r3, r3
 80082f6:	2b01      	cmp	r3, #1
 80082f8:	bf14      	ite	ne
 80082fa:	2301      	movne	r3, #1
 80082fc:	2300      	moveq	r3, #0
 80082fe:	b2db      	uxtb	r3, r3
 8008300:	e015      	b.n	800832e <HAL_TIM_PWM_Start+0x6a>
 8008302:	683b      	ldr	r3, [r7, #0]
 8008304:	2b08      	cmp	r3, #8
 8008306:	d109      	bne.n	800831c <HAL_TIM_PWM_Start+0x58>
 8008308:	687b      	ldr	r3, [r7, #4]
 800830a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800830e:	b2db      	uxtb	r3, r3
 8008310:	2b01      	cmp	r3, #1
 8008312:	bf14      	ite	ne
 8008314:	2301      	movne	r3, #1
 8008316:	2300      	moveq	r3, #0
 8008318:	b2db      	uxtb	r3, r3
 800831a:	e008      	b.n	800832e <HAL_TIM_PWM_Start+0x6a>
 800831c:	687b      	ldr	r3, [r7, #4]
 800831e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8008322:	b2db      	uxtb	r3, r3
 8008324:	2b01      	cmp	r3, #1
 8008326:	bf14      	ite	ne
 8008328:	2301      	movne	r3, #1
 800832a:	2300      	moveq	r3, #0
 800832c:	b2db      	uxtb	r3, r3
 800832e:	2b00      	cmp	r3, #0
 8008330:	d001      	beq.n	8008336 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8008332:	2301      	movs	r3, #1
 8008334:	e07c      	b.n	8008430 <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8008336:	683b      	ldr	r3, [r7, #0]
 8008338:	2b00      	cmp	r3, #0
 800833a:	d104      	bne.n	8008346 <HAL_TIM_PWM_Start+0x82>
 800833c:	687b      	ldr	r3, [r7, #4]
 800833e:	2202      	movs	r2, #2
 8008340:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8008344:	e013      	b.n	800836e <HAL_TIM_PWM_Start+0xaa>
 8008346:	683b      	ldr	r3, [r7, #0]
 8008348:	2b04      	cmp	r3, #4
 800834a:	d104      	bne.n	8008356 <HAL_TIM_PWM_Start+0x92>
 800834c:	687b      	ldr	r3, [r7, #4]
 800834e:	2202      	movs	r2, #2
 8008350:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8008354:	e00b      	b.n	800836e <HAL_TIM_PWM_Start+0xaa>
 8008356:	683b      	ldr	r3, [r7, #0]
 8008358:	2b08      	cmp	r3, #8
 800835a:	d104      	bne.n	8008366 <HAL_TIM_PWM_Start+0xa2>
 800835c:	687b      	ldr	r3, [r7, #4]
 800835e:	2202      	movs	r2, #2
 8008360:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8008364:	e003      	b.n	800836e <HAL_TIM_PWM_Start+0xaa>
 8008366:	687b      	ldr	r3, [r7, #4]
 8008368:	2202      	movs	r2, #2
 800836a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800836e:	687b      	ldr	r3, [r7, #4]
 8008370:	681b      	ldr	r3, [r3, #0]
 8008372:	2201      	movs	r2, #1
 8008374:	6839      	ldr	r1, [r7, #0]
 8008376:	4618      	mov	r0, r3
 8008378:	f000 fe7e 	bl	8009078 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800837c:	687b      	ldr	r3, [r7, #4]
 800837e:	681b      	ldr	r3, [r3, #0]
 8008380:	4a2d      	ldr	r2, [pc, #180]	; (8008438 <HAL_TIM_PWM_Start+0x174>)
 8008382:	4293      	cmp	r3, r2
 8008384:	d004      	beq.n	8008390 <HAL_TIM_PWM_Start+0xcc>
 8008386:	687b      	ldr	r3, [r7, #4]
 8008388:	681b      	ldr	r3, [r3, #0]
 800838a:	4a2c      	ldr	r2, [pc, #176]	; (800843c <HAL_TIM_PWM_Start+0x178>)
 800838c:	4293      	cmp	r3, r2
 800838e:	d101      	bne.n	8008394 <HAL_TIM_PWM_Start+0xd0>
 8008390:	2301      	movs	r3, #1
 8008392:	e000      	b.n	8008396 <HAL_TIM_PWM_Start+0xd2>
 8008394:	2300      	movs	r3, #0
 8008396:	2b00      	cmp	r3, #0
 8008398:	d007      	beq.n	80083aa <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800839a:	687b      	ldr	r3, [r7, #4]
 800839c:	681b      	ldr	r3, [r3, #0]
 800839e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80083a0:	687b      	ldr	r3, [r7, #4]
 80083a2:	681b      	ldr	r3, [r3, #0]
 80083a4:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80083a8:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80083aa:	687b      	ldr	r3, [r7, #4]
 80083ac:	681b      	ldr	r3, [r3, #0]
 80083ae:	4a22      	ldr	r2, [pc, #136]	; (8008438 <HAL_TIM_PWM_Start+0x174>)
 80083b0:	4293      	cmp	r3, r2
 80083b2:	d022      	beq.n	80083fa <HAL_TIM_PWM_Start+0x136>
 80083b4:	687b      	ldr	r3, [r7, #4]
 80083b6:	681b      	ldr	r3, [r3, #0]
 80083b8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80083bc:	d01d      	beq.n	80083fa <HAL_TIM_PWM_Start+0x136>
 80083be:	687b      	ldr	r3, [r7, #4]
 80083c0:	681b      	ldr	r3, [r3, #0]
 80083c2:	4a1f      	ldr	r2, [pc, #124]	; (8008440 <HAL_TIM_PWM_Start+0x17c>)
 80083c4:	4293      	cmp	r3, r2
 80083c6:	d018      	beq.n	80083fa <HAL_TIM_PWM_Start+0x136>
 80083c8:	687b      	ldr	r3, [r7, #4]
 80083ca:	681b      	ldr	r3, [r3, #0]
 80083cc:	4a1d      	ldr	r2, [pc, #116]	; (8008444 <HAL_TIM_PWM_Start+0x180>)
 80083ce:	4293      	cmp	r3, r2
 80083d0:	d013      	beq.n	80083fa <HAL_TIM_PWM_Start+0x136>
 80083d2:	687b      	ldr	r3, [r7, #4]
 80083d4:	681b      	ldr	r3, [r3, #0]
 80083d6:	4a1c      	ldr	r2, [pc, #112]	; (8008448 <HAL_TIM_PWM_Start+0x184>)
 80083d8:	4293      	cmp	r3, r2
 80083da:	d00e      	beq.n	80083fa <HAL_TIM_PWM_Start+0x136>
 80083dc:	687b      	ldr	r3, [r7, #4]
 80083de:	681b      	ldr	r3, [r3, #0]
 80083e0:	4a16      	ldr	r2, [pc, #88]	; (800843c <HAL_TIM_PWM_Start+0x178>)
 80083e2:	4293      	cmp	r3, r2
 80083e4:	d009      	beq.n	80083fa <HAL_TIM_PWM_Start+0x136>
 80083e6:	687b      	ldr	r3, [r7, #4]
 80083e8:	681b      	ldr	r3, [r3, #0]
 80083ea:	4a18      	ldr	r2, [pc, #96]	; (800844c <HAL_TIM_PWM_Start+0x188>)
 80083ec:	4293      	cmp	r3, r2
 80083ee:	d004      	beq.n	80083fa <HAL_TIM_PWM_Start+0x136>
 80083f0:	687b      	ldr	r3, [r7, #4]
 80083f2:	681b      	ldr	r3, [r3, #0]
 80083f4:	4a16      	ldr	r2, [pc, #88]	; (8008450 <HAL_TIM_PWM_Start+0x18c>)
 80083f6:	4293      	cmp	r3, r2
 80083f8:	d111      	bne.n	800841e <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80083fa:	687b      	ldr	r3, [r7, #4]
 80083fc:	681b      	ldr	r3, [r3, #0]
 80083fe:	689b      	ldr	r3, [r3, #8]
 8008400:	f003 0307 	and.w	r3, r3, #7
 8008404:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008406:	68fb      	ldr	r3, [r7, #12]
 8008408:	2b06      	cmp	r3, #6
 800840a:	d010      	beq.n	800842e <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 800840c:	687b      	ldr	r3, [r7, #4]
 800840e:	681b      	ldr	r3, [r3, #0]
 8008410:	681a      	ldr	r2, [r3, #0]
 8008412:	687b      	ldr	r3, [r7, #4]
 8008414:	681b      	ldr	r3, [r3, #0]
 8008416:	f042 0201 	orr.w	r2, r2, #1
 800841a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800841c:	e007      	b.n	800842e <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800841e:	687b      	ldr	r3, [r7, #4]
 8008420:	681b      	ldr	r3, [r3, #0]
 8008422:	681a      	ldr	r2, [r3, #0]
 8008424:	687b      	ldr	r3, [r7, #4]
 8008426:	681b      	ldr	r3, [r3, #0]
 8008428:	f042 0201 	orr.w	r2, r2, #1
 800842c:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800842e:	2300      	movs	r3, #0
}
 8008430:	4618      	mov	r0, r3
 8008432:	3710      	adds	r7, #16
 8008434:	46bd      	mov	sp, r7
 8008436:	bd80      	pop	{r7, pc}
 8008438:	40010000 	.word	0x40010000
 800843c:	40010400 	.word	0x40010400
 8008440:	40000400 	.word	0x40000400
 8008444:	40000800 	.word	0x40000800
 8008448:	40000c00 	.word	0x40000c00
 800844c:	40014000 	.word	0x40014000
 8008450:	40001800 	.word	0x40001800

08008454 <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8008454:	b580      	push	{r7, lr}
 8008456:	b082      	sub	sp, #8
 8008458:	af00      	add	r7, sp, #0
 800845a:	6078      	str	r0, [r7, #4]
 800845c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 800845e:	687b      	ldr	r3, [r7, #4]
 8008460:	681b      	ldr	r3, [r3, #0]
 8008462:	2200      	movs	r2, #0
 8008464:	6839      	ldr	r1, [r7, #0]
 8008466:	4618      	mov	r0, r3
 8008468:	f000 fe06 	bl	8009078 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800846c:	687b      	ldr	r3, [r7, #4]
 800846e:	681b      	ldr	r3, [r3, #0]
 8008470:	4a2e      	ldr	r2, [pc, #184]	; (800852c <HAL_TIM_PWM_Stop+0xd8>)
 8008472:	4293      	cmp	r3, r2
 8008474:	d004      	beq.n	8008480 <HAL_TIM_PWM_Stop+0x2c>
 8008476:	687b      	ldr	r3, [r7, #4]
 8008478:	681b      	ldr	r3, [r3, #0]
 800847a:	4a2d      	ldr	r2, [pc, #180]	; (8008530 <HAL_TIM_PWM_Stop+0xdc>)
 800847c:	4293      	cmp	r3, r2
 800847e:	d101      	bne.n	8008484 <HAL_TIM_PWM_Stop+0x30>
 8008480:	2301      	movs	r3, #1
 8008482:	e000      	b.n	8008486 <HAL_TIM_PWM_Stop+0x32>
 8008484:	2300      	movs	r3, #0
 8008486:	2b00      	cmp	r3, #0
 8008488:	d017      	beq.n	80084ba <HAL_TIM_PWM_Stop+0x66>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 800848a:	687b      	ldr	r3, [r7, #4]
 800848c:	681b      	ldr	r3, [r3, #0]
 800848e:	6a1a      	ldr	r2, [r3, #32]
 8008490:	f241 1311 	movw	r3, #4369	; 0x1111
 8008494:	4013      	ands	r3, r2
 8008496:	2b00      	cmp	r3, #0
 8008498:	d10f      	bne.n	80084ba <HAL_TIM_PWM_Stop+0x66>
 800849a:	687b      	ldr	r3, [r7, #4]
 800849c:	681b      	ldr	r3, [r3, #0]
 800849e:	6a1a      	ldr	r2, [r3, #32]
 80084a0:	f240 4344 	movw	r3, #1092	; 0x444
 80084a4:	4013      	ands	r3, r2
 80084a6:	2b00      	cmp	r3, #0
 80084a8:	d107      	bne.n	80084ba <HAL_TIM_PWM_Stop+0x66>
 80084aa:	687b      	ldr	r3, [r7, #4]
 80084ac:	681b      	ldr	r3, [r3, #0]
 80084ae:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80084b0:	687b      	ldr	r3, [r7, #4]
 80084b2:	681b      	ldr	r3, [r3, #0]
 80084b4:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80084b8:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 80084ba:	687b      	ldr	r3, [r7, #4]
 80084bc:	681b      	ldr	r3, [r3, #0]
 80084be:	6a1a      	ldr	r2, [r3, #32]
 80084c0:	f241 1311 	movw	r3, #4369	; 0x1111
 80084c4:	4013      	ands	r3, r2
 80084c6:	2b00      	cmp	r3, #0
 80084c8:	d10f      	bne.n	80084ea <HAL_TIM_PWM_Stop+0x96>
 80084ca:	687b      	ldr	r3, [r7, #4]
 80084cc:	681b      	ldr	r3, [r3, #0]
 80084ce:	6a1a      	ldr	r2, [r3, #32]
 80084d0:	f240 4344 	movw	r3, #1092	; 0x444
 80084d4:	4013      	ands	r3, r2
 80084d6:	2b00      	cmp	r3, #0
 80084d8:	d107      	bne.n	80084ea <HAL_TIM_PWM_Stop+0x96>
 80084da:	687b      	ldr	r3, [r7, #4]
 80084dc:	681b      	ldr	r3, [r3, #0]
 80084de:	681a      	ldr	r2, [r3, #0]
 80084e0:	687b      	ldr	r3, [r7, #4]
 80084e2:	681b      	ldr	r3, [r3, #0]
 80084e4:	f022 0201 	bic.w	r2, r2, #1
 80084e8:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 80084ea:	683b      	ldr	r3, [r7, #0]
 80084ec:	2b00      	cmp	r3, #0
 80084ee:	d104      	bne.n	80084fa <HAL_TIM_PWM_Stop+0xa6>
 80084f0:	687b      	ldr	r3, [r7, #4]
 80084f2:	2201      	movs	r2, #1
 80084f4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80084f8:	e013      	b.n	8008522 <HAL_TIM_PWM_Stop+0xce>
 80084fa:	683b      	ldr	r3, [r7, #0]
 80084fc:	2b04      	cmp	r3, #4
 80084fe:	d104      	bne.n	800850a <HAL_TIM_PWM_Stop+0xb6>
 8008500:	687b      	ldr	r3, [r7, #4]
 8008502:	2201      	movs	r2, #1
 8008504:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8008508:	e00b      	b.n	8008522 <HAL_TIM_PWM_Stop+0xce>
 800850a:	683b      	ldr	r3, [r7, #0]
 800850c:	2b08      	cmp	r3, #8
 800850e:	d104      	bne.n	800851a <HAL_TIM_PWM_Stop+0xc6>
 8008510:	687b      	ldr	r3, [r7, #4]
 8008512:	2201      	movs	r2, #1
 8008514:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8008518:	e003      	b.n	8008522 <HAL_TIM_PWM_Stop+0xce>
 800851a:	687b      	ldr	r3, [r7, #4]
 800851c:	2201      	movs	r2, #1
 800851e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Return function status */
  return HAL_OK;
 8008522:	2300      	movs	r3, #0
}
 8008524:	4618      	mov	r0, r3
 8008526:	3708      	adds	r7, #8
 8008528:	46bd      	mov	sp, r7
 800852a:	bd80      	pop	{r7, pc}
 800852c:	40010000 	.word	0x40010000
 8008530:	40010400 	.word	0x40010400

08008534 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8008534:	b580      	push	{r7, lr}
 8008536:	b082      	sub	sp, #8
 8008538:	af00      	add	r7, sp, #0
 800853a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800853c:	687b      	ldr	r3, [r7, #4]
 800853e:	681b      	ldr	r3, [r3, #0]
 8008540:	691b      	ldr	r3, [r3, #16]
 8008542:	f003 0302 	and.w	r3, r3, #2
 8008546:	2b02      	cmp	r3, #2
 8008548:	d122      	bne.n	8008590 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800854a:	687b      	ldr	r3, [r7, #4]
 800854c:	681b      	ldr	r3, [r3, #0]
 800854e:	68db      	ldr	r3, [r3, #12]
 8008550:	f003 0302 	and.w	r3, r3, #2
 8008554:	2b02      	cmp	r3, #2
 8008556:	d11b      	bne.n	8008590 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8008558:	687b      	ldr	r3, [r7, #4]
 800855a:	681b      	ldr	r3, [r3, #0]
 800855c:	f06f 0202 	mvn.w	r2, #2
 8008560:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8008562:	687b      	ldr	r3, [r7, #4]
 8008564:	2201      	movs	r2, #1
 8008566:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8008568:	687b      	ldr	r3, [r7, #4]
 800856a:	681b      	ldr	r3, [r3, #0]
 800856c:	699b      	ldr	r3, [r3, #24]
 800856e:	f003 0303 	and.w	r3, r3, #3
 8008572:	2b00      	cmp	r3, #0
 8008574:	d003      	beq.n	800857e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8008576:	6878      	ldr	r0, [r7, #4]
 8008578:	f000 f9f2 	bl	8008960 <HAL_TIM_IC_CaptureCallback>
 800857c:	e005      	b.n	800858a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800857e:	6878      	ldr	r0, [r7, #4]
 8008580:	f000 f9e4 	bl	800894c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008584:	6878      	ldr	r0, [r7, #4]
 8008586:	f000 f9f5 	bl	8008974 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800858a:	687b      	ldr	r3, [r7, #4]
 800858c:	2200      	movs	r2, #0
 800858e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8008590:	687b      	ldr	r3, [r7, #4]
 8008592:	681b      	ldr	r3, [r3, #0]
 8008594:	691b      	ldr	r3, [r3, #16]
 8008596:	f003 0304 	and.w	r3, r3, #4
 800859a:	2b04      	cmp	r3, #4
 800859c:	d122      	bne.n	80085e4 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800859e:	687b      	ldr	r3, [r7, #4]
 80085a0:	681b      	ldr	r3, [r3, #0]
 80085a2:	68db      	ldr	r3, [r3, #12]
 80085a4:	f003 0304 	and.w	r3, r3, #4
 80085a8:	2b04      	cmp	r3, #4
 80085aa:	d11b      	bne.n	80085e4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80085ac:	687b      	ldr	r3, [r7, #4]
 80085ae:	681b      	ldr	r3, [r3, #0]
 80085b0:	f06f 0204 	mvn.w	r2, #4
 80085b4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80085b6:	687b      	ldr	r3, [r7, #4]
 80085b8:	2202      	movs	r2, #2
 80085ba:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80085bc:	687b      	ldr	r3, [r7, #4]
 80085be:	681b      	ldr	r3, [r3, #0]
 80085c0:	699b      	ldr	r3, [r3, #24]
 80085c2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80085c6:	2b00      	cmp	r3, #0
 80085c8:	d003      	beq.n	80085d2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80085ca:	6878      	ldr	r0, [r7, #4]
 80085cc:	f000 f9c8 	bl	8008960 <HAL_TIM_IC_CaptureCallback>
 80085d0:	e005      	b.n	80085de <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80085d2:	6878      	ldr	r0, [r7, #4]
 80085d4:	f000 f9ba 	bl	800894c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80085d8:	6878      	ldr	r0, [r7, #4]
 80085da:	f000 f9cb 	bl	8008974 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80085de:	687b      	ldr	r3, [r7, #4]
 80085e0:	2200      	movs	r2, #0
 80085e2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80085e4:	687b      	ldr	r3, [r7, #4]
 80085e6:	681b      	ldr	r3, [r3, #0]
 80085e8:	691b      	ldr	r3, [r3, #16]
 80085ea:	f003 0308 	and.w	r3, r3, #8
 80085ee:	2b08      	cmp	r3, #8
 80085f0:	d122      	bne.n	8008638 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80085f2:	687b      	ldr	r3, [r7, #4]
 80085f4:	681b      	ldr	r3, [r3, #0]
 80085f6:	68db      	ldr	r3, [r3, #12]
 80085f8:	f003 0308 	and.w	r3, r3, #8
 80085fc:	2b08      	cmp	r3, #8
 80085fe:	d11b      	bne.n	8008638 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8008600:	687b      	ldr	r3, [r7, #4]
 8008602:	681b      	ldr	r3, [r3, #0]
 8008604:	f06f 0208 	mvn.w	r2, #8
 8008608:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800860a:	687b      	ldr	r3, [r7, #4]
 800860c:	2204      	movs	r2, #4
 800860e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8008610:	687b      	ldr	r3, [r7, #4]
 8008612:	681b      	ldr	r3, [r3, #0]
 8008614:	69db      	ldr	r3, [r3, #28]
 8008616:	f003 0303 	and.w	r3, r3, #3
 800861a:	2b00      	cmp	r3, #0
 800861c:	d003      	beq.n	8008626 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800861e:	6878      	ldr	r0, [r7, #4]
 8008620:	f000 f99e 	bl	8008960 <HAL_TIM_IC_CaptureCallback>
 8008624:	e005      	b.n	8008632 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008626:	6878      	ldr	r0, [r7, #4]
 8008628:	f000 f990 	bl	800894c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800862c:	6878      	ldr	r0, [r7, #4]
 800862e:	f000 f9a1 	bl	8008974 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008632:	687b      	ldr	r3, [r7, #4]
 8008634:	2200      	movs	r2, #0
 8008636:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8008638:	687b      	ldr	r3, [r7, #4]
 800863a:	681b      	ldr	r3, [r3, #0]
 800863c:	691b      	ldr	r3, [r3, #16]
 800863e:	f003 0310 	and.w	r3, r3, #16
 8008642:	2b10      	cmp	r3, #16
 8008644:	d122      	bne.n	800868c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8008646:	687b      	ldr	r3, [r7, #4]
 8008648:	681b      	ldr	r3, [r3, #0]
 800864a:	68db      	ldr	r3, [r3, #12]
 800864c:	f003 0310 	and.w	r3, r3, #16
 8008650:	2b10      	cmp	r3, #16
 8008652:	d11b      	bne.n	800868c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8008654:	687b      	ldr	r3, [r7, #4]
 8008656:	681b      	ldr	r3, [r3, #0]
 8008658:	f06f 0210 	mvn.w	r2, #16
 800865c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800865e:	687b      	ldr	r3, [r7, #4]
 8008660:	2208      	movs	r2, #8
 8008662:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8008664:	687b      	ldr	r3, [r7, #4]
 8008666:	681b      	ldr	r3, [r3, #0]
 8008668:	69db      	ldr	r3, [r3, #28]
 800866a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800866e:	2b00      	cmp	r3, #0
 8008670:	d003      	beq.n	800867a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008672:	6878      	ldr	r0, [r7, #4]
 8008674:	f000 f974 	bl	8008960 <HAL_TIM_IC_CaptureCallback>
 8008678:	e005      	b.n	8008686 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800867a:	6878      	ldr	r0, [r7, #4]
 800867c:	f000 f966 	bl	800894c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008680:	6878      	ldr	r0, [r7, #4]
 8008682:	f000 f977 	bl	8008974 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008686:	687b      	ldr	r3, [r7, #4]
 8008688:	2200      	movs	r2, #0
 800868a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800868c:	687b      	ldr	r3, [r7, #4]
 800868e:	681b      	ldr	r3, [r3, #0]
 8008690:	691b      	ldr	r3, [r3, #16]
 8008692:	f003 0301 	and.w	r3, r3, #1
 8008696:	2b01      	cmp	r3, #1
 8008698:	d10e      	bne.n	80086b8 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800869a:	687b      	ldr	r3, [r7, #4]
 800869c:	681b      	ldr	r3, [r3, #0]
 800869e:	68db      	ldr	r3, [r3, #12]
 80086a0:	f003 0301 	and.w	r3, r3, #1
 80086a4:	2b01      	cmp	r3, #1
 80086a6:	d107      	bne.n	80086b8 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80086a8:	687b      	ldr	r3, [r7, #4]
 80086aa:	681b      	ldr	r3, [r3, #0]
 80086ac:	f06f 0201 	mvn.w	r2, #1
 80086b0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80086b2:	6878      	ldr	r0, [r7, #4]
 80086b4:	f7f8 ff1e 	bl	80014f4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80086b8:	687b      	ldr	r3, [r7, #4]
 80086ba:	681b      	ldr	r3, [r3, #0]
 80086bc:	691b      	ldr	r3, [r3, #16]
 80086be:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80086c2:	2b80      	cmp	r3, #128	; 0x80
 80086c4:	d10e      	bne.n	80086e4 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80086c6:	687b      	ldr	r3, [r7, #4]
 80086c8:	681b      	ldr	r3, [r3, #0]
 80086ca:	68db      	ldr	r3, [r3, #12]
 80086cc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80086d0:	2b80      	cmp	r3, #128	; 0x80
 80086d2:	d107      	bne.n	80086e4 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80086d4:	687b      	ldr	r3, [r7, #4]
 80086d6:	681b      	ldr	r3, [r3, #0]
 80086d8:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80086dc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80086de:	6878      	ldr	r0, [r7, #4]
 80086e0:	f000 fd76 	bl	80091d0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80086e4:	687b      	ldr	r3, [r7, #4]
 80086e6:	681b      	ldr	r3, [r3, #0]
 80086e8:	691b      	ldr	r3, [r3, #16]
 80086ea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80086ee:	2b40      	cmp	r3, #64	; 0x40
 80086f0:	d10e      	bne.n	8008710 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80086f2:	687b      	ldr	r3, [r7, #4]
 80086f4:	681b      	ldr	r3, [r3, #0]
 80086f6:	68db      	ldr	r3, [r3, #12]
 80086f8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80086fc:	2b40      	cmp	r3, #64	; 0x40
 80086fe:	d107      	bne.n	8008710 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8008700:	687b      	ldr	r3, [r7, #4]
 8008702:	681b      	ldr	r3, [r3, #0]
 8008704:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8008708:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800870a:	6878      	ldr	r0, [r7, #4]
 800870c:	f000 f93c 	bl	8008988 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8008710:	687b      	ldr	r3, [r7, #4]
 8008712:	681b      	ldr	r3, [r3, #0]
 8008714:	691b      	ldr	r3, [r3, #16]
 8008716:	f003 0320 	and.w	r3, r3, #32
 800871a:	2b20      	cmp	r3, #32
 800871c:	d10e      	bne.n	800873c <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800871e:	687b      	ldr	r3, [r7, #4]
 8008720:	681b      	ldr	r3, [r3, #0]
 8008722:	68db      	ldr	r3, [r3, #12]
 8008724:	f003 0320 	and.w	r3, r3, #32
 8008728:	2b20      	cmp	r3, #32
 800872a:	d107      	bne.n	800873c <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800872c:	687b      	ldr	r3, [r7, #4]
 800872e:	681b      	ldr	r3, [r3, #0]
 8008730:	f06f 0220 	mvn.w	r2, #32
 8008734:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8008736:	6878      	ldr	r0, [r7, #4]
 8008738:	f000 fd40 	bl	80091bc <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800873c:	bf00      	nop
 800873e:	3708      	adds	r7, #8
 8008740:	46bd      	mov	sp, r7
 8008742:	bd80      	pop	{r7, pc}

08008744 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8008744:	b580      	push	{r7, lr}
 8008746:	b086      	sub	sp, #24
 8008748:	af00      	add	r7, sp, #0
 800874a:	60f8      	str	r0, [r7, #12]
 800874c:	60b9      	str	r1, [r7, #8]
 800874e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8008750:	2300      	movs	r3, #0
 8008752:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8008754:	68fb      	ldr	r3, [r7, #12]
 8008756:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800875a:	2b01      	cmp	r3, #1
 800875c:	d101      	bne.n	8008762 <HAL_TIM_PWM_ConfigChannel+0x1e>
 800875e:	2302      	movs	r3, #2
 8008760:	e0ae      	b.n	80088c0 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8008762:	68fb      	ldr	r3, [r7, #12]
 8008764:	2201      	movs	r2, #1
 8008766:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800876a:	687b      	ldr	r3, [r7, #4]
 800876c:	2b0c      	cmp	r3, #12
 800876e:	f200 809f 	bhi.w	80088b0 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8008772:	a201      	add	r2, pc, #4	; (adr r2, 8008778 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8008774:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008778:	080087ad 	.word	0x080087ad
 800877c:	080088b1 	.word	0x080088b1
 8008780:	080088b1 	.word	0x080088b1
 8008784:	080088b1 	.word	0x080088b1
 8008788:	080087ed 	.word	0x080087ed
 800878c:	080088b1 	.word	0x080088b1
 8008790:	080088b1 	.word	0x080088b1
 8008794:	080088b1 	.word	0x080088b1
 8008798:	0800882f 	.word	0x0800882f
 800879c:	080088b1 	.word	0x080088b1
 80087a0:	080088b1 	.word	0x080088b1
 80087a4:	080088b1 	.word	0x080088b1
 80087a8:	0800886f 	.word	0x0800886f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80087ac:	68fb      	ldr	r3, [r7, #12]
 80087ae:	681b      	ldr	r3, [r3, #0]
 80087b0:	68b9      	ldr	r1, [r7, #8]
 80087b2:	4618      	mov	r0, r3
 80087b4:	f000 f9a0 	bl	8008af8 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80087b8:	68fb      	ldr	r3, [r7, #12]
 80087ba:	681b      	ldr	r3, [r3, #0]
 80087bc:	699a      	ldr	r2, [r3, #24]
 80087be:	68fb      	ldr	r3, [r7, #12]
 80087c0:	681b      	ldr	r3, [r3, #0]
 80087c2:	f042 0208 	orr.w	r2, r2, #8
 80087c6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80087c8:	68fb      	ldr	r3, [r7, #12]
 80087ca:	681b      	ldr	r3, [r3, #0]
 80087cc:	699a      	ldr	r2, [r3, #24]
 80087ce:	68fb      	ldr	r3, [r7, #12]
 80087d0:	681b      	ldr	r3, [r3, #0]
 80087d2:	f022 0204 	bic.w	r2, r2, #4
 80087d6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80087d8:	68fb      	ldr	r3, [r7, #12]
 80087da:	681b      	ldr	r3, [r3, #0]
 80087dc:	6999      	ldr	r1, [r3, #24]
 80087de:	68bb      	ldr	r3, [r7, #8]
 80087e0:	691a      	ldr	r2, [r3, #16]
 80087e2:	68fb      	ldr	r3, [r7, #12]
 80087e4:	681b      	ldr	r3, [r3, #0]
 80087e6:	430a      	orrs	r2, r1
 80087e8:	619a      	str	r2, [r3, #24]
      break;
 80087ea:	e064      	b.n	80088b6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80087ec:	68fb      	ldr	r3, [r7, #12]
 80087ee:	681b      	ldr	r3, [r3, #0]
 80087f0:	68b9      	ldr	r1, [r7, #8]
 80087f2:	4618      	mov	r0, r3
 80087f4:	f000 f9f0 	bl	8008bd8 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80087f8:	68fb      	ldr	r3, [r7, #12]
 80087fa:	681b      	ldr	r3, [r3, #0]
 80087fc:	699a      	ldr	r2, [r3, #24]
 80087fe:	68fb      	ldr	r3, [r7, #12]
 8008800:	681b      	ldr	r3, [r3, #0]
 8008802:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8008806:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8008808:	68fb      	ldr	r3, [r7, #12]
 800880a:	681b      	ldr	r3, [r3, #0]
 800880c:	699a      	ldr	r2, [r3, #24]
 800880e:	68fb      	ldr	r3, [r7, #12]
 8008810:	681b      	ldr	r3, [r3, #0]
 8008812:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008816:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8008818:	68fb      	ldr	r3, [r7, #12]
 800881a:	681b      	ldr	r3, [r3, #0]
 800881c:	6999      	ldr	r1, [r3, #24]
 800881e:	68bb      	ldr	r3, [r7, #8]
 8008820:	691b      	ldr	r3, [r3, #16]
 8008822:	021a      	lsls	r2, r3, #8
 8008824:	68fb      	ldr	r3, [r7, #12]
 8008826:	681b      	ldr	r3, [r3, #0]
 8008828:	430a      	orrs	r2, r1
 800882a:	619a      	str	r2, [r3, #24]
      break;
 800882c:	e043      	b.n	80088b6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800882e:	68fb      	ldr	r3, [r7, #12]
 8008830:	681b      	ldr	r3, [r3, #0]
 8008832:	68b9      	ldr	r1, [r7, #8]
 8008834:	4618      	mov	r0, r3
 8008836:	f000 fa45 	bl	8008cc4 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800883a:	68fb      	ldr	r3, [r7, #12]
 800883c:	681b      	ldr	r3, [r3, #0]
 800883e:	69da      	ldr	r2, [r3, #28]
 8008840:	68fb      	ldr	r3, [r7, #12]
 8008842:	681b      	ldr	r3, [r3, #0]
 8008844:	f042 0208 	orr.w	r2, r2, #8
 8008848:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800884a:	68fb      	ldr	r3, [r7, #12]
 800884c:	681b      	ldr	r3, [r3, #0]
 800884e:	69da      	ldr	r2, [r3, #28]
 8008850:	68fb      	ldr	r3, [r7, #12]
 8008852:	681b      	ldr	r3, [r3, #0]
 8008854:	f022 0204 	bic.w	r2, r2, #4
 8008858:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800885a:	68fb      	ldr	r3, [r7, #12]
 800885c:	681b      	ldr	r3, [r3, #0]
 800885e:	69d9      	ldr	r1, [r3, #28]
 8008860:	68bb      	ldr	r3, [r7, #8]
 8008862:	691a      	ldr	r2, [r3, #16]
 8008864:	68fb      	ldr	r3, [r7, #12]
 8008866:	681b      	ldr	r3, [r3, #0]
 8008868:	430a      	orrs	r2, r1
 800886a:	61da      	str	r2, [r3, #28]
      break;
 800886c:	e023      	b.n	80088b6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800886e:	68fb      	ldr	r3, [r7, #12]
 8008870:	681b      	ldr	r3, [r3, #0]
 8008872:	68b9      	ldr	r1, [r7, #8]
 8008874:	4618      	mov	r0, r3
 8008876:	f000 fa99 	bl	8008dac <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800887a:	68fb      	ldr	r3, [r7, #12]
 800887c:	681b      	ldr	r3, [r3, #0]
 800887e:	69da      	ldr	r2, [r3, #28]
 8008880:	68fb      	ldr	r3, [r7, #12]
 8008882:	681b      	ldr	r3, [r3, #0]
 8008884:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8008888:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800888a:	68fb      	ldr	r3, [r7, #12]
 800888c:	681b      	ldr	r3, [r3, #0]
 800888e:	69da      	ldr	r2, [r3, #28]
 8008890:	68fb      	ldr	r3, [r7, #12]
 8008892:	681b      	ldr	r3, [r3, #0]
 8008894:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008898:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800889a:	68fb      	ldr	r3, [r7, #12]
 800889c:	681b      	ldr	r3, [r3, #0]
 800889e:	69d9      	ldr	r1, [r3, #28]
 80088a0:	68bb      	ldr	r3, [r7, #8]
 80088a2:	691b      	ldr	r3, [r3, #16]
 80088a4:	021a      	lsls	r2, r3, #8
 80088a6:	68fb      	ldr	r3, [r7, #12]
 80088a8:	681b      	ldr	r3, [r3, #0]
 80088aa:	430a      	orrs	r2, r1
 80088ac:	61da      	str	r2, [r3, #28]
      break;
 80088ae:	e002      	b.n	80088b6 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 80088b0:	2301      	movs	r3, #1
 80088b2:	75fb      	strb	r3, [r7, #23]
      break;
 80088b4:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80088b6:	68fb      	ldr	r3, [r7, #12]
 80088b8:	2200      	movs	r2, #0
 80088ba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80088be:	7dfb      	ldrb	r3, [r7, #23]
}
 80088c0:	4618      	mov	r0, r3
 80088c2:	3718      	adds	r7, #24
 80088c4:	46bd      	mov	sp, r7
 80088c6:	bd80      	pop	{r7, pc}

080088c8 <HAL_TIM_SlaveConfigSynchro>:
  *         timer input or external trigger input) and the Slave mode
  *         (Disable, Reset, Gated, Trigger, External clock mode 1).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_SlaveConfigSynchro(TIM_HandleTypeDef *htim, TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 80088c8:	b580      	push	{r7, lr}
 80088ca:	b082      	sub	sp, #8
 80088cc:	af00      	add	r7, sp, #0
 80088ce:	6078      	str	r0, [r7, #4]
 80088d0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_SLAVE_INSTANCE(htim->Instance));
  assert_param(IS_TIM_SLAVE_MODE(sSlaveConfig->SlaveMode));
  assert_param(IS_TIM_TRIGGER_SELECTION(sSlaveConfig->InputTrigger));

  __HAL_LOCK(htim);
 80088d2:	687b      	ldr	r3, [r7, #4]
 80088d4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80088d8:	2b01      	cmp	r3, #1
 80088da:	d101      	bne.n	80088e0 <HAL_TIM_SlaveConfigSynchro+0x18>
 80088dc:	2302      	movs	r3, #2
 80088de:	e031      	b.n	8008944 <HAL_TIM_SlaveConfigSynchro+0x7c>
 80088e0:	687b      	ldr	r3, [r7, #4]
 80088e2:	2201      	movs	r2, #1
 80088e4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80088e8:	687b      	ldr	r3, [r7, #4]
 80088ea:	2202      	movs	r2, #2
 80088ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  if (TIM_SlaveTimer_SetConfig(htim, sSlaveConfig) != HAL_OK)
 80088f0:	6839      	ldr	r1, [r7, #0]
 80088f2:	6878      	ldr	r0, [r7, #4]
 80088f4:	f000 fab0 	bl	8008e58 <TIM_SlaveTimer_SetConfig>
 80088f8:	4603      	mov	r3, r0
 80088fa:	2b00      	cmp	r3, #0
 80088fc:	d009      	beq.n	8008912 <HAL_TIM_SlaveConfigSynchro+0x4a>
  {
    htim->State = HAL_TIM_STATE_READY;
 80088fe:	687b      	ldr	r3, [r7, #4]
 8008900:	2201      	movs	r2, #1
 8008902:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    __HAL_UNLOCK(htim);
 8008906:	687b      	ldr	r3, [r7, #4]
 8008908:	2200      	movs	r2, #0
 800890a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    return HAL_ERROR;
 800890e:	2301      	movs	r3, #1
 8008910:	e018      	b.n	8008944 <HAL_TIM_SlaveConfigSynchro+0x7c>
  }

  /* Disable Trigger Interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_TRIGGER);
 8008912:	687b      	ldr	r3, [r7, #4]
 8008914:	681b      	ldr	r3, [r3, #0]
 8008916:	68da      	ldr	r2, [r3, #12]
 8008918:	687b      	ldr	r3, [r7, #4]
 800891a:	681b      	ldr	r3, [r3, #0]
 800891c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008920:	60da      	str	r2, [r3, #12]

  /* Disable Trigger DMA request */
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_TRIGGER);
 8008922:	687b      	ldr	r3, [r7, #4]
 8008924:	681b      	ldr	r3, [r3, #0]
 8008926:	68da      	ldr	r2, [r3, #12]
 8008928:	687b      	ldr	r3, [r7, #4]
 800892a:	681b      	ldr	r3, [r3, #0]
 800892c:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8008930:	60da      	str	r2, [r3, #12]

  htim->State = HAL_TIM_STATE_READY;
 8008932:	687b      	ldr	r3, [r7, #4]
 8008934:	2201      	movs	r2, #1
 8008936:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800893a:	687b      	ldr	r3, [r7, #4]
 800893c:	2200      	movs	r2, #0
 800893e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8008942:	2300      	movs	r3, #0
}
 8008944:	4618      	mov	r0, r3
 8008946:	3708      	adds	r7, #8
 8008948:	46bd      	mov	sp, r7
 800894a:	bd80      	pop	{r7, pc}

0800894c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800894c:	b480      	push	{r7}
 800894e:	b083      	sub	sp, #12
 8008950:	af00      	add	r7, sp, #0
 8008952:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8008954:	bf00      	nop
 8008956:	370c      	adds	r7, #12
 8008958:	46bd      	mov	sp, r7
 800895a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800895e:	4770      	bx	lr

08008960 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8008960:	b480      	push	{r7}
 8008962:	b083      	sub	sp, #12
 8008964:	af00      	add	r7, sp, #0
 8008966:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8008968:	bf00      	nop
 800896a:	370c      	adds	r7, #12
 800896c:	46bd      	mov	sp, r7
 800896e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008972:	4770      	bx	lr

08008974 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8008974:	b480      	push	{r7}
 8008976:	b083      	sub	sp, #12
 8008978:	af00      	add	r7, sp, #0
 800897a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800897c:	bf00      	nop
 800897e:	370c      	adds	r7, #12
 8008980:	46bd      	mov	sp, r7
 8008982:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008986:	4770      	bx	lr

08008988 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8008988:	b480      	push	{r7}
 800898a:	b083      	sub	sp, #12
 800898c:	af00      	add	r7, sp, #0
 800898e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8008990:	bf00      	nop
 8008992:	370c      	adds	r7, #12
 8008994:	46bd      	mov	sp, r7
 8008996:	f85d 7b04 	ldr.w	r7, [sp], #4
 800899a:	4770      	bx	lr

0800899c <HAL_TIM_Base_GetState>:
  * @brief  Return the TIM Base handle state.
  * @param  htim TIM Base handle
  * @retval HAL state
  */
HAL_TIM_StateTypeDef HAL_TIM_Base_GetState(TIM_HandleTypeDef *htim)
{
 800899c:	b480      	push	{r7}
 800899e:	b083      	sub	sp, #12
 80089a0:	af00      	add	r7, sp, #0
 80089a2:	6078      	str	r0, [r7, #4]
  return htim->State;
 80089a4:	687b      	ldr	r3, [r7, #4]
 80089a6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80089aa:	b2db      	uxtb	r3, r3
}
 80089ac:	4618      	mov	r0, r3
 80089ae:	370c      	adds	r7, #12
 80089b0:	46bd      	mov	sp, r7
 80089b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089b6:	4770      	bx	lr

080089b8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80089b8:	b480      	push	{r7}
 80089ba:	b085      	sub	sp, #20
 80089bc:	af00      	add	r7, sp, #0
 80089be:	6078      	str	r0, [r7, #4]
 80089c0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80089c2:	687b      	ldr	r3, [r7, #4]
 80089c4:	681b      	ldr	r3, [r3, #0]
 80089c6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80089c8:	687b      	ldr	r3, [r7, #4]
 80089ca:	4a40      	ldr	r2, [pc, #256]	; (8008acc <TIM_Base_SetConfig+0x114>)
 80089cc:	4293      	cmp	r3, r2
 80089ce:	d013      	beq.n	80089f8 <TIM_Base_SetConfig+0x40>
 80089d0:	687b      	ldr	r3, [r7, #4]
 80089d2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80089d6:	d00f      	beq.n	80089f8 <TIM_Base_SetConfig+0x40>
 80089d8:	687b      	ldr	r3, [r7, #4]
 80089da:	4a3d      	ldr	r2, [pc, #244]	; (8008ad0 <TIM_Base_SetConfig+0x118>)
 80089dc:	4293      	cmp	r3, r2
 80089de:	d00b      	beq.n	80089f8 <TIM_Base_SetConfig+0x40>
 80089e0:	687b      	ldr	r3, [r7, #4]
 80089e2:	4a3c      	ldr	r2, [pc, #240]	; (8008ad4 <TIM_Base_SetConfig+0x11c>)
 80089e4:	4293      	cmp	r3, r2
 80089e6:	d007      	beq.n	80089f8 <TIM_Base_SetConfig+0x40>
 80089e8:	687b      	ldr	r3, [r7, #4]
 80089ea:	4a3b      	ldr	r2, [pc, #236]	; (8008ad8 <TIM_Base_SetConfig+0x120>)
 80089ec:	4293      	cmp	r3, r2
 80089ee:	d003      	beq.n	80089f8 <TIM_Base_SetConfig+0x40>
 80089f0:	687b      	ldr	r3, [r7, #4]
 80089f2:	4a3a      	ldr	r2, [pc, #232]	; (8008adc <TIM_Base_SetConfig+0x124>)
 80089f4:	4293      	cmp	r3, r2
 80089f6:	d108      	bne.n	8008a0a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80089f8:	68fb      	ldr	r3, [r7, #12]
 80089fa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80089fe:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8008a00:	683b      	ldr	r3, [r7, #0]
 8008a02:	685b      	ldr	r3, [r3, #4]
 8008a04:	68fa      	ldr	r2, [r7, #12]
 8008a06:	4313      	orrs	r3, r2
 8008a08:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8008a0a:	687b      	ldr	r3, [r7, #4]
 8008a0c:	4a2f      	ldr	r2, [pc, #188]	; (8008acc <TIM_Base_SetConfig+0x114>)
 8008a0e:	4293      	cmp	r3, r2
 8008a10:	d02b      	beq.n	8008a6a <TIM_Base_SetConfig+0xb2>
 8008a12:	687b      	ldr	r3, [r7, #4]
 8008a14:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008a18:	d027      	beq.n	8008a6a <TIM_Base_SetConfig+0xb2>
 8008a1a:	687b      	ldr	r3, [r7, #4]
 8008a1c:	4a2c      	ldr	r2, [pc, #176]	; (8008ad0 <TIM_Base_SetConfig+0x118>)
 8008a1e:	4293      	cmp	r3, r2
 8008a20:	d023      	beq.n	8008a6a <TIM_Base_SetConfig+0xb2>
 8008a22:	687b      	ldr	r3, [r7, #4]
 8008a24:	4a2b      	ldr	r2, [pc, #172]	; (8008ad4 <TIM_Base_SetConfig+0x11c>)
 8008a26:	4293      	cmp	r3, r2
 8008a28:	d01f      	beq.n	8008a6a <TIM_Base_SetConfig+0xb2>
 8008a2a:	687b      	ldr	r3, [r7, #4]
 8008a2c:	4a2a      	ldr	r2, [pc, #168]	; (8008ad8 <TIM_Base_SetConfig+0x120>)
 8008a2e:	4293      	cmp	r3, r2
 8008a30:	d01b      	beq.n	8008a6a <TIM_Base_SetConfig+0xb2>
 8008a32:	687b      	ldr	r3, [r7, #4]
 8008a34:	4a29      	ldr	r2, [pc, #164]	; (8008adc <TIM_Base_SetConfig+0x124>)
 8008a36:	4293      	cmp	r3, r2
 8008a38:	d017      	beq.n	8008a6a <TIM_Base_SetConfig+0xb2>
 8008a3a:	687b      	ldr	r3, [r7, #4]
 8008a3c:	4a28      	ldr	r2, [pc, #160]	; (8008ae0 <TIM_Base_SetConfig+0x128>)
 8008a3e:	4293      	cmp	r3, r2
 8008a40:	d013      	beq.n	8008a6a <TIM_Base_SetConfig+0xb2>
 8008a42:	687b      	ldr	r3, [r7, #4]
 8008a44:	4a27      	ldr	r2, [pc, #156]	; (8008ae4 <TIM_Base_SetConfig+0x12c>)
 8008a46:	4293      	cmp	r3, r2
 8008a48:	d00f      	beq.n	8008a6a <TIM_Base_SetConfig+0xb2>
 8008a4a:	687b      	ldr	r3, [r7, #4]
 8008a4c:	4a26      	ldr	r2, [pc, #152]	; (8008ae8 <TIM_Base_SetConfig+0x130>)
 8008a4e:	4293      	cmp	r3, r2
 8008a50:	d00b      	beq.n	8008a6a <TIM_Base_SetConfig+0xb2>
 8008a52:	687b      	ldr	r3, [r7, #4]
 8008a54:	4a25      	ldr	r2, [pc, #148]	; (8008aec <TIM_Base_SetConfig+0x134>)
 8008a56:	4293      	cmp	r3, r2
 8008a58:	d007      	beq.n	8008a6a <TIM_Base_SetConfig+0xb2>
 8008a5a:	687b      	ldr	r3, [r7, #4]
 8008a5c:	4a24      	ldr	r2, [pc, #144]	; (8008af0 <TIM_Base_SetConfig+0x138>)
 8008a5e:	4293      	cmp	r3, r2
 8008a60:	d003      	beq.n	8008a6a <TIM_Base_SetConfig+0xb2>
 8008a62:	687b      	ldr	r3, [r7, #4]
 8008a64:	4a23      	ldr	r2, [pc, #140]	; (8008af4 <TIM_Base_SetConfig+0x13c>)
 8008a66:	4293      	cmp	r3, r2
 8008a68:	d108      	bne.n	8008a7c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8008a6a:	68fb      	ldr	r3, [r7, #12]
 8008a6c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008a70:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8008a72:	683b      	ldr	r3, [r7, #0]
 8008a74:	68db      	ldr	r3, [r3, #12]
 8008a76:	68fa      	ldr	r2, [r7, #12]
 8008a78:	4313      	orrs	r3, r2
 8008a7a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8008a7c:	68fb      	ldr	r3, [r7, #12]
 8008a7e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8008a82:	683b      	ldr	r3, [r7, #0]
 8008a84:	695b      	ldr	r3, [r3, #20]
 8008a86:	4313      	orrs	r3, r2
 8008a88:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8008a8a:	687b      	ldr	r3, [r7, #4]
 8008a8c:	68fa      	ldr	r2, [r7, #12]
 8008a8e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8008a90:	683b      	ldr	r3, [r7, #0]
 8008a92:	689a      	ldr	r2, [r3, #8]
 8008a94:	687b      	ldr	r3, [r7, #4]
 8008a96:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8008a98:	683b      	ldr	r3, [r7, #0]
 8008a9a:	681a      	ldr	r2, [r3, #0]
 8008a9c:	687b      	ldr	r3, [r7, #4]
 8008a9e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8008aa0:	687b      	ldr	r3, [r7, #4]
 8008aa2:	4a0a      	ldr	r2, [pc, #40]	; (8008acc <TIM_Base_SetConfig+0x114>)
 8008aa4:	4293      	cmp	r3, r2
 8008aa6:	d003      	beq.n	8008ab0 <TIM_Base_SetConfig+0xf8>
 8008aa8:	687b      	ldr	r3, [r7, #4]
 8008aaa:	4a0c      	ldr	r2, [pc, #48]	; (8008adc <TIM_Base_SetConfig+0x124>)
 8008aac:	4293      	cmp	r3, r2
 8008aae:	d103      	bne.n	8008ab8 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8008ab0:	683b      	ldr	r3, [r7, #0]
 8008ab2:	691a      	ldr	r2, [r3, #16]
 8008ab4:	687b      	ldr	r3, [r7, #4]
 8008ab6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8008ab8:	687b      	ldr	r3, [r7, #4]
 8008aba:	2201      	movs	r2, #1
 8008abc:	615a      	str	r2, [r3, #20]
}
 8008abe:	bf00      	nop
 8008ac0:	3714      	adds	r7, #20
 8008ac2:	46bd      	mov	sp, r7
 8008ac4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ac8:	4770      	bx	lr
 8008aca:	bf00      	nop
 8008acc:	40010000 	.word	0x40010000
 8008ad0:	40000400 	.word	0x40000400
 8008ad4:	40000800 	.word	0x40000800
 8008ad8:	40000c00 	.word	0x40000c00
 8008adc:	40010400 	.word	0x40010400
 8008ae0:	40014000 	.word	0x40014000
 8008ae4:	40014400 	.word	0x40014400
 8008ae8:	40014800 	.word	0x40014800
 8008aec:	40001800 	.word	0x40001800
 8008af0:	40001c00 	.word	0x40001c00
 8008af4:	40002000 	.word	0x40002000

08008af8 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8008af8:	b480      	push	{r7}
 8008afa:	b087      	sub	sp, #28
 8008afc:	af00      	add	r7, sp, #0
 8008afe:	6078      	str	r0, [r7, #4]
 8008b00:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8008b02:	687b      	ldr	r3, [r7, #4]
 8008b04:	6a1b      	ldr	r3, [r3, #32]
 8008b06:	f023 0201 	bic.w	r2, r3, #1
 8008b0a:	687b      	ldr	r3, [r7, #4]
 8008b0c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008b0e:	687b      	ldr	r3, [r7, #4]
 8008b10:	6a1b      	ldr	r3, [r3, #32]
 8008b12:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008b14:	687b      	ldr	r3, [r7, #4]
 8008b16:	685b      	ldr	r3, [r3, #4]
 8008b18:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8008b1a:	687b      	ldr	r3, [r7, #4]
 8008b1c:	699b      	ldr	r3, [r3, #24]
 8008b1e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8008b20:	68fb      	ldr	r3, [r7, #12]
 8008b22:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008b26:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8008b28:	68fb      	ldr	r3, [r7, #12]
 8008b2a:	f023 0303 	bic.w	r3, r3, #3
 8008b2e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008b30:	683b      	ldr	r3, [r7, #0]
 8008b32:	681b      	ldr	r3, [r3, #0]
 8008b34:	68fa      	ldr	r2, [r7, #12]
 8008b36:	4313      	orrs	r3, r2
 8008b38:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8008b3a:	697b      	ldr	r3, [r7, #20]
 8008b3c:	f023 0302 	bic.w	r3, r3, #2
 8008b40:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8008b42:	683b      	ldr	r3, [r7, #0]
 8008b44:	689b      	ldr	r3, [r3, #8]
 8008b46:	697a      	ldr	r2, [r7, #20]
 8008b48:	4313      	orrs	r3, r2
 8008b4a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8008b4c:	687b      	ldr	r3, [r7, #4]
 8008b4e:	4a20      	ldr	r2, [pc, #128]	; (8008bd0 <TIM_OC1_SetConfig+0xd8>)
 8008b50:	4293      	cmp	r3, r2
 8008b52:	d003      	beq.n	8008b5c <TIM_OC1_SetConfig+0x64>
 8008b54:	687b      	ldr	r3, [r7, #4]
 8008b56:	4a1f      	ldr	r2, [pc, #124]	; (8008bd4 <TIM_OC1_SetConfig+0xdc>)
 8008b58:	4293      	cmp	r3, r2
 8008b5a:	d10c      	bne.n	8008b76 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8008b5c:	697b      	ldr	r3, [r7, #20]
 8008b5e:	f023 0308 	bic.w	r3, r3, #8
 8008b62:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8008b64:	683b      	ldr	r3, [r7, #0]
 8008b66:	68db      	ldr	r3, [r3, #12]
 8008b68:	697a      	ldr	r2, [r7, #20]
 8008b6a:	4313      	orrs	r3, r2
 8008b6c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8008b6e:	697b      	ldr	r3, [r7, #20]
 8008b70:	f023 0304 	bic.w	r3, r3, #4
 8008b74:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008b76:	687b      	ldr	r3, [r7, #4]
 8008b78:	4a15      	ldr	r2, [pc, #84]	; (8008bd0 <TIM_OC1_SetConfig+0xd8>)
 8008b7a:	4293      	cmp	r3, r2
 8008b7c:	d003      	beq.n	8008b86 <TIM_OC1_SetConfig+0x8e>
 8008b7e:	687b      	ldr	r3, [r7, #4]
 8008b80:	4a14      	ldr	r2, [pc, #80]	; (8008bd4 <TIM_OC1_SetConfig+0xdc>)
 8008b82:	4293      	cmp	r3, r2
 8008b84:	d111      	bne.n	8008baa <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8008b86:	693b      	ldr	r3, [r7, #16]
 8008b88:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008b8c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8008b8e:	693b      	ldr	r3, [r7, #16]
 8008b90:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8008b94:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8008b96:	683b      	ldr	r3, [r7, #0]
 8008b98:	695b      	ldr	r3, [r3, #20]
 8008b9a:	693a      	ldr	r2, [r7, #16]
 8008b9c:	4313      	orrs	r3, r2
 8008b9e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8008ba0:	683b      	ldr	r3, [r7, #0]
 8008ba2:	699b      	ldr	r3, [r3, #24]
 8008ba4:	693a      	ldr	r2, [r7, #16]
 8008ba6:	4313      	orrs	r3, r2
 8008ba8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008baa:	687b      	ldr	r3, [r7, #4]
 8008bac:	693a      	ldr	r2, [r7, #16]
 8008bae:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8008bb0:	687b      	ldr	r3, [r7, #4]
 8008bb2:	68fa      	ldr	r2, [r7, #12]
 8008bb4:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8008bb6:	683b      	ldr	r3, [r7, #0]
 8008bb8:	685a      	ldr	r2, [r3, #4]
 8008bba:	687b      	ldr	r3, [r7, #4]
 8008bbc:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008bbe:	687b      	ldr	r3, [r7, #4]
 8008bc0:	697a      	ldr	r2, [r7, #20]
 8008bc2:	621a      	str	r2, [r3, #32]
}
 8008bc4:	bf00      	nop
 8008bc6:	371c      	adds	r7, #28
 8008bc8:	46bd      	mov	sp, r7
 8008bca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bce:	4770      	bx	lr
 8008bd0:	40010000 	.word	0x40010000
 8008bd4:	40010400 	.word	0x40010400

08008bd8 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8008bd8:	b480      	push	{r7}
 8008bda:	b087      	sub	sp, #28
 8008bdc:	af00      	add	r7, sp, #0
 8008bde:	6078      	str	r0, [r7, #4]
 8008be0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8008be2:	687b      	ldr	r3, [r7, #4]
 8008be4:	6a1b      	ldr	r3, [r3, #32]
 8008be6:	f023 0210 	bic.w	r2, r3, #16
 8008bea:	687b      	ldr	r3, [r7, #4]
 8008bec:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008bee:	687b      	ldr	r3, [r7, #4]
 8008bf0:	6a1b      	ldr	r3, [r3, #32]
 8008bf2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008bf4:	687b      	ldr	r3, [r7, #4]
 8008bf6:	685b      	ldr	r3, [r3, #4]
 8008bf8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8008bfa:	687b      	ldr	r3, [r7, #4]
 8008bfc:	699b      	ldr	r3, [r3, #24]
 8008bfe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8008c00:	68fb      	ldr	r3, [r7, #12]
 8008c02:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008c06:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8008c08:	68fb      	ldr	r3, [r7, #12]
 8008c0a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008c0e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008c10:	683b      	ldr	r3, [r7, #0]
 8008c12:	681b      	ldr	r3, [r3, #0]
 8008c14:	021b      	lsls	r3, r3, #8
 8008c16:	68fa      	ldr	r2, [r7, #12]
 8008c18:	4313      	orrs	r3, r2
 8008c1a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8008c1c:	697b      	ldr	r3, [r7, #20]
 8008c1e:	f023 0320 	bic.w	r3, r3, #32
 8008c22:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8008c24:	683b      	ldr	r3, [r7, #0]
 8008c26:	689b      	ldr	r3, [r3, #8]
 8008c28:	011b      	lsls	r3, r3, #4
 8008c2a:	697a      	ldr	r2, [r7, #20]
 8008c2c:	4313      	orrs	r3, r2
 8008c2e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8008c30:	687b      	ldr	r3, [r7, #4]
 8008c32:	4a22      	ldr	r2, [pc, #136]	; (8008cbc <TIM_OC2_SetConfig+0xe4>)
 8008c34:	4293      	cmp	r3, r2
 8008c36:	d003      	beq.n	8008c40 <TIM_OC2_SetConfig+0x68>
 8008c38:	687b      	ldr	r3, [r7, #4]
 8008c3a:	4a21      	ldr	r2, [pc, #132]	; (8008cc0 <TIM_OC2_SetConfig+0xe8>)
 8008c3c:	4293      	cmp	r3, r2
 8008c3e:	d10d      	bne.n	8008c5c <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8008c40:	697b      	ldr	r3, [r7, #20]
 8008c42:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008c46:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8008c48:	683b      	ldr	r3, [r7, #0]
 8008c4a:	68db      	ldr	r3, [r3, #12]
 8008c4c:	011b      	lsls	r3, r3, #4
 8008c4e:	697a      	ldr	r2, [r7, #20]
 8008c50:	4313      	orrs	r3, r2
 8008c52:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8008c54:	697b      	ldr	r3, [r7, #20]
 8008c56:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008c5a:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008c5c:	687b      	ldr	r3, [r7, #4]
 8008c5e:	4a17      	ldr	r2, [pc, #92]	; (8008cbc <TIM_OC2_SetConfig+0xe4>)
 8008c60:	4293      	cmp	r3, r2
 8008c62:	d003      	beq.n	8008c6c <TIM_OC2_SetConfig+0x94>
 8008c64:	687b      	ldr	r3, [r7, #4]
 8008c66:	4a16      	ldr	r2, [pc, #88]	; (8008cc0 <TIM_OC2_SetConfig+0xe8>)
 8008c68:	4293      	cmp	r3, r2
 8008c6a:	d113      	bne.n	8008c94 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8008c6c:	693b      	ldr	r3, [r7, #16]
 8008c6e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8008c72:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8008c74:	693b      	ldr	r3, [r7, #16]
 8008c76:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8008c7a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8008c7c:	683b      	ldr	r3, [r7, #0]
 8008c7e:	695b      	ldr	r3, [r3, #20]
 8008c80:	009b      	lsls	r3, r3, #2
 8008c82:	693a      	ldr	r2, [r7, #16]
 8008c84:	4313      	orrs	r3, r2
 8008c86:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8008c88:	683b      	ldr	r3, [r7, #0]
 8008c8a:	699b      	ldr	r3, [r3, #24]
 8008c8c:	009b      	lsls	r3, r3, #2
 8008c8e:	693a      	ldr	r2, [r7, #16]
 8008c90:	4313      	orrs	r3, r2
 8008c92:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008c94:	687b      	ldr	r3, [r7, #4]
 8008c96:	693a      	ldr	r2, [r7, #16]
 8008c98:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8008c9a:	687b      	ldr	r3, [r7, #4]
 8008c9c:	68fa      	ldr	r2, [r7, #12]
 8008c9e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8008ca0:	683b      	ldr	r3, [r7, #0]
 8008ca2:	685a      	ldr	r2, [r3, #4]
 8008ca4:	687b      	ldr	r3, [r7, #4]
 8008ca6:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008ca8:	687b      	ldr	r3, [r7, #4]
 8008caa:	697a      	ldr	r2, [r7, #20]
 8008cac:	621a      	str	r2, [r3, #32]
}
 8008cae:	bf00      	nop
 8008cb0:	371c      	adds	r7, #28
 8008cb2:	46bd      	mov	sp, r7
 8008cb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cb8:	4770      	bx	lr
 8008cba:	bf00      	nop
 8008cbc:	40010000 	.word	0x40010000
 8008cc0:	40010400 	.word	0x40010400

08008cc4 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8008cc4:	b480      	push	{r7}
 8008cc6:	b087      	sub	sp, #28
 8008cc8:	af00      	add	r7, sp, #0
 8008cca:	6078      	str	r0, [r7, #4]
 8008ccc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8008cce:	687b      	ldr	r3, [r7, #4]
 8008cd0:	6a1b      	ldr	r3, [r3, #32]
 8008cd2:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8008cd6:	687b      	ldr	r3, [r7, #4]
 8008cd8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008cda:	687b      	ldr	r3, [r7, #4]
 8008cdc:	6a1b      	ldr	r3, [r3, #32]
 8008cde:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008ce0:	687b      	ldr	r3, [r7, #4]
 8008ce2:	685b      	ldr	r3, [r3, #4]
 8008ce4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8008ce6:	687b      	ldr	r3, [r7, #4]
 8008ce8:	69db      	ldr	r3, [r3, #28]
 8008cea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8008cec:	68fb      	ldr	r3, [r7, #12]
 8008cee:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008cf2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8008cf4:	68fb      	ldr	r3, [r7, #12]
 8008cf6:	f023 0303 	bic.w	r3, r3, #3
 8008cfa:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008cfc:	683b      	ldr	r3, [r7, #0]
 8008cfe:	681b      	ldr	r3, [r3, #0]
 8008d00:	68fa      	ldr	r2, [r7, #12]
 8008d02:	4313      	orrs	r3, r2
 8008d04:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8008d06:	697b      	ldr	r3, [r7, #20]
 8008d08:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8008d0c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8008d0e:	683b      	ldr	r3, [r7, #0]
 8008d10:	689b      	ldr	r3, [r3, #8]
 8008d12:	021b      	lsls	r3, r3, #8
 8008d14:	697a      	ldr	r2, [r7, #20]
 8008d16:	4313      	orrs	r3, r2
 8008d18:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8008d1a:	687b      	ldr	r3, [r7, #4]
 8008d1c:	4a21      	ldr	r2, [pc, #132]	; (8008da4 <TIM_OC3_SetConfig+0xe0>)
 8008d1e:	4293      	cmp	r3, r2
 8008d20:	d003      	beq.n	8008d2a <TIM_OC3_SetConfig+0x66>
 8008d22:	687b      	ldr	r3, [r7, #4]
 8008d24:	4a20      	ldr	r2, [pc, #128]	; (8008da8 <TIM_OC3_SetConfig+0xe4>)
 8008d26:	4293      	cmp	r3, r2
 8008d28:	d10d      	bne.n	8008d46 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8008d2a:	697b      	ldr	r3, [r7, #20]
 8008d2c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8008d30:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8008d32:	683b      	ldr	r3, [r7, #0]
 8008d34:	68db      	ldr	r3, [r3, #12]
 8008d36:	021b      	lsls	r3, r3, #8
 8008d38:	697a      	ldr	r2, [r7, #20]
 8008d3a:	4313      	orrs	r3, r2
 8008d3c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8008d3e:	697b      	ldr	r3, [r7, #20]
 8008d40:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8008d44:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008d46:	687b      	ldr	r3, [r7, #4]
 8008d48:	4a16      	ldr	r2, [pc, #88]	; (8008da4 <TIM_OC3_SetConfig+0xe0>)
 8008d4a:	4293      	cmp	r3, r2
 8008d4c:	d003      	beq.n	8008d56 <TIM_OC3_SetConfig+0x92>
 8008d4e:	687b      	ldr	r3, [r7, #4]
 8008d50:	4a15      	ldr	r2, [pc, #84]	; (8008da8 <TIM_OC3_SetConfig+0xe4>)
 8008d52:	4293      	cmp	r3, r2
 8008d54:	d113      	bne.n	8008d7e <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8008d56:	693b      	ldr	r3, [r7, #16]
 8008d58:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8008d5c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8008d5e:	693b      	ldr	r3, [r7, #16]
 8008d60:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8008d64:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8008d66:	683b      	ldr	r3, [r7, #0]
 8008d68:	695b      	ldr	r3, [r3, #20]
 8008d6a:	011b      	lsls	r3, r3, #4
 8008d6c:	693a      	ldr	r2, [r7, #16]
 8008d6e:	4313      	orrs	r3, r2
 8008d70:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8008d72:	683b      	ldr	r3, [r7, #0]
 8008d74:	699b      	ldr	r3, [r3, #24]
 8008d76:	011b      	lsls	r3, r3, #4
 8008d78:	693a      	ldr	r2, [r7, #16]
 8008d7a:	4313      	orrs	r3, r2
 8008d7c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008d7e:	687b      	ldr	r3, [r7, #4]
 8008d80:	693a      	ldr	r2, [r7, #16]
 8008d82:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8008d84:	687b      	ldr	r3, [r7, #4]
 8008d86:	68fa      	ldr	r2, [r7, #12]
 8008d88:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8008d8a:	683b      	ldr	r3, [r7, #0]
 8008d8c:	685a      	ldr	r2, [r3, #4]
 8008d8e:	687b      	ldr	r3, [r7, #4]
 8008d90:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008d92:	687b      	ldr	r3, [r7, #4]
 8008d94:	697a      	ldr	r2, [r7, #20]
 8008d96:	621a      	str	r2, [r3, #32]
}
 8008d98:	bf00      	nop
 8008d9a:	371c      	adds	r7, #28
 8008d9c:	46bd      	mov	sp, r7
 8008d9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008da2:	4770      	bx	lr
 8008da4:	40010000 	.word	0x40010000
 8008da8:	40010400 	.word	0x40010400

08008dac <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8008dac:	b480      	push	{r7}
 8008dae:	b087      	sub	sp, #28
 8008db0:	af00      	add	r7, sp, #0
 8008db2:	6078      	str	r0, [r7, #4]
 8008db4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8008db6:	687b      	ldr	r3, [r7, #4]
 8008db8:	6a1b      	ldr	r3, [r3, #32]
 8008dba:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8008dbe:	687b      	ldr	r3, [r7, #4]
 8008dc0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008dc2:	687b      	ldr	r3, [r7, #4]
 8008dc4:	6a1b      	ldr	r3, [r3, #32]
 8008dc6:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008dc8:	687b      	ldr	r3, [r7, #4]
 8008dca:	685b      	ldr	r3, [r3, #4]
 8008dcc:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8008dce:	687b      	ldr	r3, [r7, #4]
 8008dd0:	69db      	ldr	r3, [r3, #28]
 8008dd2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8008dd4:	68fb      	ldr	r3, [r7, #12]
 8008dd6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008dda:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8008ddc:	68fb      	ldr	r3, [r7, #12]
 8008dde:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008de2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008de4:	683b      	ldr	r3, [r7, #0]
 8008de6:	681b      	ldr	r3, [r3, #0]
 8008de8:	021b      	lsls	r3, r3, #8
 8008dea:	68fa      	ldr	r2, [r7, #12]
 8008dec:	4313      	orrs	r3, r2
 8008dee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8008df0:	693b      	ldr	r3, [r7, #16]
 8008df2:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8008df6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8008df8:	683b      	ldr	r3, [r7, #0]
 8008dfa:	689b      	ldr	r3, [r3, #8]
 8008dfc:	031b      	lsls	r3, r3, #12
 8008dfe:	693a      	ldr	r2, [r7, #16]
 8008e00:	4313      	orrs	r3, r2
 8008e02:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008e04:	687b      	ldr	r3, [r7, #4]
 8008e06:	4a12      	ldr	r2, [pc, #72]	; (8008e50 <TIM_OC4_SetConfig+0xa4>)
 8008e08:	4293      	cmp	r3, r2
 8008e0a:	d003      	beq.n	8008e14 <TIM_OC4_SetConfig+0x68>
 8008e0c:	687b      	ldr	r3, [r7, #4]
 8008e0e:	4a11      	ldr	r2, [pc, #68]	; (8008e54 <TIM_OC4_SetConfig+0xa8>)
 8008e10:	4293      	cmp	r3, r2
 8008e12:	d109      	bne.n	8008e28 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8008e14:	697b      	ldr	r3, [r7, #20]
 8008e16:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8008e1a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8008e1c:	683b      	ldr	r3, [r7, #0]
 8008e1e:	695b      	ldr	r3, [r3, #20]
 8008e20:	019b      	lsls	r3, r3, #6
 8008e22:	697a      	ldr	r2, [r7, #20]
 8008e24:	4313      	orrs	r3, r2
 8008e26:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008e28:	687b      	ldr	r3, [r7, #4]
 8008e2a:	697a      	ldr	r2, [r7, #20]
 8008e2c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8008e2e:	687b      	ldr	r3, [r7, #4]
 8008e30:	68fa      	ldr	r2, [r7, #12]
 8008e32:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8008e34:	683b      	ldr	r3, [r7, #0]
 8008e36:	685a      	ldr	r2, [r3, #4]
 8008e38:	687b      	ldr	r3, [r7, #4]
 8008e3a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008e3c:	687b      	ldr	r3, [r7, #4]
 8008e3e:	693a      	ldr	r2, [r7, #16]
 8008e40:	621a      	str	r2, [r3, #32]
}
 8008e42:	bf00      	nop
 8008e44:	371c      	adds	r7, #28
 8008e46:	46bd      	mov	sp, r7
 8008e48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e4c:	4770      	bx	lr
 8008e4e:	bf00      	nop
 8008e50:	40010000 	.word	0x40010000
 8008e54:	40010400 	.word	0x40010400

08008e58 <TIM_SlaveTimer_SetConfig>:
  * @param  sSlaveConfig Slave timer configuration
  * @retval None
  */
static HAL_StatusTypeDef TIM_SlaveTimer_SetConfig(TIM_HandleTypeDef *htim,
                                                  TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 8008e58:	b580      	push	{r7, lr}
 8008e5a:	b086      	sub	sp, #24
 8008e5c:	af00      	add	r7, sp, #0
 8008e5e:	6078      	str	r0, [r7, #4]
 8008e60:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8008e62:	2300      	movs	r3, #0
 8008e64:	75fb      	strb	r3, [r7, #23]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8008e66:	687b      	ldr	r3, [r7, #4]
 8008e68:	681b      	ldr	r3, [r3, #0]
 8008e6a:	689b      	ldr	r3, [r3, #8]
 8008e6c:	613b      	str	r3, [r7, #16]

  /* Reset the Trigger Selection Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8008e6e:	693b      	ldr	r3, [r7, #16]
 8008e70:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008e74:	613b      	str	r3, [r7, #16]
  /* Set the Input Trigger source */
  tmpsmcr |= sSlaveConfig->InputTrigger;
 8008e76:	683b      	ldr	r3, [r7, #0]
 8008e78:	685b      	ldr	r3, [r3, #4]
 8008e7a:	693a      	ldr	r2, [r7, #16]
 8008e7c:	4313      	orrs	r3, r2
 8008e7e:	613b      	str	r3, [r7, #16]

  /* Reset the slave mode Bits */
  tmpsmcr &= ~TIM_SMCR_SMS;
 8008e80:	693b      	ldr	r3, [r7, #16]
 8008e82:	f023 0307 	bic.w	r3, r3, #7
 8008e86:	613b      	str	r3, [r7, #16]
  /* Set the slave mode */
  tmpsmcr |= sSlaveConfig->SlaveMode;
 8008e88:	683b      	ldr	r3, [r7, #0]
 8008e8a:	681b      	ldr	r3, [r3, #0]
 8008e8c:	693a      	ldr	r2, [r7, #16]
 8008e8e:	4313      	orrs	r3, r2
 8008e90:	613b      	str	r3, [r7, #16]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8008e92:	687b      	ldr	r3, [r7, #4]
 8008e94:	681b      	ldr	r3, [r3, #0]
 8008e96:	693a      	ldr	r2, [r7, #16]
 8008e98:	609a      	str	r2, [r3, #8]

  /* Configure the trigger prescaler, filter, and polarity */
  switch (sSlaveConfig->InputTrigger)
 8008e9a:	683b      	ldr	r3, [r7, #0]
 8008e9c:	685b      	ldr	r3, [r3, #4]
 8008e9e:	2b70      	cmp	r3, #112	; 0x70
 8008ea0:	d01a      	beq.n	8008ed8 <TIM_SlaveTimer_SetConfig+0x80>
 8008ea2:	2b70      	cmp	r3, #112	; 0x70
 8008ea4:	d860      	bhi.n	8008f68 <TIM_SlaveTimer_SetConfig+0x110>
 8008ea6:	2b60      	cmp	r3, #96	; 0x60
 8008ea8:	d054      	beq.n	8008f54 <TIM_SlaveTimer_SetConfig+0xfc>
 8008eaa:	2b60      	cmp	r3, #96	; 0x60
 8008eac:	d85c      	bhi.n	8008f68 <TIM_SlaveTimer_SetConfig+0x110>
 8008eae:	2b50      	cmp	r3, #80	; 0x50
 8008eb0:	d046      	beq.n	8008f40 <TIM_SlaveTimer_SetConfig+0xe8>
 8008eb2:	2b50      	cmp	r3, #80	; 0x50
 8008eb4:	d858      	bhi.n	8008f68 <TIM_SlaveTimer_SetConfig+0x110>
 8008eb6:	2b40      	cmp	r3, #64	; 0x40
 8008eb8:	d019      	beq.n	8008eee <TIM_SlaveTimer_SetConfig+0x96>
 8008eba:	2b40      	cmp	r3, #64	; 0x40
 8008ebc:	d854      	bhi.n	8008f68 <TIM_SlaveTimer_SetConfig+0x110>
 8008ebe:	2b30      	cmp	r3, #48	; 0x30
 8008ec0:	d055      	beq.n	8008f6e <TIM_SlaveTimer_SetConfig+0x116>
 8008ec2:	2b30      	cmp	r3, #48	; 0x30
 8008ec4:	d850      	bhi.n	8008f68 <TIM_SlaveTimer_SetConfig+0x110>
 8008ec6:	2b20      	cmp	r3, #32
 8008ec8:	d051      	beq.n	8008f6e <TIM_SlaveTimer_SetConfig+0x116>
 8008eca:	2b20      	cmp	r3, #32
 8008ecc:	d84c      	bhi.n	8008f68 <TIM_SlaveTimer_SetConfig+0x110>
 8008ece:	2b00      	cmp	r3, #0
 8008ed0:	d04d      	beq.n	8008f6e <TIM_SlaveTimer_SetConfig+0x116>
 8008ed2:	2b10      	cmp	r3, #16
 8008ed4:	d04b      	beq.n	8008f6e <TIM_SlaveTimer_SetConfig+0x116>
 8008ed6:	e047      	b.n	8008f68 <TIM_SlaveTimer_SetConfig+0x110>
      assert_param(IS_TIM_CLOCKSOURCE_ETRMODE1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPRESCALER(sSlaveConfig->TriggerPrescaler));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));
      /* Configure the ETR Trigger source */
      TIM_ETR_SetConfig(htim->Instance,
 8008ed8:	687b      	ldr	r3, [r7, #4]
 8008eda:	6818      	ldr	r0, [r3, #0]
 8008edc:	683b      	ldr	r3, [r7, #0]
 8008ede:	68d9      	ldr	r1, [r3, #12]
 8008ee0:	683b      	ldr	r3, [r7, #0]
 8008ee2:	689a      	ldr	r2, [r3, #8]
 8008ee4:	683b      	ldr	r3, [r7, #0]
 8008ee6:	691b      	ldr	r3, [r3, #16]
 8008ee8:	f000 f8a6 	bl	8009038 <TIM_ETR_SetConfig>
                        sSlaveConfig->TriggerPrescaler,
                        sSlaveConfig->TriggerPolarity,
                        sSlaveConfig->TriggerFilter);
      break;
 8008eec:	e040      	b.n	8008f70 <TIM_SlaveTimer_SetConfig+0x118>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      if (sSlaveConfig->SlaveMode == TIM_SLAVEMODE_GATED)
 8008eee:	683b      	ldr	r3, [r7, #0]
 8008ef0:	681b      	ldr	r3, [r3, #0]
 8008ef2:	2b05      	cmp	r3, #5
 8008ef4:	d101      	bne.n	8008efa <TIM_SlaveTimer_SetConfig+0xa2>
      {
        return HAL_ERROR;
 8008ef6:	2301      	movs	r3, #1
 8008ef8:	e03b      	b.n	8008f72 <TIM_SlaveTimer_SetConfig+0x11a>
      }

      /* Disable the Channel 1: Reset the CC1E Bit */
      tmpccer = htim->Instance->CCER;
 8008efa:	687b      	ldr	r3, [r7, #4]
 8008efc:	681b      	ldr	r3, [r3, #0]
 8008efe:	6a1b      	ldr	r3, [r3, #32]
 8008f00:	60fb      	str	r3, [r7, #12]
      htim->Instance->CCER &= ~TIM_CCER_CC1E;
 8008f02:	687b      	ldr	r3, [r7, #4]
 8008f04:	681b      	ldr	r3, [r3, #0]
 8008f06:	6a1a      	ldr	r2, [r3, #32]
 8008f08:	687b      	ldr	r3, [r7, #4]
 8008f0a:	681b      	ldr	r3, [r3, #0]
 8008f0c:	f022 0201 	bic.w	r2, r2, #1
 8008f10:	621a      	str	r2, [r3, #32]
      tmpccmr1 = htim->Instance->CCMR1;
 8008f12:	687b      	ldr	r3, [r7, #4]
 8008f14:	681b      	ldr	r3, [r3, #0]
 8008f16:	699b      	ldr	r3, [r3, #24]
 8008f18:	60bb      	str	r3, [r7, #8]

      /* Set the filter */
      tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8008f1a:	68bb      	ldr	r3, [r7, #8]
 8008f1c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8008f20:	60bb      	str	r3, [r7, #8]
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 8008f22:	683b      	ldr	r3, [r7, #0]
 8008f24:	691b      	ldr	r3, [r3, #16]
 8008f26:	011b      	lsls	r3, r3, #4
 8008f28:	68ba      	ldr	r2, [r7, #8]
 8008f2a:	4313      	orrs	r3, r2
 8008f2c:	60bb      	str	r3, [r7, #8]

      /* Write to TIMx CCMR1 and CCER registers */
      htim->Instance->CCMR1 = tmpccmr1;
 8008f2e:	687b      	ldr	r3, [r7, #4]
 8008f30:	681b      	ldr	r3, [r3, #0]
 8008f32:	68ba      	ldr	r2, [r7, #8]
 8008f34:	619a      	str	r2, [r3, #24]
      htim->Instance->CCER = tmpccer;
 8008f36:	687b      	ldr	r3, [r7, #4]
 8008f38:	681b      	ldr	r3, [r3, #0]
 8008f3a:	68fa      	ldr	r2, [r7, #12]
 8008f3c:	621a      	str	r2, [r3, #32]
      break;
 8008f3e:	e017      	b.n	8008f70 <TIM_SlaveTimer_SetConfig+0x118>
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI1 Filter and Polarity */
      TIM_TI1_ConfigInputStage(htim->Instance,
 8008f40:	687b      	ldr	r3, [r7, #4]
 8008f42:	6818      	ldr	r0, [r3, #0]
 8008f44:	683b      	ldr	r3, [r7, #0]
 8008f46:	6899      	ldr	r1, [r3, #8]
 8008f48:	683b      	ldr	r3, [r7, #0]
 8008f4a:	691b      	ldr	r3, [r3, #16]
 8008f4c:	461a      	mov	r2, r3
 8008f4e:	f000 f814 	bl	8008f7a <TIM_TI1_ConfigInputStage>
                               sSlaveConfig->TriggerPolarity,
                               sSlaveConfig->TriggerFilter);
      break;
 8008f52:	e00d      	b.n	8008f70 <TIM_SlaveTimer_SetConfig+0x118>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI2 Filter and Polarity */
      TIM_TI2_ConfigInputStage(htim->Instance,
 8008f54:	687b      	ldr	r3, [r7, #4]
 8008f56:	6818      	ldr	r0, [r3, #0]
 8008f58:	683b      	ldr	r3, [r7, #0]
 8008f5a:	6899      	ldr	r1, [r3, #8]
 8008f5c:	683b      	ldr	r3, [r7, #0]
 8008f5e:	691b      	ldr	r3, [r3, #16]
 8008f60:	461a      	mov	r2, r3
 8008f62:	f000 f839 	bl	8008fd8 <TIM_TI2_ConfigInputStage>
                               sSlaveConfig->TriggerPolarity,
                               sSlaveConfig->TriggerFilter);
      break;
 8008f66:	e003      	b.n	8008f70 <TIM_SlaveTimer_SetConfig+0x118>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      break;
    }

    default:
      status = HAL_ERROR;
 8008f68:	2301      	movs	r3, #1
 8008f6a:	75fb      	strb	r3, [r7, #23]
      break;
 8008f6c:	e000      	b.n	8008f70 <TIM_SlaveTimer_SetConfig+0x118>
      break;
 8008f6e:	bf00      	nop
  }

  return status;
 8008f70:	7dfb      	ldrb	r3, [r7, #23]
}
 8008f72:	4618      	mov	r0, r3
 8008f74:	3718      	adds	r7, #24
 8008f76:	46bd      	mov	sp, r7
 8008f78:	bd80      	pop	{r7, pc}

08008f7a <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8008f7a:	b480      	push	{r7}
 8008f7c:	b087      	sub	sp, #28
 8008f7e:	af00      	add	r7, sp, #0
 8008f80:	60f8      	str	r0, [r7, #12]
 8008f82:	60b9      	str	r1, [r7, #8]
 8008f84:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8008f86:	68fb      	ldr	r3, [r7, #12]
 8008f88:	6a1b      	ldr	r3, [r3, #32]
 8008f8a:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8008f8c:	68fb      	ldr	r3, [r7, #12]
 8008f8e:	6a1b      	ldr	r3, [r3, #32]
 8008f90:	f023 0201 	bic.w	r2, r3, #1
 8008f94:	68fb      	ldr	r3, [r7, #12]
 8008f96:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008f98:	68fb      	ldr	r3, [r7, #12]
 8008f9a:	699b      	ldr	r3, [r3, #24]
 8008f9c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8008f9e:	693b      	ldr	r3, [r7, #16]
 8008fa0:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8008fa4:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8008fa6:	687b      	ldr	r3, [r7, #4]
 8008fa8:	011b      	lsls	r3, r3, #4
 8008faa:	693a      	ldr	r2, [r7, #16]
 8008fac:	4313      	orrs	r3, r2
 8008fae:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8008fb0:	697b      	ldr	r3, [r7, #20]
 8008fb2:	f023 030a 	bic.w	r3, r3, #10
 8008fb6:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8008fb8:	697a      	ldr	r2, [r7, #20]
 8008fba:	68bb      	ldr	r3, [r7, #8]
 8008fbc:	4313      	orrs	r3, r2
 8008fbe:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8008fc0:	68fb      	ldr	r3, [r7, #12]
 8008fc2:	693a      	ldr	r2, [r7, #16]
 8008fc4:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008fc6:	68fb      	ldr	r3, [r7, #12]
 8008fc8:	697a      	ldr	r2, [r7, #20]
 8008fca:	621a      	str	r2, [r3, #32]
}
 8008fcc:	bf00      	nop
 8008fce:	371c      	adds	r7, #28
 8008fd0:	46bd      	mov	sp, r7
 8008fd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fd6:	4770      	bx	lr

08008fd8 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8008fd8:	b480      	push	{r7}
 8008fda:	b087      	sub	sp, #28
 8008fdc:	af00      	add	r7, sp, #0
 8008fde:	60f8      	str	r0, [r7, #12]
 8008fe0:	60b9      	str	r1, [r7, #8]
 8008fe2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8008fe4:	68fb      	ldr	r3, [r7, #12]
 8008fe6:	6a1b      	ldr	r3, [r3, #32]
 8008fe8:	f023 0210 	bic.w	r2, r3, #16
 8008fec:	68fb      	ldr	r3, [r7, #12]
 8008fee:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008ff0:	68fb      	ldr	r3, [r7, #12]
 8008ff2:	699b      	ldr	r3, [r3, #24]
 8008ff4:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8008ff6:	68fb      	ldr	r3, [r7, #12]
 8008ff8:	6a1b      	ldr	r3, [r3, #32]
 8008ffa:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8008ffc:	697b      	ldr	r3, [r7, #20]
 8008ffe:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8009002:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8009004:	687b      	ldr	r3, [r7, #4]
 8009006:	031b      	lsls	r3, r3, #12
 8009008:	697a      	ldr	r2, [r7, #20]
 800900a:	4313      	orrs	r3, r2
 800900c:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800900e:	693b      	ldr	r3, [r7, #16]
 8009010:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8009014:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8009016:	68bb      	ldr	r3, [r7, #8]
 8009018:	011b      	lsls	r3, r3, #4
 800901a:	693a      	ldr	r2, [r7, #16]
 800901c:	4313      	orrs	r3, r2
 800901e:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8009020:	68fb      	ldr	r3, [r7, #12]
 8009022:	697a      	ldr	r2, [r7, #20]
 8009024:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8009026:	68fb      	ldr	r3, [r7, #12]
 8009028:	693a      	ldr	r2, [r7, #16]
 800902a:	621a      	str	r2, [r3, #32]
}
 800902c:	bf00      	nop
 800902e:	371c      	adds	r7, #28
 8009030:	46bd      	mov	sp, r7
 8009032:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009036:	4770      	bx	lr

08009038 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8009038:	b480      	push	{r7}
 800903a:	b087      	sub	sp, #28
 800903c:	af00      	add	r7, sp, #0
 800903e:	60f8      	str	r0, [r7, #12]
 8009040:	60b9      	str	r1, [r7, #8]
 8009042:	607a      	str	r2, [r7, #4]
 8009044:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8009046:	68fb      	ldr	r3, [r7, #12]
 8009048:	689b      	ldr	r3, [r3, #8]
 800904a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800904c:	697b      	ldr	r3, [r7, #20]
 800904e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8009052:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8009054:	683b      	ldr	r3, [r7, #0]
 8009056:	021a      	lsls	r2, r3, #8
 8009058:	687b      	ldr	r3, [r7, #4]
 800905a:	431a      	orrs	r2, r3
 800905c:	68bb      	ldr	r3, [r7, #8]
 800905e:	4313      	orrs	r3, r2
 8009060:	697a      	ldr	r2, [r7, #20]
 8009062:	4313      	orrs	r3, r2
 8009064:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8009066:	68fb      	ldr	r3, [r7, #12]
 8009068:	697a      	ldr	r2, [r7, #20]
 800906a:	609a      	str	r2, [r3, #8]
}
 800906c:	bf00      	nop
 800906e:	371c      	adds	r7, #28
 8009070:	46bd      	mov	sp, r7
 8009072:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009076:	4770      	bx	lr

08009078 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8009078:	b480      	push	{r7}
 800907a:	b087      	sub	sp, #28
 800907c:	af00      	add	r7, sp, #0
 800907e:	60f8      	str	r0, [r7, #12]
 8009080:	60b9      	str	r1, [r7, #8]
 8009082:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8009084:	68bb      	ldr	r3, [r7, #8]
 8009086:	f003 031f 	and.w	r3, r3, #31
 800908a:	2201      	movs	r2, #1
 800908c:	fa02 f303 	lsl.w	r3, r2, r3
 8009090:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8009092:	68fb      	ldr	r3, [r7, #12]
 8009094:	6a1a      	ldr	r2, [r3, #32]
 8009096:	697b      	ldr	r3, [r7, #20]
 8009098:	43db      	mvns	r3, r3
 800909a:	401a      	ands	r2, r3
 800909c:	68fb      	ldr	r3, [r7, #12]
 800909e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80090a0:	68fb      	ldr	r3, [r7, #12]
 80090a2:	6a1a      	ldr	r2, [r3, #32]
 80090a4:	68bb      	ldr	r3, [r7, #8]
 80090a6:	f003 031f 	and.w	r3, r3, #31
 80090aa:	6879      	ldr	r1, [r7, #4]
 80090ac:	fa01 f303 	lsl.w	r3, r1, r3
 80090b0:	431a      	orrs	r2, r3
 80090b2:	68fb      	ldr	r3, [r7, #12]
 80090b4:	621a      	str	r2, [r3, #32]
}
 80090b6:	bf00      	nop
 80090b8:	371c      	adds	r7, #28
 80090ba:	46bd      	mov	sp, r7
 80090bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090c0:	4770      	bx	lr
	...

080090c4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80090c4:	b480      	push	{r7}
 80090c6:	b085      	sub	sp, #20
 80090c8:	af00      	add	r7, sp, #0
 80090ca:	6078      	str	r0, [r7, #4]
 80090cc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80090ce:	687b      	ldr	r3, [r7, #4]
 80090d0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80090d4:	2b01      	cmp	r3, #1
 80090d6:	d101      	bne.n	80090dc <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80090d8:	2302      	movs	r3, #2
 80090da:	e05a      	b.n	8009192 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 80090dc:	687b      	ldr	r3, [r7, #4]
 80090de:	2201      	movs	r2, #1
 80090e0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80090e4:	687b      	ldr	r3, [r7, #4]
 80090e6:	2202      	movs	r2, #2
 80090e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80090ec:	687b      	ldr	r3, [r7, #4]
 80090ee:	681b      	ldr	r3, [r3, #0]
 80090f0:	685b      	ldr	r3, [r3, #4]
 80090f2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80090f4:	687b      	ldr	r3, [r7, #4]
 80090f6:	681b      	ldr	r3, [r3, #0]
 80090f8:	689b      	ldr	r3, [r3, #8]
 80090fa:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80090fc:	68fb      	ldr	r3, [r7, #12]
 80090fe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009102:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8009104:	683b      	ldr	r3, [r7, #0]
 8009106:	681b      	ldr	r3, [r3, #0]
 8009108:	68fa      	ldr	r2, [r7, #12]
 800910a:	4313      	orrs	r3, r2
 800910c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800910e:	687b      	ldr	r3, [r7, #4]
 8009110:	681b      	ldr	r3, [r3, #0]
 8009112:	68fa      	ldr	r2, [r7, #12]
 8009114:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009116:	687b      	ldr	r3, [r7, #4]
 8009118:	681b      	ldr	r3, [r3, #0]
 800911a:	4a21      	ldr	r2, [pc, #132]	; (80091a0 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 800911c:	4293      	cmp	r3, r2
 800911e:	d022      	beq.n	8009166 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8009120:	687b      	ldr	r3, [r7, #4]
 8009122:	681b      	ldr	r3, [r3, #0]
 8009124:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009128:	d01d      	beq.n	8009166 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800912a:	687b      	ldr	r3, [r7, #4]
 800912c:	681b      	ldr	r3, [r3, #0]
 800912e:	4a1d      	ldr	r2, [pc, #116]	; (80091a4 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8009130:	4293      	cmp	r3, r2
 8009132:	d018      	beq.n	8009166 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8009134:	687b      	ldr	r3, [r7, #4]
 8009136:	681b      	ldr	r3, [r3, #0]
 8009138:	4a1b      	ldr	r2, [pc, #108]	; (80091a8 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800913a:	4293      	cmp	r3, r2
 800913c:	d013      	beq.n	8009166 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800913e:	687b      	ldr	r3, [r7, #4]
 8009140:	681b      	ldr	r3, [r3, #0]
 8009142:	4a1a      	ldr	r2, [pc, #104]	; (80091ac <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8009144:	4293      	cmp	r3, r2
 8009146:	d00e      	beq.n	8009166 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8009148:	687b      	ldr	r3, [r7, #4]
 800914a:	681b      	ldr	r3, [r3, #0]
 800914c:	4a18      	ldr	r2, [pc, #96]	; (80091b0 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800914e:	4293      	cmp	r3, r2
 8009150:	d009      	beq.n	8009166 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8009152:	687b      	ldr	r3, [r7, #4]
 8009154:	681b      	ldr	r3, [r3, #0]
 8009156:	4a17      	ldr	r2, [pc, #92]	; (80091b4 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8009158:	4293      	cmp	r3, r2
 800915a:	d004      	beq.n	8009166 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800915c:	687b      	ldr	r3, [r7, #4]
 800915e:	681b      	ldr	r3, [r3, #0]
 8009160:	4a15      	ldr	r2, [pc, #84]	; (80091b8 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8009162:	4293      	cmp	r3, r2
 8009164:	d10c      	bne.n	8009180 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8009166:	68bb      	ldr	r3, [r7, #8]
 8009168:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800916c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800916e:	683b      	ldr	r3, [r7, #0]
 8009170:	685b      	ldr	r3, [r3, #4]
 8009172:	68ba      	ldr	r2, [r7, #8]
 8009174:	4313      	orrs	r3, r2
 8009176:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8009178:	687b      	ldr	r3, [r7, #4]
 800917a:	681b      	ldr	r3, [r3, #0]
 800917c:	68ba      	ldr	r2, [r7, #8]
 800917e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8009180:	687b      	ldr	r3, [r7, #4]
 8009182:	2201      	movs	r2, #1
 8009184:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8009188:	687b      	ldr	r3, [r7, #4]
 800918a:	2200      	movs	r2, #0
 800918c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8009190:	2300      	movs	r3, #0
}
 8009192:	4618      	mov	r0, r3
 8009194:	3714      	adds	r7, #20
 8009196:	46bd      	mov	sp, r7
 8009198:	f85d 7b04 	ldr.w	r7, [sp], #4
 800919c:	4770      	bx	lr
 800919e:	bf00      	nop
 80091a0:	40010000 	.word	0x40010000
 80091a4:	40000400 	.word	0x40000400
 80091a8:	40000800 	.word	0x40000800
 80091ac:	40000c00 	.word	0x40000c00
 80091b0:	40010400 	.word	0x40010400
 80091b4:	40014000 	.word	0x40014000
 80091b8:	40001800 	.word	0x40001800

080091bc <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80091bc:	b480      	push	{r7}
 80091be:	b083      	sub	sp, #12
 80091c0:	af00      	add	r7, sp, #0
 80091c2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80091c4:	bf00      	nop
 80091c6:	370c      	adds	r7, #12
 80091c8:	46bd      	mov	sp, r7
 80091ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091ce:	4770      	bx	lr

080091d0 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80091d0:	b480      	push	{r7}
 80091d2:	b083      	sub	sp, #12
 80091d4:	af00      	add	r7, sp, #0
 80091d6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80091d8:	bf00      	nop
 80091da:	370c      	adds	r7, #12
 80091dc:	46bd      	mov	sp, r7
 80091de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091e2:	4770      	bx	lr

080091e4 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80091e4:	b580      	push	{r7, lr}
 80091e6:	b082      	sub	sp, #8
 80091e8:	af00      	add	r7, sp, #0
 80091ea:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80091ec:	687b      	ldr	r3, [r7, #4]
 80091ee:	2b00      	cmp	r3, #0
 80091f0:	d101      	bne.n	80091f6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80091f2:	2301      	movs	r3, #1
 80091f4:	e03f      	b.n	8009276 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80091f6:	687b      	ldr	r3, [r7, #4]
 80091f8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80091fc:	b2db      	uxtb	r3, r3
 80091fe:	2b00      	cmp	r3, #0
 8009200:	d106      	bne.n	8009210 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8009202:	687b      	ldr	r3, [r7, #4]
 8009204:	2200      	movs	r2, #0
 8009206:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800920a:	6878      	ldr	r0, [r7, #4]
 800920c:	f000 f837 	bl	800927e <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8009210:	687b      	ldr	r3, [r7, #4]
 8009212:	2224      	movs	r2, #36	; 0x24
 8009214:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8009218:	687b      	ldr	r3, [r7, #4]
 800921a:	681b      	ldr	r3, [r3, #0]
 800921c:	68da      	ldr	r2, [r3, #12]
 800921e:	687b      	ldr	r3, [r7, #4]
 8009220:	681b      	ldr	r3, [r3, #0]
 8009222:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8009226:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8009228:	6878      	ldr	r0, [r7, #4]
 800922a:	f000 f9d5 	bl	80095d8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800922e:	687b      	ldr	r3, [r7, #4]
 8009230:	681b      	ldr	r3, [r3, #0]
 8009232:	691a      	ldr	r2, [r3, #16]
 8009234:	687b      	ldr	r3, [r7, #4]
 8009236:	681b      	ldr	r3, [r3, #0]
 8009238:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800923c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800923e:	687b      	ldr	r3, [r7, #4]
 8009240:	681b      	ldr	r3, [r3, #0]
 8009242:	695a      	ldr	r2, [r3, #20]
 8009244:	687b      	ldr	r3, [r7, #4]
 8009246:	681b      	ldr	r3, [r3, #0]
 8009248:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800924c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800924e:	687b      	ldr	r3, [r7, #4]
 8009250:	681b      	ldr	r3, [r3, #0]
 8009252:	68da      	ldr	r2, [r3, #12]
 8009254:	687b      	ldr	r3, [r7, #4]
 8009256:	681b      	ldr	r3, [r3, #0]
 8009258:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800925c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800925e:	687b      	ldr	r3, [r7, #4]
 8009260:	2200      	movs	r2, #0
 8009262:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8009264:	687b      	ldr	r3, [r7, #4]
 8009266:	2220      	movs	r2, #32
 8009268:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 800926c:	687b      	ldr	r3, [r7, #4]
 800926e:	2220      	movs	r2, #32
 8009270:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8009274:	2300      	movs	r3, #0
}
 8009276:	4618      	mov	r0, r3
 8009278:	3708      	adds	r7, #8
 800927a:	46bd      	mov	sp, r7
 800927c:	bd80      	pop	{r7, pc}

0800927e <HAL_UART_MspInit>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_MspInit(UART_HandleTypeDef *huart)
{
 800927e:	b480      	push	{r7}
 8009280:	b083      	sub	sp, #12
 8009282:	af00      	add	r7, sp, #0
 8009284:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_MspInit could be implemented in the user file
   */
}
 8009286:	bf00      	nop
 8009288:	370c      	adds	r7, #12
 800928a:	46bd      	mov	sp, r7
 800928c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009290:	4770      	bx	lr

08009292 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8009292:	b580      	push	{r7, lr}
 8009294:	b08a      	sub	sp, #40	; 0x28
 8009296:	af02      	add	r7, sp, #8
 8009298:	60f8      	str	r0, [r7, #12]
 800929a:	60b9      	str	r1, [r7, #8]
 800929c:	603b      	str	r3, [r7, #0]
 800929e:	4613      	mov	r3, r2
 80092a0:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80092a2:	2300      	movs	r3, #0
 80092a4:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80092a6:	68fb      	ldr	r3, [r7, #12]
 80092a8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80092ac:	b2db      	uxtb	r3, r3
 80092ae:	2b20      	cmp	r3, #32
 80092b0:	d17c      	bne.n	80093ac <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 80092b2:	68bb      	ldr	r3, [r7, #8]
 80092b4:	2b00      	cmp	r3, #0
 80092b6:	d002      	beq.n	80092be <HAL_UART_Transmit+0x2c>
 80092b8:	88fb      	ldrh	r3, [r7, #6]
 80092ba:	2b00      	cmp	r3, #0
 80092bc:	d101      	bne.n	80092c2 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80092be:	2301      	movs	r3, #1
 80092c0:	e075      	b.n	80093ae <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80092c2:	68fb      	ldr	r3, [r7, #12]
 80092c4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80092c8:	2b01      	cmp	r3, #1
 80092ca:	d101      	bne.n	80092d0 <HAL_UART_Transmit+0x3e>
 80092cc:	2302      	movs	r3, #2
 80092ce:	e06e      	b.n	80093ae <HAL_UART_Transmit+0x11c>
 80092d0:	68fb      	ldr	r3, [r7, #12]
 80092d2:	2201      	movs	r2, #1
 80092d4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80092d8:	68fb      	ldr	r3, [r7, #12]
 80092da:	2200      	movs	r2, #0
 80092dc:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80092de:	68fb      	ldr	r3, [r7, #12]
 80092e0:	2221      	movs	r2, #33	; 0x21
 80092e2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80092e6:	f7fc fcad 	bl	8005c44 <HAL_GetTick>
 80092ea:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80092ec:	68fb      	ldr	r3, [r7, #12]
 80092ee:	88fa      	ldrh	r2, [r7, #6]
 80092f0:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80092f2:	68fb      	ldr	r3, [r7, #12]
 80092f4:	88fa      	ldrh	r2, [r7, #6]
 80092f6:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80092f8:	68fb      	ldr	r3, [r7, #12]
 80092fa:	689b      	ldr	r3, [r3, #8]
 80092fc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009300:	d108      	bne.n	8009314 <HAL_UART_Transmit+0x82>
 8009302:	68fb      	ldr	r3, [r7, #12]
 8009304:	691b      	ldr	r3, [r3, #16]
 8009306:	2b00      	cmp	r3, #0
 8009308:	d104      	bne.n	8009314 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 800930a:	2300      	movs	r3, #0
 800930c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800930e:	68bb      	ldr	r3, [r7, #8]
 8009310:	61bb      	str	r3, [r7, #24]
 8009312:	e003      	b.n	800931c <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8009314:	68bb      	ldr	r3, [r7, #8]
 8009316:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8009318:	2300      	movs	r3, #0
 800931a:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800931c:	68fb      	ldr	r3, [r7, #12]
 800931e:	2200      	movs	r2, #0
 8009320:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8009324:	e02a      	b.n	800937c <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8009326:	683b      	ldr	r3, [r7, #0]
 8009328:	9300      	str	r3, [sp, #0]
 800932a:	697b      	ldr	r3, [r7, #20]
 800932c:	2200      	movs	r2, #0
 800932e:	2180      	movs	r1, #128	; 0x80
 8009330:	68f8      	ldr	r0, [r7, #12]
 8009332:	f000 f8e2 	bl	80094fa <UART_WaitOnFlagUntilTimeout>
 8009336:	4603      	mov	r3, r0
 8009338:	2b00      	cmp	r3, #0
 800933a:	d001      	beq.n	8009340 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 800933c:	2303      	movs	r3, #3
 800933e:	e036      	b.n	80093ae <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8009340:	69fb      	ldr	r3, [r7, #28]
 8009342:	2b00      	cmp	r3, #0
 8009344:	d10b      	bne.n	800935e <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8009346:	69bb      	ldr	r3, [r7, #24]
 8009348:	881b      	ldrh	r3, [r3, #0]
 800934a:	461a      	mov	r2, r3
 800934c:	68fb      	ldr	r3, [r7, #12]
 800934e:	681b      	ldr	r3, [r3, #0]
 8009350:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8009354:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8009356:	69bb      	ldr	r3, [r7, #24]
 8009358:	3302      	adds	r3, #2
 800935a:	61bb      	str	r3, [r7, #24]
 800935c:	e007      	b.n	800936e <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800935e:	69fb      	ldr	r3, [r7, #28]
 8009360:	781a      	ldrb	r2, [r3, #0]
 8009362:	68fb      	ldr	r3, [r7, #12]
 8009364:	681b      	ldr	r3, [r3, #0]
 8009366:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8009368:	69fb      	ldr	r3, [r7, #28]
 800936a:	3301      	adds	r3, #1
 800936c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800936e:	68fb      	ldr	r3, [r7, #12]
 8009370:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8009372:	b29b      	uxth	r3, r3
 8009374:	3b01      	subs	r3, #1
 8009376:	b29a      	uxth	r2, r3
 8009378:	68fb      	ldr	r3, [r7, #12]
 800937a:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 800937c:	68fb      	ldr	r3, [r7, #12]
 800937e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8009380:	b29b      	uxth	r3, r3
 8009382:	2b00      	cmp	r3, #0
 8009384:	d1cf      	bne.n	8009326 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8009386:	683b      	ldr	r3, [r7, #0]
 8009388:	9300      	str	r3, [sp, #0]
 800938a:	697b      	ldr	r3, [r7, #20]
 800938c:	2200      	movs	r2, #0
 800938e:	2140      	movs	r1, #64	; 0x40
 8009390:	68f8      	ldr	r0, [r7, #12]
 8009392:	f000 f8b2 	bl	80094fa <UART_WaitOnFlagUntilTimeout>
 8009396:	4603      	mov	r3, r0
 8009398:	2b00      	cmp	r3, #0
 800939a:	d001      	beq.n	80093a0 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 800939c:	2303      	movs	r3, #3
 800939e:	e006      	b.n	80093ae <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80093a0:	68fb      	ldr	r3, [r7, #12]
 80093a2:	2220      	movs	r2, #32
 80093a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 80093a8:	2300      	movs	r3, #0
 80093aa:	e000      	b.n	80093ae <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 80093ac:	2302      	movs	r3, #2
  }
}
 80093ae:	4618      	mov	r0, r3
 80093b0:	3720      	adds	r7, #32
 80093b2:	46bd      	mov	sp, r7
 80093b4:	bd80      	pop	{r7, pc}

080093b6 <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80093b6:	b580      	push	{r7, lr}
 80093b8:	b08a      	sub	sp, #40	; 0x28
 80093ba:	af02      	add	r7, sp, #8
 80093bc:	60f8      	str	r0, [r7, #12]
 80093be:	60b9      	str	r1, [r7, #8]
 80093c0:	603b      	str	r3, [r7, #0]
 80093c2:	4613      	mov	r3, r2
 80093c4:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80093c6:	2300      	movs	r3, #0
 80093c8:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80093ca:	68fb      	ldr	r3, [r7, #12]
 80093cc:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80093d0:	b2db      	uxtb	r3, r3
 80093d2:	2b20      	cmp	r3, #32
 80093d4:	f040 808c 	bne.w	80094f0 <HAL_UART_Receive+0x13a>
  {
    if ((pData == NULL) || (Size == 0U))
 80093d8:	68bb      	ldr	r3, [r7, #8]
 80093da:	2b00      	cmp	r3, #0
 80093dc:	d002      	beq.n	80093e4 <HAL_UART_Receive+0x2e>
 80093de:	88fb      	ldrh	r3, [r7, #6]
 80093e0:	2b00      	cmp	r3, #0
 80093e2:	d101      	bne.n	80093e8 <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 80093e4:	2301      	movs	r3, #1
 80093e6:	e084      	b.n	80094f2 <HAL_UART_Receive+0x13c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80093e8:	68fb      	ldr	r3, [r7, #12]
 80093ea:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80093ee:	2b01      	cmp	r3, #1
 80093f0:	d101      	bne.n	80093f6 <HAL_UART_Receive+0x40>
 80093f2:	2302      	movs	r3, #2
 80093f4:	e07d      	b.n	80094f2 <HAL_UART_Receive+0x13c>
 80093f6:	68fb      	ldr	r3, [r7, #12]
 80093f8:	2201      	movs	r2, #1
 80093fa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80093fe:	68fb      	ldr	r3, [r7, #12]
 8009400:	2200      	movs	r2, #0
 8009402:	641a      	str	r2, [r3, #64]	; 0x40
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8009404:	68fb      	ldr	r3, [r7, #12]
 8009406:	2222      	movs	r2, #34	; 0x22
 8009408:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800940c:	68fb      	ldr	r3, [r7, #12]
 800940e:	2200      	movs	r2, #0
 8009410:	631a      	str	r2, [r3, #48]	; 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8009412:	f7fc fc17 	bl	8005c44 <HAL_GetTick>
 8009416:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 8009418:	68fb      	ldr	r3, [r7, #12]
 800941a:	88fa      	ldrh	r2, [r7, #6]
 800941c:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 800941e:	68fb      	ldr	r3, [r7, #12]
 8009420:	88fa      	ldrh	r2, [r7, #6]
 8009422:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8009424:	68fb      	ldr	r3, [r7, #12]
 8009426:	689b      	ldr	r3, [r3, #8]
 8009428:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800942c:	d108      	bne.n	8009440 <HAL_UART_Receive+0x8a>
 800942e:	68fb      	ldr	r3, [r7, #12]
 8009430:	691b      	ldr	r3, [r3, #16]
 8009432:	2b00      	cmp	r3, #0
 8009434:	d104      	bne.n	8009440 <HAL_UART_Receive+0x8a>
    {
      pdata8bits  = NULL;
 8009436:	2300      	movs	r3, #0
 8009438:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800943a:	68bb      	ldr	r3, [r7, #8]
 800943c:	61bb      	str	r3, [r7, #24]
 800943e:	e003      	b.n	8009448 <HAL_UART_Receive+0x92>
    }
    else
    {
      pdata8bits  = pData;
 8009440:	68bb      	ldr	r3, [r7, #8]
 8009442:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8009444:	2300      	movs	r3, #0
 8009446:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8009448:	68fb      	ldr	r3, [r7, #12]
 800944a:	2200      	movs	r2, #0
 800944c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 8009450:	e043      	b.n	80094da <HAL_UART_Receive+0x124>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8009452:	683b      	ldr	r3, [r7, #0]
 8009454:	9300      	str	r3, [sp, #0]
 8009456:	697b      	ldr	r3, [r7, #20]
 8009458:	2200      	movs	r2, #0
 800945a:	2120      	movs	r1, #32
 800945c:	68f8      	ldr	r0, [r7, #12]
 800945e:	f000 f84c 	bl	80094fa <UART_WaitOnFlagUntilTimeout>
 8009462:	4603      	mov	r3, r0
 8009464:	2b00      	cmp	r3, #0
 8009466:	d001      	beq.n	800946c <HAL_UART_Receive+0xb6>
      {
        return HAL_TIMEOUT;
 8009468:	2303      	movs	r3, #3
 800946a:	e042      	b.n	80094f2 <HAL_UART_Receive+0x13c>
      }
      if (pdata8bits == NULL)
 800946c:	69fb      	ldr	r3, [r7, #28]
 800946e:	2b00      	cmp	r3, #0
 8009470:	d10c      	bne.n	800948c <HAL_UART_Receive+0xd6>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 8009472:	68fb      	ldr	r3, [r7, #12]
 8009474:	681b      	ldr	r3, [r3, #0]
 8009476:	685b      	ldr	r3, [r3, #4]
 8009478:	b29b      	uxth	r3, r3
 800947a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800947e:	b29a      	uxth	r2, r3
 8009480:	69bb      	ldr	r3, [r7, #24]
 8009482:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8009484:	69bb      	ldr	r3, [r7, #24]
 8009486:	3302      	adds	r3, #2
 8009488:	61bb      	str	r3, [r7, #24]
 800948a:	e01f      	b.n	80094cc <HAL_UART_Receive+0x116>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800948c:	68fb      	ldr	r3, [r7, #12]
 800948e:	689b      	ldr	r3, [r3, #8]
 8009490:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009494:	d007      	beq.n	80094a6 <HAL_UART_Receive+0xf0>
 8009496:	68fb      	ldr	r3, [r7, #12]
 8009498:	689b      	ldr	r3, [r3, #8]
 800949a:	2b00      	cmp	r3, #0
 800949c:	d10a      	bne.n	80094b4 <HAL_UART_Receive+0xfe>
 800949e:	68fb      	ldr	r3, [r7, #12]
 80094a0:	691b      	ldr	r3, [r3, #16]
 80094a2:	2b00      	cmp	r3, #0
 80094a4:	d106      	bne.n	80094b4 <HAL_UART_Receive+0xfe>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80094a6:	68fb      	ldr	r3, [r7, #12]
 80094a8:	681b      	ldr	r3, [r3, #0]
 80094aa:	685b      	ldr	r3, [r3, #4]
 80094ac:	b2da      	uxtb	r2, r3
 80094ae:	69fb      	ldr	r3, [r7, #28]
 80094b0:	701a      	strb	r2, [r3, #0]
 80094b2:	e008      	b.n	80094c6 <HAL_UART_Receive+0x110>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80094b4:	68fb      	ldr	r3, [r7, #12]
 80094b6:	681b      	ldr	r3, [r3, #0]
 80094b8:	685b      	ldr	r3, [r3, #4]
 80094ba:	b2db      	uxtb	r3, r3
 80094bc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80094c0:	b2da      	uxtb	r2, r3
 80094c2:	69fb      	ldr	r3, [r7, #28]
 80094c4:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 80094c6:	69fb      	ldr	r3, [r7, #28]
 80094c8:	3301      	adds	r3, #1
 80094ca:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 80094cc:	68fb      	ldr	r3, [r7, #12]
 80094ce:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80094d0:	b29b      	uxth	r3, r3
 80094d2:	3b01      	subs	r3, #1
 80094d4:	b29a      	uxth	r2, r3
 80094d6:	68fb      	ldr	r3, [r7, #12]
 80094d8:	85da      	strh	r2, [r3, #46]	; 0x2e
    while (huart->RxXferCount > 0U)
 80094da:	68fb      	ldr	r3, [r7, #12]
 80094dc:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80094de:	b29b      	uxth	r3, r3
 80094e0:	2b00      	cmp	r3, #0
 80094e2:	d1b6      	bne.n	8009452 <HAL_UART_Receive+0x9c>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80094e4:	68fb      	ldr	r3, [r7, #12]
 80094e6:	2220      	movs	r2, #32
 80094e8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    return HAL_OK;
 80094ec:	2300      	movs	r3, #0
 80094ee:	e000      	b.n	80094f2 <HAL_UART_Receive+0x13c>
  }
  else
  {
    return HAL_BUSY;
 80094f0:	2302      	movs	r3, #2
  }
}
 80094f2:	4618      	mov	r0, r3
 80094f4:	3720      	adds	r7, #32
 80094f6:	46bd      	mov	sp, r7
 80094f8:	bd80      	pop	{r7, pc}

080094fa <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80094fa:	b580      	push	{r7, lr}
 80094fc:	b090      	sub	sp, #64	; 0x40
 80094fe:	af00      	add	r7, sp, #0
 8009500:	60f8      	str	r0, [r7, #12]
 8009502:	60b9      	str	r1, [r7, #8]
 8009504:	603b      	str	r3, [r7, #0]
 8009506:	4613      	mov	r3, r2
 8009508:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800950a:	e050      	b.n	80095ae <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800950c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800950e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009512:	d04c      	beq.n	80095ae <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8009514:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009516:	2b00      	cmp	r3, #0
 8009518:	d007      	beq.n	800952a <UART_WaitOnFlagUntilTimeout+0x30>
 800951a:	f7fc fb93 	bl	8005c44 <HAL_GetTick>
 800951e:	4602      	mov	r2, r0
 8009520:	683b      	ldr	r3, [r7, #0]
 8009522:	1ad3      	subs	r3, r2, r3
 8009524:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8009526:	429a      	cmp	r2, r3
 8009528:	d241      	bcs.n	80095ae <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800952a:	68fb      	ldr	r3, [r7, #12]
 800952c:	681b      	ldr	r3, [r3, #0]
 800952e:	330c      	adds	r3, #12
 8009530:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009532:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009534:	e853 3f00 	ldrex	r3, [r3]
 8009538:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800953a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800953c:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8009540:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009542:	68fb      	ldr	r3, [r7, #12]
 8009544:	681b      	ldr	r3, [r3, #0]
 8009546:	330c      	adds	r3, #12
 8009548:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800954a:	637a      	str	r2, [r7, #52]	; 0x34
 800954c:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800954e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8009550:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8009552:	e841 2300 	strex	r3, r2, [r1]
 8009556:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8009558:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800955a:	2b00      	cmp	r3, #0
 800955c:	d1e5      	bne.n	800952a <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800955e:	68fb      	ldr	r3, [r7, #12]
 8009560:	681b      	ldr	r3, [r3, #0]
 8009562:	3314      	adds	r3, #20
 8009564:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009566:	697b      	ldr	r3, [r7, #20]
 8009568:	e853 3f00 	ldrex	r3, [r3]
 800956c:	613b      	str	r3, [r7, #16]
   return(result);
 800956e:	693b      	ldr	r3, [r7, #16]
 8009570:	f023 0301 	bic.w	r3, r3, #1
 8009574:	63bb      	str	r3, [r7, #56]	; 0x38
 8009576:	68fb      	ldr	r3, [r7, #12]
 8009578:	681b      	ldr	r3, [r3, #0]
 800957a:	3314      	adds	r3, #20
 800957c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800957e:	623a      	str	r2, [r7, #32]
 8009580:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009582:	69f9      	ldr	r1, [r7, #28]
 8009584:	6a3a      	ldr	r2, [r7, #32]
 8009586:	e841 2300 	strex	r3, r2, [r1]
 800958a:	61bb      	str	r3, [r7, #24]
   return(result);
 800958c:	69bb      	ldr	r3, [r7, #24]
 800958e:	2b00      	cmp	r3, #0
 8009590:	d1e5      	bne.n	800955e <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8009592:	68fb      	ldr	r3, [r7, #12]
 8009594:	2220      	movs	r2, #32
 8009596:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 800959a:	68fb      	ldr	r3, [r7, #12]
 800959c:	2220      	movs	r2, #32
 800959e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80095a2:	68fb      	ldr	r3, [r7, #12]
 80095a4:	2200      	movs	r2, #0
 80095a6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 80095aa:	2303      	movs	r3, #3
 80095ac:	e00f      	b.n	80095ce <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80095ae:	68fb      	ldr	r3, [r7, #12]
 80095b0:	681b      	ldr	r3, [r3, #0]
 80095b2:	681a      	ldr	r2, [r3, #0]
 80095b4:	68bb      	ldr	r3, [r7, #8]
 80095b6:	4013      	ands	r3, r2
 80095b8:	68ba      	ldr	r2, [r7, #8]
 80095ba:	429a      	cmp	r2, r3
 80095bc:	bf0c      	ite	eq
 80095be:	2301      	moveq	r3, #1
 80095c0:	2300      	movne	r3, #0
 80095c2:	b2db      	uxtb	r3, r3
 80095c4:	461a      	mov	r2, r3
 80095c6:	79fb      	ldrb	r3, [r7, #7]
 80095c8:	429a      	cmp	r2, r3
 80095ca:	d09f      	beq.n	800950c <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80095cc:	2300      	movs	r3, #0
}
 80095ce:	4618      	mov	r0, r3
 80095d0:	3740      	adds	r7, #64	; 0x40
 80095d2:	46bd      	mov	sp, r7
 80095d4:	bd80      	pop	{r7, pc}
	...

080095d8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80095d8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80095dc:	b0c0      	sub	sp, #256	; 0x100
 80095de:	af00      	add	r7, sp, #0
 80095e0:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80095e4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80095e8:	681b      	ldr	r3, [r3, #0]
 80095ea:	691b      	ldr	r3, [r3, #16]
 80095ec:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80095f0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80095f4:	68d9      	ldr	r1, [r3, #12]
 80095f6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80095fa:	681a      	ldr	r2, [r3, #0]
 80095fc:	ea40 0301 	orr.w	r3, r0, r1
 8009600:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8009602:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009606:	689a      	ldr	r2, [r3, #8]
 8009608:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800960c:	691b      	ldr	r3, [r3, #16]
 800960e:	431a      	orrs	r2, r3
 8009610:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009614:	695b      	ldr	r3, [r3, #20]
 8009616:	431a      	orrs	r2, r3
 8009618:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800961c:	69db      	ldr	r3, [r3, #28]
 800961e:	4313      	orrs	r3, r2
 8009620:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8009624:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009628:	681b      	ldr	r3, [r3, #0]
 800962a:	68db      	ldr	r3, [r3, #12]
 800962c:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8009630:	f021 010c 	bic.w	r1, r1, #12
 8009634:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009638:	681a      	ldr	r2, [r3, #0]
 800963a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800963e:	430b      	orrs	r3, r1
 8009640:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8009642:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009646:	681b      	ldr	r3, [r3, #0]
 8009648:	695b      	ldr	r3, [r3, #20]
 800964a:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800964e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009652:	6999      	ldr	r1, [r3, #24]
 8009654:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009658:	681a      	ldr	r2, [r3, #0]
 800965a:	ea40 0301 	orr.w	r3, r0, r1
 800965e:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8009660:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009664:	681a      	ldr	r2, [r3, #0]
 8009666:	4b8f      	ldr	r3, [pc, #572]	; (80098a4 <UART_SetConfig+0x2cc>)
 8009668:	429a      	cmp	r2, r3
 800966a:	d005      	beq.n	8009678 <UART_SetConfig+0xa0>
 800966c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009670:	681a      	ldr	r2, [r3, #0]
 8009672:	4b8d      	ldr	r3, [pc, #564]	; (80098a8 <UART_SetConfig+0x2d0>)
 8009674:	429a      	cmp	r2, r3
 8009676:	d104      	bne.n	8009682 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8009678:	f7fe f832 	bl	80076e0 <HAL_RCC_GetPCLK2Freq>
 800967c:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8009680:	e003      	b.n	800968a <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8009682:	f7fe f819 	bl	80076b8 <HAL_RCC_GetPCLK1Freq>
 8009686:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800968a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800968e:	69db      	ldr	r3, [r3, #28]
 8009690:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009694:	f040 810c 	bne.w	80098b0 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8009698:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800969c:	2200      	movs	r2, #0
 800969e:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80096a2:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 80096a6:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 80096aa:	4622      	mov	r2, r4
 80096ac:	462b      	mov	r3, r5
 80096ae:	1891      	adds	r1, r2, r2
 80096b0:	65b9      	str	r1, [r7, #88]	; 0x58
 80096b2:	415b      	adcs	r3, r3
 80096b4:	65fb      	str	r3, [r7, #92]	; 0x5c
 80096b6:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80096ba:	4621      	mov	r1, r4
 80096bc:	eb12 0801 	adds.w	r8, r2, r1
 80096c0:	4629      	mov	r1, r5
 80096c2:	eb43 0901 	adc.w	r9, r3, r1
 80096c6:	f04f 0200 	mov.w	r2, #0
 80096ca:	f04f 0300 	mov.w	r3, #0
 80096ce:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80096d2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80096d6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80096da:	4690      	mov	r8, r2
 80096dc:	4699      	mov	r9, r3
 80096de:	4623      	mov	r3, r4
 80096e0:	eb18 0303 	adds.w	r3, r8, r3
 80096e4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80096e8:	462b      	mov	r3, r5
 80096ea:	eb49 0303 	adc.w	r3, r9, r3
 80096ee:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80096f2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80096f6:	685b      	ldr	r3, [r3, #4]
 80096f8:	2200      	movs	r2, #0
 80096fa:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80096fe:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8009702:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8009706:	460b      	mov	r3, r1
 8009708:	18db      	adds	r3, r3, r3
 800970a:	653b      	str	r3, [r7, #80]	; 0x50
 800970c:	4613      	mov	r3, r2
 800970e:	eb42 0303 	adc.w	r3, r2, r3
 8009712:	657b      	str	r3, [r7, #84]	; 0x54
 8009714:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8009718:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 800971c:	f7f7 f9de 	bl	8000adc <__aeabi_uldivmod>
 8009720:	4602      	mov	r2, r0
 8009722:	460b      	mov	r3, r1
 8009724:	4b61      	ldr	r3, [pc, #388]	; (80098ac <UART_SetConfig+0x2d4>)
 8009726:	fba3 2302 	umull	r2, r3, r3, r2
 800972a:	095b      	lsrs	r3, r3, #5
 800972c:	011c      	lsls	r4, r3, #4
 800972e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8009732:	2200      	movs	r2, #0
 8009734:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8009738:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 800973c:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8009740:	4642      	mov	r2, r8
 8009742:	464b      	mov	r3, r9
 8009744:	1891      	adds	r1, r2, r2
 8009746:	64b9      	str	r1, [r7, #72]	; 0x48
 8009748:	415b      	adcs	r3, r3
 800974a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800974c:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8009750:	4641      	mov	r1, r8
 8009752:	eb12 0a01 	adds.w	sl, r2, r1
 8009756:	4649      	mov	r1, r9
 8009758:	eb43 0b01 	adc.w	fp, r3, r1
 800975c:	f04f 0200 	mov.w	r2, #0
 8009760:	f04f 0300 	mov.w	r3, #0
 8009764:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8009768:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800976c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8009770:	4692      	mov	sl, r2
 8009772:	469b      	mov	fp, r3
 8009774:	4643      	mov	r3, r8
 8009776:	eb1a 0303 	adds.w	r3, sl, r3
 800977a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800977e:	464b      	mov	r3, r9
 8009780:	eb4b 0303 	adc.w	r3, fp, r3
 8009784:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8009788:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800978c:	685b      	ldr	r3, [r3, #4]
 800978e:	2200      	movs	r2, #0
 8009790:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8009794:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8009798:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 800979c:	460b      	mov	r3, r1
 800979e:	18db      	adds	r3, r3, r3
 80097a0:	643b      	str	r3, [r7, #64]	; 0x40
 80097a2:	4613      	mov	r3, r2
 80097a4:	eb42 0303 	adc.w	r3, r2, r3
 80097a8:	647b      	str	r3, [r7, #68]	; 0x44
 80097aa:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80097ae:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 80097b2:	f7f7 f993 	bl	8000adc <__aeabi_uldivmod>
 80097b6:	4602      	mov	r2, r0
 80097b8:	460b      	mov	r3, r1
 80097ba:	4611      	mov	r1, r2
 80097bc:	4b3b      	ldr	r3, [pc, #236]	; (80098ac <UART_SetConfig+0x2d4>)
 80097be:	fba3 2301 	umull	r2, r3, r3, r1
 80097c2:	095b      	lsrs	r3, r3, #5
 80097c4:	2264      	movs	r2, #100	; 0x64
 80097c6:	fb02 f303 	mul.w	r3, r2, r3
 80097ca:	1acb      	subs	r3, r1, r3
 80097cc:	00db      	lsls	r3, r3, #3
 80097ce:	f103 0232 	add.w	r2, r3, #50	; 0x32
 80097d2:	4b36      	ldr	r3, [pc, #216]	; (80098ac <UART_SetConfig+0x2d4>)
 80097d4:	fba3 2302 	umull	r2, r3, r3, r2
 80097d8:	095b      	lsrs	r3, r3, #5
 80097da:	005b      	lsls	r3, r3, #1
 80097dc:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80097e0:	441c      	add	r4, r3
 80097e2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80097e6:	2200      	movs	r2, #0
 80097e8:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80097ec:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 80097f0:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 80097f4:	4642      	mov	r2, r8
 80097f6:	464b      	mov	r3, r9
 80097f8:	1891      	adds	r1, r2, r2
 80097fa:	63b9      	str	r1, [r7, #56]	; 0x38
 80097fc:	415b      	adcs	r3, r3
 80097fe:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009800:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8009804:	4641      	mov	r1, r8
 8009806:	1851      	adds	r1, r2, r1
 8009808:	6339      	str	r1, [r7, #48]	; 0x30
 800980a:	4649      	mov	r1, r9
 800980c:	414b      	adcs	r3, r1
 800980e:	637b      	str	r3, [r7, #52]	; 0x34
 8009810:	f04f 0200 	mov.w	r2, #0
 8009814:	f04f 0300 	mov.w	r3, #0
 8009818:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 800981c:	4659      	mov	r1, fp
 800981e:	00cb      	lsls	r3, r1, #3
 8009820:	4651      	mov	r1, sl
 8009822:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8009826:	4651      	mov	r1, sl
 8009828:	00ca      	lsls	r2, r1, #3
 800982a:	4610      	mov	r0, r2
 800982c:	4619      	mov	r1, r3
 800982e:	4603      	mov	r3, r0
 8009830:	4642      	mov	r2, r8
 8009832:	189b      	adds	r3, r3, r2
 8009834:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8009838:	464b      	mov	r3, r9
 800983a:	460a      	mov	r2, r1
 800983c:	eb42 0303 	adc.w	r3, r2, r3
 8009840:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8009844:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009848:	685b      	ldr	r3, [r3, #4]
 800984a:	2200      	movs	r2, #0
 800984c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8009850:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8009854:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8009858:	460b      	mov	r3, r1
 800985a:	18db      	adds	r3, r3, r3
 800985c:	62bb      	str	r3, [r7, #40]	; 0x28
 800985e:	4613      	mov	r3, r2
 8009860:	eb42 0303 	adc.w	r3, r2, r3
 8009864:	62fb      	str	r3, [r7, #44]	; 0x2c
 8009866:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800986a:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 800986e:	f7f7 f935 	bl	8000adc <__aeabi_uldivmod>
 8009872:	4602      	mov	r2, r0
 8009874:	460b      	mov	r3, r1
 8009876:	4b0d      	ldr	r3, [pc, #52]	; (80098ac <UART_SetConfig+0x2d4>)
 8009878:	fba3 1302 	umull	r1, r3, r3, r2
 800987c:	095b      	lsrs	r3, r3, #5
 800987e:	2164      	movs	r1, #100	; 0x64
 8009880:	fb01 f303 	mul.w	r3, r1, r3
 8009884:	1ad3      	subs	r3, r2, r3
 8009886:	00db      	lsls	r3, r3, #3
 8009888:	3332      	adds	r3, #50	; 0x32
 800988a:	4a08      	ldr	r2, [pc, #32]	; (80098ac <UART_SetConfig+0x2d4>)
 800988c:	fba2 2303 	umull	r2, r3, r2, r3
 8009890:	095b      	lsrs	r3, r3, #5
 8009892:	f003 0207 	and.w	r2, r3, #7
 8009896:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800989a:	681b      	ldr	r3, [r3, #0]
 800989c:	4422      	add	r2, r4
 800989e:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80098a0:	e106      	b.n	8009ab0 <UART_SetConfig+0x4d8>
 80098a2:	bf00      	nop
 80098a4:	40011000 	.word	0x40011000
 80098a8:	40011400 	.word	0x40011400
 80098ac:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80098b0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80098b4:	2200      	movs	r2, #0
 80098b6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80098ba:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 80098be:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 80098c2:	4642      	mov	r2, r8
 80098c4:	464b      	mov	r3, r9
 80098c6:	1891      	adds	r1, r2, r2
 80098c8:	6239      	str	r1, [r7, #32]
 80098ca:	415b      	adcs	r3, r3
 80098cc:	627b      	str	r3, [r7, #36]	; 0x24
 80098ce:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80098d2:	4641      	mov	r1, r8
 80098d4:	1854      	adds	r4, r2, r1
 80098d6:	4649      	mov	r1, r9
 80098d8:	eb43 0501 	adc.w	r5, r3, r1
 80098dc:	f04f 0200 	mov.w	r2, #0
 80098e0:	f04f 0300 	mov.w	r3, #0
 80098e4:	00eb      	lsls	r3, r5, #3
 80098e6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80098ea:	00e2      	lsls	r2, r4, #3
 80098ec:	4614      	mov	r4, r2
 80098ee:	461d      	mov	r5, r3
 80098f0:	4643      	mov	r3, r8
 80098f2:	18e3      	adds	r3, r4, r3
 80098f4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80098f8:	464b      	mov	r3, r9
 80098fa:	eb45 0303 	adc.w	r3, r5, r3
 80098fe:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8009902:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009906:	685b      	ldr	r3, [r3, #4]
 8009908:	2200      	movs	r2, #0
 800990a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800990e:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8009912:	f04f 0200 	mov.w	r2, #0
 8009916:	f04f 0300 	mov.w	r3, #0
 800991a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800991e:	4629      	mov	r1, r5
 8009920:	008b      	lsls	r3, r1, #2
 8009922:	4621      	mov	r1, r4
 8009924:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8009928:	4621      	mov	r1, r4
 800992a:	008a      	lsls	r2, r1, #2
 800992c:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8009930:	f7f7 f8d4 	bl	8000adc <__aeabi_uldivmod>
 8009934:	4602      	mov	r2, r0
 8009936:	460b      	mov	r3, r1
 8009938:	4b60      	ldr	r3, [pc, #384]	; (8009abc <UART_SetConfig+0x4e4>)
 800993a:	fba3 2302 	umull	r2, r3, r3, r2
 800993e:	095b      	lsrs	r3, r3, #5
 8009940:	011c      	lsls	r4, r3, #4
 8009942:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8009946:	2200      	movs	r2, #0
 8009948:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800994c:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8009950:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8009954:	4642      	mov	r2, r8
 8009956:	464b      	mov	r3, r9
 8009958:	1891      	adds	r1, r2, r2
 800995a:	61b9      	str	r1, [r7, #24]
 800995c:	415b      	adcs	r3, r3
 800995e:	61fb      	str	r3, [r7, #28]
 8009960:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8009964:	4641      	mov	r1, r8
 8009966:	1851      	adds	r1, r2, r1
 8009968:	6139      	str	r1, [r7, #16]
 800996a:	4649      	mov	r1, r9
 800996c:	414b      	adcs	r3, r1
 800996e:	617b      	str	r3, [r7, #20]
 8009970:	f04f 0200 	mov.w	r2, #0
 8009974:	f04f 0300 	mov.w	r3, #0
 8009978:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800997c:	4659      	mov	r1, fp
 800997e:	00cb      	lsls	r3, r1, #3
 8009980:	4651      	mov	r1, sl
 8009982:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8009986:	4651      	mov	r1, sl
 8009988:	00ca      	lsls	r2, r1, #3
 800998a:	4610      	mov	r0, r2
 800998c:	4619      	mov	r1, r3
 800998e:	4603      	mov	r3, r0
 8009990:	4642      	mov	r2, r8
 8009992:	189b      	adds	r3, r3, r2
 8009994:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8009998:	464b      	mov	r3, r9
 800999a:	460a      	mov	r2, r1
 800999c:	eb42 0303 	adc.w	r3, r2, r3
 80099a0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80099a4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80099a8:	685b      	ldr	r3, [r3, #4]
 80099aa:	2200      	movs	r2, #0
 80099ac:	67bb      	str	r3, [r7, #120]	; 0x78
 80099ae:	67fa      	str	r2, [r7, #124]	; 0x7c
 80099b0:	f04f 0200 	mov.w	r2, #0
 80099b4:	f04f 0300 	mov.w	r3, #0
 80099b8:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 80099bc:	4649      	mov	r1, r9
 80099be:	008b      	lsls	r3, r1, #2
 80099c0:	4641      	mov	r1, r8
 80099c2:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80099c6:	4641      	mov	r1, r8
 80099c8:	008a      	lsls	r2, r1, #2
 80099ca:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 80099ce:	f7f7 f885 	bl	8000adc <__aeabi_uldivmod>
 80099d2:	4602      	mov	r2, r0
 80099d4:	460b      	mov	r3, r1
 80099d6:	4611      	mov	r1, r2
 80099d8:	4b38      	ldr	r3, [pc, #224]	; (8009abc <UART_SetConfig+0x4e4>)
 80099da:	fba3 2301 	umull	r2, r3, r3, r1
 80099de:	095b      	lsrs	r3, r3, #5
 80099e0:	2264      	movs	r2, #100	; 0x64
 80099e2:	fb02 f303 	mul.w	r3, r2, r3
 80099e6:	1acb      	subs	r3, r1, r3
 80099e8:	011b      	lsls	r3, r3, #4
 80099ea:	3332      	adds	r3, #50	; 0x32
 80099ec:	4a33      	ldr	r2, [pc, #204]	; (8009abc <UART_SetConfig+0x4e4>)
 80099ee:	fba2 2303 	umull	r2, r3, r2, r3
 80099f2:	095b      	lsrs	r3, r3, #5
 80099f4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80099f8:	441c      	add	r4, r3
 80099fa:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80099fe:	2200      	movs	r2, #0
 8009a00:	673b      	str	r3, [r7, #112]	; 0x70
 8009a02:	677a      	str	r2, [r7, #116]	; 0x74
 8009a04:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8009a08:	4642      	mov	r2, r8
 8009a0a:	464b      	mov	r3, r9
 8009a0c:	1891      	adds	r1, r2, r2
 8009a0e:	60b9      	str	r1, [r7, #8]
 8009a10:	415b      	adcs	r3, r3
 8009a12:	60fb      	str	r3, [r7, #12]
 8009a14:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8009a18:	4641      	mov	r1, r8
 8009a1a:	1851      	adds	r1, r2, r1
 8009a1c:	6039      	str	r1, [r7, #0]
 8009a1e:	4649      	mov	r1, r9
 8009a20:	414b      	adcs	r3, r1
 8009a22:	607b      	str	r3, [r7, #4]
 8009a24:	f04f 0200 	mov.w	r2, #0
 8009a28:	f04f 0300 	mov.w	r3, #0
 8009a2c:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8009a30:	4659      	mov	r1, fp
 8009a32:	00cb      	lsls	r3, r1, #3
 8009a34:	4651      	mov	r1, sl
 8009a36:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8009a3a:	4651      	mov	r1, sl
 8009a3c:	00ca      	lsls	r2, r1, #3
 8009a3e:	4610      	mov	r0, r2
 8009a40:	4619      	mov	r1, r3
 8009a42:	4603      	mov	r3, r0
 8009a44:	4642      	mov	r2, r8
 8009a46:	189b      	adds	r3, r3, r2
 8009a48:	66bb      	str	r3, [r7, #104]	; 0x68
 8009a4a:	464b      	mov	r3, r9
 8009a4c:	460a      	mov	r2, r1
 8009a4e:	eb42 0303 	adc.w	r3, r2, r3
 8009a52:	66fb      	str	r3, [r7, #108]	; 0x6c
 8009a54:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009a58:	685b      	ldr	r3, [r3, #4]
 8009a5a:	2200      	movs	r2, #0
 8009a5c:	663b      	str	r3, [r7, #96]	; 0x60
 8009a5e:	667a      	str	r2, [r7, #100]	; 0x64
 8009a60:	f04f 0200 	mov.w	r2, #0
 8009a64:	f04f 0300 	mov.w	r3, #0
 8009a68:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8009a6c:	4649      	mov	r1, r9
 8009a6e:	008b      	lsls	r3, r1, #2
 8009a70:	4641      	mov	r1, r8
 8009a72:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8009a76:	4641      	mov	r1, r8
 8009a78:	008a      	lsls	r2, r1, #2
 8009a7a:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8009a7e:	f7f7 f82d 	bl	8000adc <__aeabi_uldivmod>
 8009a82:	4602      	mov	r2, r0
 8009a84:	460b      	mov	r3, r1
 8009a86:	4b0d      	ldr	r3, [pc, #52]	; (8009abc <UART_SetConfig+0x4e4>)
 8009a88:	fba3 1302 	umull	r1, r3, r3, r2
 8009a8c:	095b      	lsrs	r3, r3, #5
 8009a8e:	2164      	movs	r1, #100	; 0x64
 8009a90:	fb01 f303 	mul.w	r3, r1, r3
 8009a94:	1ad3      	subs	r3, r2, r3
 8009a96:	011b      	lsls	r3, r3, #4
 8009a98:	3332      	adds	r3, #50	; 0x32
 8009a9a:	4a08      	ldr	r2, [pc, #32]	; (8009abc <UART_SetConfig+0x4e4>)
 8009a9c:	fba2 2303 	umull	r2, r3, r2, r3
 8009aa0:	095b      	lsrs	r3, r3, #5
 8009aa2:	f003 020f 	and.w	r2, r3, #15
 8009aa6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009aaa:	681b      	ldr	r3, [r3, #0]
 8009aac:	4422      	add	r2, r4
 8009aae:	609a      	str	r2, [r3, #8]
}
 8009ab0:	bf00      	nop
 8009ab2:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8009ab6:	46bd      	mov	sp, r7
 8009ab8:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8009abc:	51eb851f 	.word	0x51eb851f

08009ac0 <MX_TOF_Init>:
static void handle_cmd(uint8_t cmd);
static uint8_t get_key(void);
static uint32_t com_has_data(void);

void MX_TOF_Init(void)
{
 8009ac0:	b580      	push	{r7, lr}
 8009ac2:	af00      	add	r7, sp, #0

  /* USER CODE END TOF_Init_PreTreatment */

  /* Initialize the peripherals and the TOF components */

  MX_53L5A1_SimpleRanging_Init();
 8009ac4:	f000 f802 	bl	8009acc <MX_53L5A1_SimpleRanging_Init>

  /* USER CODE BEGIN TOF_Init_PostTreatment */

  /* USER CODE END TOF_Init_PostTreatment */
}
 8009ac8:	bf00      	nop
 8009aca:	bd80      	pop	{r7, pc}

08009acc <MX_53L5A1_SimpleRanging_Init>:

  /* USER CODE END TOF_Process_PostTreatment */
}

static void MX_53L5A1_SimpleRanging_Init(void)
{
 8009acc:	b580      	push	{r7, lr}
 8009ace:	af00      	add	r7, sp, #0
  /* Initialize Virtual COM Port */
  BSP_COM_Init(COM1);
 8009ad0:	2000      	movs	r0, #0
 8009ad2:	f7fb ff81 	bl	80059d8 <BSP_COM_Init>

  /* Initialize button */
  BSP_PB_Init(BUTTON_KEY, BUTTON_MODE_EXTI);
 8009ad6:	2101      	movs	r1, #1
 8009ad8:	2000      	movs	r0, #0
 8009ada:	f7fb ff1b 	bl	8005914 <BSP_PB_Init>

  status = VL53L5A1_RANGING_SENSOR_Init(VL53L5A1_DEV_CENTER);
 8009ade:	2001      	movs	r0, #1
 8009ae0:	f7f8 f88b 	bl	8001bfa <VL53L5A1_RANGING_SENSOR_Init>
 8009ae4:	4603      	mov	r3, r0
 8009ae6:	4a07      	ldr	r2, [pc, #28]	; (8009b04 <MX_53L5A1_SimpleRanging_Init+0x38>)
 8009ae8:	6013      	str	r3, [r2, #0]

  if (status != BSP_ERROR_NONE)
 8009aea:	4b06      	ldr	r3, [pc, #24]	; (8009b04 <MX_53L5A1_SimpleRanging_Init+0x38>)
 8009aec:	681b      	ldr	r3, [r3, #0]
 8009aee:	2b00      	cmp	r3, #0
 8009af0:	d006      	beq.n	8009b00 <MX_53L5A1_SimpleRanging_Init+0x34>
  {
    printf("VL53L5A1_RANGING_SENSOR_Init failed\n");
 8009af2:	4805      	ldr	r0, [pc, #20]	; (8009b08 <MX_53L5A1_SimpleRanging_Init+0x3c>)
 8009af4:	f000 faf6 	bl	800a0e4 <puts>
    printf("Check you're using ONLY the center device soldered on the shield, NO satellite shall be connected !\n");
 8009af8:	4804      	ldr	r0, [pc, #16]	; (8009b0c <MX_53L5A1_SimpleRanging_Init+0x40>)
 8009afa:	f000 faf3 	bl	800a0e4 <puts>
    while(1);
 8009afe:	e7fe      	b.n	8009afe <MX_53L5A1_SimpleRanging_Init+0x32>
  }
}
 8009b00:	bf00      	nop
 8009b02:	bd80      	pop	{r7, pc}
 8009b04:	20002a14 	.word	0x20002a14
 8009b08:	0800aee4 	.word	0x0800aee4
 8009b0c:	0800af08 	.word	0x0800af08

08009b10 <get_3_row>:


//CODICE NOSTRO

void get_3_row(RANGING_SENSOR_Result_t *Result, long distance[]){
 8009b10:	b590      	push	{r4, r7, lr}
 8009b12:	b085      	sub	sp, #20
 8009b14:	af00      	add	r7, sp, #0
 8009b16:	6078      	str	r0, [r7, #4]
 8009b18:	6039      	str	r1, [r7, #0]
	//long* get_3_row(RANGING_SENSOR_Result_t *Result, long res[]){
	  VL53L5A1_RANGING_SENSOR_GetCapabilities(VL53L5A1_DEV_CENTER, &Cap);
 8009b1a:	493d      	ldr	r1, [pc, #244]	; (8009c10 <get_3_row+0x100>)
 8009b1c:	2001      	movs	r0, #1
 8009b1e:	f7f8 f8a9 	bl	8001c74 <VL53L5A1_RANGING_SENSOR_GetCapabilities>
	int8_t i, j;
	//long res[4];
	  uint8_t zones_per_line;

	  zones_per_line = ((Profile.RangingProfile == RS_PROFILE_8x8_AUTONOMOUS) ||
 8009b22:	4b3c      	ldr	r3, [pc, #240]	; (8009c14 <get_3_row+0x104>)
 8009b24:	681b      	ldr	r3, [r3, #0]
 8009b26:	2b04      	cmp	r3, #4
 8009b28:	d003      	beq.n	8009b32 <get_3_row+0x22>
	                    (Profile.RangingProfile == RS_PROFILE_8x8_CONTINUOUS)) ? 8 : 4;
 8009b2a:	4b3a      	ldr	r3, [pc, #232]	; (8009c14 <get_3_row+0x104>)
 8009b2c:	681b      	ldr	r3, [r3, #0]
	  zones_per_line = ((Profile.RangingProfile == RS_PROFILE_8x8_AUTONOMOUS) ||
 8009b2e:	2b03      	cmp	r3, #3
 8009b30:	d101      	bne.n	8009b36 <get_3_row+0x26>
 8009b32:	2308      	movs	r3, #8
 8009b34:	e000      	b.n	8009b38 <get_3_row+0x28>
 8009b36:	2304      	movs	r3, #4
 8009b38:	737b      	strb	r3, [r7, #13]

	  printf("Valori della terza riga:\r\n");
 8009b3a:	4837      	ldr	r0, [pc, #220]	; (8009c18 <get_3_row+0x108>)
 8009b3c:	f000 fad2 	bl	800a0e4 <puts>
	  //printf("%d\r\n",Result->NumberOfZones);
	  printf("%-21s%-21s%\r\n", "Distance [mm]", "Status");
 8009b40:	4a36      	ldr	r2, [pc, #216]	; (8009c1c <get_3_row+0x10c>)
 8009b42:	4937      	ldr	r1, [pc, #220]	; (8009c20 <get_3_row+0x110>)
 8009b44:	4837      	ldr	r0, [pc, #220]	; (8009c24 <get_3_row+0x114>)
 8009b46:	f000 fa67 	bl	800a018 <iprintf>

	  HAL_GPIO_WritePin(LED_Read_GPIO_Port, LED_Read_Pin, SET);
 8009b4a:	2201      	movs	r2, #1
 8009b4c:	2104      	movs	r1, #4
 8009b4e:	4836      	ldr	r0, [pc, #216]	; (8009c28 <get_3_row+0x118>)
 8009b50:	f7fc fc70 	bl	8006434 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(LED_Step_GPIO_Port, LED_Step_Pin, RESET);
 8009b54:	2200      	movs	r2, #0
 8009b56:	2108      	movs	r1, #8
 8009b58:	4833      	ldr	r0, [pc, #204]	; (8009c28 <get_3_row+0x118>)
 8009b5a:	f7fc fc6b 	bl	8006434 <HAL_GPIO_WritePin>

	  for (i = 0; i < RANGING_SENSOR_NB_TARGET_PER_ZONE; i++)
 8009b5e:	2300      	movs	r3, #0
 8009b60:	73fb      	strb	r3, [r7, #15]
 8009b62:	e04c      	b.n	8009bfe <get_3_row+0xee>
	  {
		  //RANGING_SENSOR_NB_TARGET_PER_ZONE=1

		  for (j =(zones_per_line - 1); j >= 0; j --)
 8009b64:	7b7b      	ldrb	r3, [r7, #13]
 8009b66:	3b01      	subs	r3, #1
 8009b68:	b2db      	uxtb	r3, r3
 8009b6a:	73bb      	strb	r3, [r7, #14]
 8009b6c:	e03d      	b.n	8009bea <get_3_row+0xda>
	    {	distance[j]=(long)Result->ZoneResult[j+8].Distance[i];
 8009b6e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8009b72:	f103 0208 	add.w	r2, r3, #8
 8009b76:	f997 000f 	ldrsb.w	r0, [r7, #15]
 8009b7a:	6879      	ldr	r1, [r7, #4]
 8009b7c:	4613      	mov	r3, r2
 8009b7e:	009b      	lsls	r3, r3, #2
 8009b80:	4413      	add	r3, r2
 8009b82:	4403      	add	r3, r0
 8009b84:	009b      	lsls	r3, r3, #2
 8009b86:	440b      	add	r3, r1
 8009b88:	6899      	ldr	r1, [r3, #8]
 8009b8a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8009b8e:	009b      	lsls	r3, r3, #2
 8009b90:	683a      	ldr	r2, [r7, #0]
 8009b92:	4413      	add	r3, r2
 8009b94:	460a      	mov	r2, r1
 8009b96:	601a      	str	r2, [r3, #0]
	      printf("%-20ld%-20ld\r\n", (long)Result->ZoneResult[j+8].Distance[i], (long)Result->ZoneResult[j+8].Status[i]);
 8009b98:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8009b9c:	f103 0208 	add.w	r2, r3, #8
 8009ba0:	f997 000f 	ldrsb.w	r0, [r7, #15]
 8009ba4:	6879      	ldr	r1, [r7, #4]
 8009ba6:	4613      	mov	r3, r2
 8009ba8:	009b      	lsls	r3, r3, #2
 8009baa:	4413      	add	r3, r2
 8009bac:	4403      	add	r3, r0
 8009bae:	009b      	lsls	r3, r3, #2
 8009bb0:	440b      	add	r3, r1
 8009bb2:	689b      	ldr	r3, [r3, #8]
 8009bb4:	461c      	mov	r4, r3
 8009bb6:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8009bba:	f103 0208 	add.w	r2, r3, #8
 8009bbe:	f997 000f 	ldrsb.w	r0, [r7, #15]
 8009bc2:	6879      	ldr	r1, [r7, #4]
 8009bc4:	4613      	mov	r3, r2
 8009bc6:	009b      	lsls	r3, r3, #2
 8009bc8:	4413      	add	r3, r2
 8009bca:	4403      	add	r3, r0
 8009bcc:	3302      	adds	r3, #2
 8009bce:	009b      	lsls	r3, r3, #2
 8009bd0:	440b      	add	r3, r1
 8009bd2:	685b      	ldr	r3, [r3, #4]
 8009bd4:	461a      	mov	r2, r3
 8009bd6:	4621      	mov	r1, r4
 8009bd8:	4814      	ldr	r0, [pc, #80]	; (8009c2c <get_3_row+0x11c>)
 8009bda:	f000 fa1d 	bl	800a018 <iprintf>
		  for (j =(zones_per_line - 1); j >= 0; j --)
 8009bde:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8009be2:	b2db      	uxtb	r3, r3
 8009be4:	3b01      	subs	r3, #1
 8009be6:	b2db      	uxtb	r3, r3
 8009be8:	73bb      	strb	r3, [r7, #14]
 8009bea:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8009bee:	2b00      	cmp	r3, #0
 8009bf0:	dabd      	bge.n	8009b6e <get_3_row+0x5e>
	  for (i = 0; i < RANGING_SENSOR_NB_TARGET_PER_ZONE; i++)
 8009bf2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8009bf6:	b2db      	uxtb	r3, r3
 8009bf8:	3301      	adds	r3, #1
 8009bfa:	b2db      	uxtb	r3, r3
 8009bfc:	73fb      	strb	r3, [r7, #15]
 8009bfe:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8009c02:	2b00      	cmp	r3, #0
 8009c04:	d0ae      	beq.n	8009b64 <get_3_row+0x54>
	   }
		   //printf("distance=%l\r\n", &distance);
	  }
	  //return res;

}
 8009c06:	bf00      	nop
 8009c08:	bf00      	nop
 8009c0a:	3714      	adds	r7, #20
 8009c0c:	46bd      	mov	sp, r7
 8009c0e:	bd90      	pop	{r4, r7, pc}
 8009c10:	200024ec 	.word	0x200024ec
 8009c14:	200024fc 	.word	0x200024fc
 8009c18:	0800af6c 	.word	0x0800af6c
 8009c1c:	0800af88 	.word	0x0800af88
 8009c20:	0800af90 	.word	0x0800af90
 8009c24:	0800afa0 	.word	0x0800afa0
 8009c28:	40020800 	.word	0x40020800
 8009c2c:	0800afb0 	.word	0x0800afb0

08009c30 <TOF_Read_Distances>:


void TOF_Read_Distances(uint8_t dimMatrix, long distance[])
{
 8009c30:	b580      	push	{r7, lr}
 8009c32:	b084      	sub	sp, #16
 8009c34:	af00      	add	r7, sp, #0
 8009c36:	4603      	mov	r3, r0
 8009c38:	6039      	str	r1, [r7, #0]
 8009c3a:	71fb      	strb	r3, [r7, #7]
uint32_t Id;
VL53L5A1_RANGING_SENSOR_ReadID(VL53L5A1_DEV_CENTER, &Id);
 8009c3c:	f107 030c 	add.w	r3, r7, #12
 8009c40:	4619      	mov	r1, r3
 8009c42:	2001      	movs	r0, #1
 8009c44:	f7f7 ffee 	bl	8001c24 <VL53L5A1_RANGING_SENSOR_ReadID>
VL53L5A1_RANGING_SENSOR_GetCapabilities(VL53L5A1_DEV_CENTER, &Cap);
 8009c48:	492e      	ldr	r1, [pc, #184]	; (8009d04 <TOF_Read_Distances+0xd4>)
 8009c4a:	2001      	movs	r0, #1
 8009c4c:	f7f8 f812 	bl	8001c74 <VL53L5A1_RANGING_SENSOR_GetCapabilities>

    if (dimMatrix == 4){
 8009c50:	79fb      	ldrb	r3, [r7, #7]
 8009c52:	2b04      	cmp	r3, #4
 8009c54:	d10f      	bne.n	8009c76 <TOF_Read_Distances+0x46>
        Profile.RangingProfile = RS_PROFILE_4x4_CONTINUOUS;
 8009c56:	4b2c      	ldr	r3, [pc, #176]	; (8009d08 <TOF_Read_Distances+0xd8>)
 8009c58:	2201      	movs	r2, #1
 8009c5a:	601a      	str	r2, [r3, #0]
        Profile.TimingBudget = TIMING_BUDGET; /* 5 ms < TimingBudget < 100 ms */
 8009c5c:	4b2a      	ldr	r3, [pc, #168]	; (8009d08 <TOF_Read_Distances+0xd8>)
 8009c5e:	221e      	movs	r2, #30
 8009c60:	605a      	str	r2, [r3, #4]
        Profile.Frequency = RANGING_FREQUENCY; /* Ranging frequency Hz (shall be consistent with TimingBudget value) */
 8009c62:	4b29      	ldr	r3, [pc, #164]	; (8009d08 <TOF_Read_Distances+0xd8>)
 8009c64:	2205      	movs	r2, #5
 8009c66:	609a      	str	r2, [r3, #8]
        Profile.EnableAmbient = 0; /* Enable: 1, Disable: 0 */
 8009c68:	4b27      	ldr	r3, [pc, #156]	; (8009d08 <TOF_Read_Distances+0xd8>)
 8009c6a:	2200      	movs	r2, #0
 8009c6c:	60da      	str	r2, [r3, #12]
        Profile.EnableSignal = 0; /* Enable: 1, Disable: 0 */
 8009c6e:	4b26      	ldr	r3, [pc, #152]	; (8009d08 <TOF_Read_Distances+0xd8>)
 8009c70:	2200      	movs	r2, #0
 8009c72:	611a      	str	r2, [r3, #16]
 8009c74:	e011      	b.n	8009c9a <TOF_Read_Distances+0x6a>
    }
    else if (dimMatrix == 8){
 8009c76:	79fb      	ldrb	r3, [r7, #7]
 8009c78:	2b08      	cmp	r3, #8
 8009c7a:	d10e      	bne.n	8009c9a <TOF_Read_Distances+0x6a>
        Profile.RangingProfile = RS_PROFILE_8x8_CONTINUOUS;
 8009c7c:	4b22      	ldr	r3, [pc, #136]	; (8009d08 <TOF_Read_Distances+0xd8>)
 8009c7e:	2203      	movs	r2, #3
 8009c80:	601a      	str	r2, [r3, #0]
        Profile.TimingBudget = TIMING_BUDGET; /* 5 ms < TimingBudget < 100 ms */
 8009c82:	4b21      	ldr	r3, [pc, #132]	; (8009d08 <TOF_Read_Distances+0xd8>)
 8009c84:	221e      	movs	r2, #30
 8009c86:	605a      	str	r2, [r3, #4]
        Profile.Frequency = RANGING_FREQUENCY; /* Ranging frequency Hz (shall be consistent with TimingBudget value) */
 8009c88:	4b1f      	ldr	r3, [pc, #124]	; (8009d08 <TOF_Read_Distances+0xd8>)
 8009c8a:	2205      	movs	r2, #5
 8009c8c:	609a      	str	r2, [r3, #8]
        Profile.EnableAmbient = 0; /* Enable: 1, Disable: 0 */
 8009c8e:	4b1e      	ldr	r3, [pc, #120]	; (8009d08 <TOF_Read_Distances+0xd8>)
 8009c90:	2200      	movs	r2, #0
 8009c92:	60da      	str	r2, [r3, #12]
        Profile.EnableSignal = 0; /* Enable: 1, Disable: 0 */
 8009c94:	4b1c      	ldr	r3, [pc, #112]	; (8009d08 <TOF_Read_Distances+0xd8>)
 8009c96:	2200      	movs	r2, #0
 8009c98:	611a      	str	r2, [r3, #16]
    }

      /* set the profile if different from default one */
      VL53L5A1_RANGING_SENSOR_ConfigProfile(VL53L5A1_DEV_CENTER, &Profile);
 8009c9a:	491b      	ldr	r1, [pc, #108]	; (8009d08 <TOF_Read_Distances+0xd8>)
 8009c9c:	2001      	movs	r0, #1
 8009c9e:	f7f8 f811 	bl	8001cc4 <VL53L5A1_RANGING_SENSOR_ConfigProfile>
      status = VL53L5A1_RANGING_SENSOR_Start(VL53L5A1_DEV_CENTER, RS_MODE_BLOCKING_CONTINUOUS);
 8009ca2:	2101      	movs	r1, #1
 8009ca4:	2001      	movs	r0, #1
 8009ca6:	f7f8 f85d 	bl	8001d64 <VL53L5A1_RANGING_SENSOR_Start>
 8009caa:	4603      	mov	r3, r0
 8009cac:	4a17      	ldr	r2, [pc, #92]	; (8009d0c <TOF_Read_Distances+0xdc>)
 8009cae:	6013      	str	r3, [r2, #0]

      if (status != BSP_ERROR_NONE)
 8009cb0:	4b16      	ldr	r3, [pc, #88]	; (8009d0c <TOF_Read_Distances+0xdc>)
 8009cb2:	681b      	ldr	r3, [r3, #0]
 8009cb4:	2b00      	cmp	r3, #0
 8009cb6:	d003      	beq.n	8009cc0 <TOF_Read_Distances+0x90>
      {
        printf("VL53L5A1_RANGING_SENSOR_Start failed\r\n");
 8009cb8:	4815      	ldr	r0, [pc, #84]	; (8009d10 <TOF_Read_Distances+0xe0>)
 8009cba:	f000 fa13 	bl	800a0e4 <puts>
        while(1);
 8009cbe:	e7fe      	b.n	8009cbe <TOF_Read_Distances+0x8e>
      }

      while (1)
      {
        /* polling mode */
        status = VL53L5A1_RANGING_SENSOR_GetDistance(VL53L5A1_DEV_CENTER, &Result);
 8009cc0:	4914      	ldr	r1, [pc, #80]	; (8009d14 <TOF_Read_Distances+0xe4>)
 8009cc2:	2001      	movs	r0, #1
 8009cc4:	f7f8 f826 	bl	8001d14 <VL53L5A1_RANGING_SENSOR_GetDistance>
 8009cc8:	4603      	mov	r3, r0
 8009cca:	4a10      	ldr	r2, [pc, #64]	; (8009d0c <TOF_Read_Distances+0xdc>)
 8009ccc:	6013      	str	r3, [r2, #0]
        if (status == BSP_ERROR_NONE)
 8009cce:	4b0f      	ldr	r3, [pc, #60]	; (8009d0c <TOF_Read_Distances+0xdc>)
 8009cd0:	681b      	ldr	r3, [r3, #0]
 8009cd2:	2b00      	cmp	r3, #0
 8009cd4:	d104      	bne.n	8009ce0 <TOF_Read_Distances+0xb0>
        {
        	//long* res=get_3_row( &Result);
        	//return res;
        	get_3_row(&Result, distance);
 8009cd6:	6839      	ldr	r1, [r7, #0]
 8009cd8:	480e      	ldr	r0, [pc, #56]	; (8009d14 <TOF_Read_Distances+0xe4>)
 8009cda:	f7ff ff19 	bl	8009b10 <get_3_row>
        	return;
 8009cde:	e00e      	b.n	8009cfe <TOF_Read_Distances+0xce>
        }
        if (com_has_data())
 8009ce0:	f000 f8b2 	bl	8009e48 <com_has_data>
 8009ce4:	4603      	mov	r3, r0
 8009ce6:	2b00      	cmp	r3, #0
 8009ce8:	d005      	beq.n	8009cf6 <TOF_Read_Distances+0xc6>
        {
          handle_cmd(get_key());
 8009cea:	f000 f899 	bl	8009e20 <get_key>
 8009cee:	4603      	mov	r3, r0
 8009cf0:	4618      	mov	r0, r3
 8009cf2:	f000 f875 	bl	8009de0 <handle_cmd>
        }

        HAL_Delay(POLLING_PERIOD);
 8009cf6:	20c8      	movs	r0, #200	; 0xc8
 8009cf8:	f7fb ffb0 	bl	8005c5c <HAL_Delay>
        status = VL53L5A1_RANGING_SENSOR_GetDistance(VL53L5A1_DEV_CENTER, &Result);
 8009cfc:	e7e0      	b.n	8009cc0 <TOF_Read_Distances+0x90>
      }

}
 8009cfe:	3710      	adds	r7, #16
 8009d00:	46bd      	mov	sp, r7
 8009d02:	bd80      	pop	{r7, pc}
 8009d04:	200024ec 	.word	0x200024ec
 8009d08:	200024fc 	.word	0x200024fc
 8009d0c:	20002a14 	.word	0x20002a14
 8009d10:	0800afc0 	.word	0x0800afc0
 8009d14:	20002510 	.word	0x20002510

08009d18 <toggle_resolution>:
}



static void toggle_resolution(void)
{
 8009d18:	b580      	push	{r7, lr}
 8009d1a:	af00      	add	r7, sp, #0
  VL53L5A1_RANGING_SENSOR_Stop(VL53L5A1_DEV_CENTER);
 8009d1c:	2001      	movs	r0, #1
 8009d1e:	f7f8 f849 	bl	8001db4 <VL53L5A1_RANGING_SENSOR_Stop>

  switch (Profile.RangingProfile)
 8009d22:	4b16      	ldr	r3, [pc, #88]	; (8009d7c <toggle_resolution+0x64>)
 8009d24:	681b      	ldr	r3, [r3, #0]
 8009d26:	3b01      	subs	r3, #1
 8009d28:	2b03      	cmp	r3, #3
 8009d2a:	d81b      	bhi.n	8009d64 <toggle_resolution+0x4c>
 8009d2c:	a201      	add	r2, pc, #4	; (adr r2, 8009d34 <toggle_resolution+0x1c>)
 8009d2e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009d32:	bf00      	nop
 8009d34:	08009d4d 	.word	0x08009d4d
 8009d38:	08009d45 	.word	0x08009d45
 8009d3c:	08009d5d 	.word	0x08009d5d
 8009d40:	08009d55 	.word	0x08009d55
  {
    case RS_PROFILE_4x4_AUTONOMOUS:
      Profile.RangingProfile = RS_PROFILE_8x8_AUTONOMOUS;
 8009d44:	4b0d      	ldr	r3, [pc, #52]	; (8009d7c <toggle_resolution+0x64>)
 8009d46:	2204      	movs	r2, #4
 8009d48:	601a      	str	r2, [r3, #0]
      break;
 8009d4a:	e00c      	b.n	8009d66 <toggle_resolution+0x4e>

    case RS_PROFILE_4x4_CONTINUOUS:
      Profile.RangingProfile = RS_PROFILE_8x8_CONTINUOUS;
 8009d4c:	4b0b      	ldr	r3, [pc, #44]	; (8009d7c <toggle_resolution+0x64>)
 8009d4e:	2203      	movs	r2, #3
 8009d50:	601a      	str	r2, [r3, #0]
      break;
 8009d52:	e008      	b.n	8009d66 <toggle_resolution+0x4e>

    case RS_PROFILE_8x8_AUTONOMOUS:
      Profile.RangingProfile = RS_PROFILE_4x4_AUTONOMOUS;
 8009d54:	4b09      	ldr	r3, [pc, #36]	; (8009d7c <toggle_resolution+0x64>)
 8009d56:	2202      	movs	r2, #2
 8009d58:	601a      	str	r2, [r3, #0]
      break;
 8009d5a:	e004      	b.n	8009d66 <toggle_resolution+0x4e>

    case RS_PROFILE_8x8_CONTINUOUS:
      Profile.RangingProfile = RS_PROFILE_4x4_CONTINUOUS;
 8009d5c:	4b07      	ldr	r3, [pc, #28]	; (8009d7c <toggle_resolution+0x64>)
 8009d5e:	2201      	movs	r2, #1
 8009d60:	601a      	str	r2, [r3, #0]
      break;
 8009d62:	e000      	b.n	8009d66 <toggle_resolution+0x4e>

    default:
      break;
 8009d64:	bf00      	nop
  }

  VL53L5A1_RANGING_SENSOR_ConfigProfile(VL53L5A1_DEV_CENTER, &Profile);
 8009d66:	4905      	ldr	r1, [pc, #20]	; (8009d7c <toggle_resolution+0x64>)
 8009d68:	2001      	movs	r0, #1
 8009d6a:	f7f7 ffab 	bl	8001cc4 <VL53L5A1_RANGING_SENSOR_ConfigProfile>
  VL53L5A1_RANGING_SENSOR_Start(VL53L5A1_DEV_CENTER, RS_MODE_BLOCKING_CONTINUOUS);
 8009d6e:	2101      	movs	r1, #1
 8009d70:	2001      	movs	r0, #1
 8009d72:	f7f7 fff7 	bl	8001d64 <VL53L5A1_RANGING_SENSOR_Start>
}
 8009d76:	bf00      	nop
 8009d78:	bd80      	pop	{r7, pc}
 8009d7a:	bf00      	nop
 8009d7c:	200024fc 	.word	0x200024fc

08009d80 <toggle_signal_and_ambient>:

static void toggle_signal_and_ambient(void)
{
 8009d80:	b580      	push	{r7, lr}
 8009d82:	af00      	add	r7, sp, #0
  VL53L5A1_RANGING_SENSOR_Stop(VL53L5A1_DEV_CENTER);
 8009d84:	2001      	movs	r0, #1
 8009d86:	f7f8 f815 	bl	8001db4 <VL53L5A1_RANGING_SENSOR_Stop>

  Profile.EnableAmbient = (Profile.EnableAmbient) ? 0U : 1U;
 8009d8a:	4b0f      	ldr	r3, [pc, #60]	; (8009dc8 <toggle_signal_and_ambient+0x48>)
 8009d8c:	68db      	ldr	r3, [r3, #12]
 8009d8e:	2b00      	cmp	r3, #0
 8009d90:	bf0c      	ite	eq
 8009d92:	2301      	moveq	r3, #1
 8009d94:	2300      	movne	r3, #0
 8009d96:	b2db      	uxtb	r3, r3
 8009d98:	461a      	mov	r2, r3
 8009d9a:	4b0b      	ldr	r3, [pc, #44]	; (8009dc8 <toggle_signal_and_ambient+0x48>)
 8009d9c:	60da      	str	r2, [r3, #12]
  Profile.EnableSignal = (Profile.EnableSignal) ? 0U : 1U;
 8009d9e:	4b0a      	ldr	r3, [pc, #40]	; (8009dc8 <toggle_signal_and_ambient+0x48>)
 8009da0:	691b      	ldr	r3, [r3, #16]
 8009da2:	2b00      	cmp	r3, #0
 8009da4:	bf0c      	ite	eq
 8009da6:	2301      	moveq	r3, #1
 8009da8:	2300      	movne	r3, #0
 8009daa:	b2db      	uxtb	r3, r3
 8009dac:	461a      	mov	r2, r3
 8009dae:	4b06      	ldr	r3, [pc, #24]	; (8009dc8 <toggle_signal_and_ambient+0x48>)
 8009db0:	611a      	str	r2, [r3, #16]

  VL53L5A1_RANGING_SENSOR_ConfigProfile(VL53L5A1_DEV_CENTER, &Profile);
 8009db2:	4905      	ldr	r1, [pc, #20]	; (8009dc8 <toggle_signal_and_ambient+0x48>)
 8009db4:	2001      	movs	r0, #1
 8009db6:	f7f7 ff85 	bl	8001cc4 <VL53L5A1_RANGING_SENSOR_ConfigProfile>
  VL53L5A1_RANGING_SENSOR_Start(VL53L5A1_DEV_CENTER, RS_MODE_BLOCKING_CONTINUOUS);
 8009dba:	2101      	movs	r1, #1
 8009dbc:	2001      	movs	r0, #1
 8009dbe:	f7f7 ffd1 	bl	8001d64 <VL53L5A1_RANGING_SENSOR_Start>
}
 8009dc2:	bf00      	nop
 8009dc4:	bd80      	pop	{r7, pc}
 8009dc6:	bf00      	nop
 8009dc8:	200024fc 	.word	0x200024fc

08009dcc <clear_screen>:

static void clear_screen(void)
{
 8009dcc:	b580      	push	{r7, lr}
 8009dce:	af00      	add	r7, sp, #0
  printf("%c[2J", 27); /* 27 is ESC command */
 8009dd0:	211b      	movs	r1, #27
 8009dd2:	4802      	ldr	r0, [pc, #8]	; (8009ddc <clear_screen+0x10>)
 8009dd4:	f000 f920 	bl	800a018 <iprintf>
}
 8009dd8:	bf00      	nop
 8009dda:	bd80      	pop	{r7, pc}
 8009ddc:	0800b110 	.word	0x0800b110

08009de0 <handle_cmd>:
  printf(" 'c' : clear screen\r\n");
  printf("\r\n");
}

static void handle_cmd(uint8_t cmd)
{
 8009de0:	b580      	push	{r7, lr}
 8009de2:	b082      	sub	sp, #8
 8009de4:	af00      	add	r7, sp, #0
 8009de6:	4603      	mov	r3, r0
 8009de8:	71fb      	strb	r3, [r7, #7]
  switch (cmd)
 8009dea:	79fb      	ldrb	r3, [r7, #7]
 8009dec:	2b73      	cmp	r3, #115	; 0x73
 8009dee:	d00a      	beq.n	8009e06 <handle_cmd+0x26>
 8009df0:	2b73      	cmp	r3, #115	; 0x73
 8009df2:	dc10      	bgt.n	8009e16 <handle_cmd+0x36>
 8009df4:	2b63      	cmp	r3, #99	; 0x63
 8009df6:	d00b      	beq.n	8009e10 <handle_cmd+0x30>
 8009df8:	2b72      	cmp	r3, #114	; 0x72
 8009dfa:	d10c      	bne.n	8009e16 <handle_cmd+0x36>
  {
    case 'r':
      toggle_resolution();
 8009dfc:	f7ff ff8c 	bl	8009d18 <toggle_resolution>
      clear_screen();
 8009e00:	f7ff ffe4 	bl	8009dcc <clear_screen>
      break;
 8009e04:	e008      	b.n	8009e18 <handle_cmd+0x38>

    case 's':
      toggle_signal_and_ambient();
 8009e06:	f7ff ffbb 	bl	8009d80 <toggle_signal_and_ambient>
      clear_screen();
 8009e0a:	f7ff ffdf 	bl	8009dcc <clear_screen>
      break;
 8009e0e:	e003      	b.n	8009e18 <handle_cmd+0x38>

    case 'c':
      clear_screen();
 8009e10:	f7ff ffdc 	bl	8009dcc <clear_screen>
      break;
 8009e14:	e000      	b.n	8009e18 <handle_cmd+0x38>

    default:
      break;
 8009e16:	bf00      	nop
  }
}
 8009e18:	bf00      	nop
 8009e1a:	3708      	adds	r7, #8
 8009e1c:	46bd      	mov	sp, r7
 8009e1e:	bd80      	pop	{r7, pc}

08009e20 <get_key>:

static uint8_t get_key(void)
{
 8009e20:	b580      	push	{r7, lr}
 8009e22:	b082      	sub	sp, #8
 8009e24:	af00      	add	r7, sp, #0
  uint8_t cmd = 0;
 8009e26:	2300      	movs	r3, #0
 8009e28:	71fb      	strb	r3, [r7, #7]

  HAL_UART_Receive(&hcom_uart[COM1], &cmd, 1, HAL_MAX_DELAY);
 8009e2a:	1df9      	adds	r1, r7, #7
 8009e2c:	f04f 33ff 	mov.w	r3, #4294967295
 8009e30:	2201      	movs	r2, #1
 8009e32:	4804      	ldr	r0, [pc, #16]	; (8009e44 <get_key+0x24>)
 8009e34:	f7ff fabf 	bl	80093b6 <HAL_UART_Receive>

  return cmd;
 8009e38:	79fb      	ldrb	r3, [r7, #7]
}
 8009e3a:	4618      	mov	r0, r3
 8009e3c:	3708      	adds	r7, #8
 8009e3e:	46bd      	mov	sp, r7
 8009e40:	bd80      	pop	{r7, pc}
 8009e42:	bf00      	nop
 8009e44:	200024a0 	.word	0x200024a0

08009e48 <com_has_data>:

static uint32_t com_has_data(void)
{
 8009e48:	b480      	push	{r7}
 8009e4a:	af00      	add	r7, sp, #0
  return __HAL_UART_GET_FLAG(&hcom_uart[COM1], UART_FLAG_RXNE);;
 8009e4c:	4b07      	ldr	r3, [pc, #28]	; (8009e6c <com_has_data+0x24>)
 8009e4e:	681b      	ldr	r3, [r3, #0]
 8009e50:	681b      	ldr	r3, [r3, #0]
 8009e52:	f003 0320 	and.w	r3, r3, #32
 8009e56:	2b20      	cmp	r3, #32
 8009e58:	bf0c      	ite	eq
 8009e5a:	2301      	moveq	r3, #1
 8009e5c:	2300      	movne	r3, #0
 8009e5e:	b2db      	uxtb	r3, r3
}
 8009e60:	4618      	mov	r0, r3
 8009e62:	46bd      	mov	sp, r7
 8009e64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e68:	4770      	bx	lr
 8009e6a:	bf00      	nop
 8009e6c:	200024a0 	.word	0x200024a0

08009e70 <BSP_PB_Callback>:

void BSP_PB_Callback(Button_TypeDef Button)
{
 8009e70:	b480      	push	{r7}
 8009e72:	b083      	sub	sp, #12
 8009e74:	af00      	add	r7, sp, #0
 8009e76:	4603      	mov	r3, r0
 8009e78:	71fb      	strb	r3, [r7, #7]
  PushButtonDetected = 1;
 8009e7a:	4b04      	ldr	r3, [pc, #16]	; (8009e8c <BSP_PB_Callback+0x1c>)
 8009e7c:	2201      	movs	r2, #1
 8009e7e:	701a      	strb	r2, [r3, #0]
}
 8009e80:	bf00      	nop
 8009e82:	370c      	adds	r7, #12
 8009e84:	46bd      	mov	sp, r7
 8009e86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e8a:	4770      	bx	lr
 8009e8c:	20002a18 	.word	0x20002a18

08009e90 <HAL_GPIO_EXTI_Callback>:
#include "app_tof_pin_conf.h"

extern volatile uint8_t ToF_EventDetected;

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8009e90:	b480      	push	{r7}
 8009e92:	b083      	sub	sp, #12
 8009e94:	af00      	add	r7, sp, #0
 8009e96:	4603      	mov	r3, r0
 8009e98:	80fb      	strh	r3, [r7, #6]
  if (GPIO_Pin == TOF_INT_EXTI_PIN)
 8009e9a:	88fb      	ldrh	r3, [r7, #6]
 8009e9c:	2b10      	cmp	r3, #16
 8009e9e:	d102      	bne.n	8009ea6 <HAL_GPIO_EXTI_Callback+0x16>
  {
    ToF_EventDetected = 1;
 8009ea0:	4b04      	ldr	r3, [pc, #16]	; (8009eb4 <HAL_GPIO_EXTI_Callback+0x24>)
 8009ea2:	2201      	movs	r2, #1
 8009ea4:	701a      	strb	r2, [r3, #0]
  }
}
 8009ea6:	bf00      	nop
 8009ea8:	370c      	adds	r7, #12
 8009eaa:	46bd      	mov	sp, r7
 8009eac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009eb0:	4770      	bx	lr
 8009eb2:	bf00      	nop
 8009eb4:	20002a19 	.word	0x20002a19

08009eb8 <std>:
 8009eb8:	2300      	movs	r3, #0
 8009eba:	b510      	push	{r4, lr}
 8009ebc:	4604      	mov	r4, r0
 8009ebe:	e9c0 3300 	strd	r3, r3, [r0]
 8009ec2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8009ec6:	6083      	str	r3, [r0, #8]
 8009ec8:	8181      	strh	r1, [r0, #12]
 8009eca:	6643      	str	r3, [r0, #100]	; 0x64
 8009ecc:	81c2      	strh	r2, [r0, #14]
 8009ece:	6183      	str	r3, [r0, #24]
 8009ed0:	4619      	mov	r1, r3
 8009ed2:	2208      	movs	r2, #8
 8009ed4:	305c      	adds	r0, #92	; 0x5c
 8009ed6:	f000 f9e5 	bl	800a2a4 <memset>
 8009eda:	4b05      	ldr	r3, [pc, #20]	; (8009ef0 <std+0x38>)
 8009edc:	6263      	str	r3, [r4, #36]	; 0x24
 8009ede:	4b05      	ldr	r3, [pc, #20]	; (8009ef4 <std+0x3c>)
 8009ee0:	62a3      	str	r3, [r4, #40]	; 0x28
 8009ee2:	4b05      	ldr	r3, [pc, #20]	; (8009ef8 <std+0x40>)
 8009ee4:	62e3      	str	r3, [r4, #44]	; 0x2c
 8009ee6:	4b05      	ldr	r3, [pc, #20]	; (8009efc <std+0x44>)
 8009ee8:	6224      	str	r4, [r4, #32]
 8009eea:	6323      	str	r3, [r4, #48]	; 0x30
 8009eec:	bd10      	pop	{r4, pc}
 8009eee:	bf00      	nop
 8009ef0:	0800a0f5 	.word	0x0800a0f5
 8009ef4:	0800a117 	.word	0x0800a117
 8009ef8:	0800a14f 	.word	0x0800a14f
 8009efc:	0800a173 	.word	0x0800a173

08009f00 <stdio_exit_handler>:
 8009f00:	4a02      	ldr	r2, [pc, #8]	; (8009f0c <stdio_exit_handler+0xc>)
 8009f02:	4903      	ldr	r1, [pc, #12]	; (8009f10 <stdio_exit_handler+0x10>)
 8009f04:	4803      	ldr	r0, [pc, #12]	; (8009f14 <stdio_exit_handler+0x14>)
 8009f06:	f000 b869 	b.w	8009fdc <_fwalk_sglue>
 8009f0a:	bf00      	nop
 8009f0c:	20000050 	.word	0x20000050
 8009f10:	0800ac59 	.word	0x0800ac59
 8009f14:	2000005c 	.word	0x2000005c

08009f18 <cleanup_stdio>:
 8009f18:	6841      	ldr	r1, [r0, #4]
 8009f1a:	4b0c      	ldr	r3, [pc, #48]	; (8009f4c <cleanup_stdio+0x34>)
 8009f1c:	4299      	cmp	r1, r3
 8009f1e:	b510      	push	{r4, lr}
 8009f20:	4604      	mov	r4, r0
 8009f22:	d001      	beq.n	8009f28 <cleanup_stdio+0x10>
 8009f24:	f000 fe98 	bl	800ac58 <_fflush_r>
 8009f28:	68a1      	ldr	r1, [r4, #8]
 8009f2a:	4b09      	ldr	r3, [pc, #36]	; (8009f50 <cleanup_stdio+0x38>)
 8009f2c:	4299      	cmp	r1, r3
 8009f2e:	d002      	beq.n	8009f36 <cleanup_stdio+0x1e>
 8009f30:	4620      	mov	r0, r4
 8009f32:	f000 fe91 	bl	800ac58 <_fflush_r>
 8009f36:	68e1      	ldr	r1, [r4, #12]
 8009f38:	4b06      	ldr	r3, [pc, #24]	; (8009f54 <cleanup_stdio+0x3c>)
 8009f3a:	4299      	cmp	r1, r3
 8009f3c:	d004      	beq.n	8009f48 <cleanup_stdio+0x30>
 8009f3e:	4620      	mov	r0, r4
 8009f40:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009f44:	f000 be88 	b.w	800ac58 <_fflush_r>
 8009f48:	bd10      	pop	{r4, pc}
 8009f4a:	bf00      	nop
 8009f4c:	20002a1c 	.word	0x20002a1c
 8009f50:	20002a84 	.word	0x20002a84
 8009f54:	20002aec 	.word	0x20002aec

08009f58 <global_stdio_init.part.0>:
 8009f58:	b510      	push	{r4, lr}
 8009f5a:	4b0b      	ldr	r3, [pc, #44]	; (8009f88 <global_stdio_init.part.0+0x30>)
 8009f5c:	4c0b      	ldr	r4, [pc, #44]	; (8009f8c <global_stdio_init.part.0+0x34>)
 8009f5e:	4a0c      	ldr	r2, [pc, #48]	; (8009f90 <global_stdio_init.part.0+0x38>)
 8009f60:	601a      	str	r2, [r3, #0]
 8009f62:	4620      	mov	r0, r4
 8009f64:	2200      	movs	r2, #0
 8009f66:	2104      	movs	r1, #4
 8009f68:	f7ff ffa6 	bl	8009eb8 <std>
 8009f6c:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8009f70:	2201      	movs	r2, #1
 8009f72:	2109      	movs	r1, #9
 8009f74:	f7ff ffa0 	bl	8009eb8 <std>
 8009f78:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8009f7c:	2202      	movs	r2, #2
 8009f7e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009f82:	2112      	movs	r1, #18
 8009f84:	f7ff bf98 	b.w	8009eb8 <std>
 8009f88:	20002b54 	.word	0x20002b54
 8009f8c:	20002a1c 	.word	0x20002a1c
 8009f90:	08009f01 	.word	0x08009f01

08009f94 <__sfp_lock_acquire>:
 8009f94:	4801      	ldr	r0, [pc, #4]	; (8009f9c <__sfp_lock_acquire+0x8>)
 8009f96:	f000 b9fd 	b.w	800a394 <__retarget_lock_acquire_recursive>
 8009f9a:	bf00      	nop
 8009f9c:	20002b5d 	.word	0x20002b5d

08009fa0 <__sfp_lock_release>:
 8009fa0:	4801      	ldr	r0, [pc, #4]	; (8009fa8 <__sfp_lock_release+0x8>)
 8009fa2:	f000 b9f8 	b.w	800a396 <__retarget_lock_release_recursive>
 8009fa6:	bf00      	nop
 8009fa8:	20002b5d 	.word	0x20002b5d

08009fac <__sinit>:
 8009fac:	b510      	push	{r4, lr}
 8009fae:	4604      	mov	r4, r0
 8009fb0:	f7ff fff0 	bl	8009f94 <__sfp_lock_acquire>
 8009fb4:	6a23      	ldr	r3, [r4, #32]
 8009fb6:	b11b      	cbz	r3, 8009fc0 <__sinit+0x14>
 8009fb8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009fbc:	f7ff bff0 	b.w	8009fa0 <__sfp_lock_release>
 8009fc0:	4b04      	ldr	r3, [pc, #16]	; (8009fd4 <__sinit+0x28>)
 8009fc2:	6223      	str	r3, [r4, #32]
 8009fc4:	4b04      	ldr	r3, [pc, #16]	; (8009fd8 <__sinit+0x2c>)
 8009fc6:	681b      	ldr	r3, [r3, #0]
 8009fc8:	2b00      	cmp	r3, #0
 8009fca:	d1f5      	bne.n	8009fb8 <__sinit+0xc>
 8009fcc:	f7ff ffc4 	bl	8009f58 <global_stdio_init.part.0>
 8009fd0:	e7f2      	b.n	8009fb8 <__sinit+0xc>
 8009fd2:	bf00      	nop
 8009fd4:	08009f19 	.word	0x08009f19
 8009fd8:	20002b54 	.word	0x20002b54

08009fdc <_fwalk_sglue>:
 8009fdc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009fe0:	4607      	mov	r7, r0
 8009fe2:	4688      	mov	r8, r1
 8009fe4:	4614      	mov	r4, r2
 8009fe6:	2600      	movs	r6, #0
 8009fe8:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8009fec:	f1b9 0901 	subs.w	r9, r9, #1
 8009ff0:	d505      	bpl.n	8009ffe <_fwalk_sglue+0x22>
 8009ff2:	6824      	ldr	r4, [r4, #0]
 8009ff4:	2c00      	cmp	r4, #0
 8009ff6:	d1f7      	bne.n	8009fe8 <_fwalk_sglue+0xc>
 8009ff8:	4630      	mov	r0, r6
 8009ffa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009ffe:	89ab      	ldrh	r3, [r5, #12]
 800a000:	2b01      	cmp	r3, #1
 800a002:	d907      	bls.n	800a014 <_fwalk_sglue+0x38>
 800a004:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800a008:	3301      	adds	r3, #1
 800a00a:	d003      	beq.n	800a014 <_fwalk_sglue+0x38>
 800a00c:	4629      	mov	r1, r5
 800a00e:	4638      	mov	r0, r7
 800a010:	47c0      	blx	r8
 800a012:	4306      	orrs	r6, r0
 800a014:	3568      	adds	r5, #104	; 0x68
 800a016:	e7e9      	b.n	8009fec <_fwalk_sglue+0x10>

0800a018 <iprintf>:
 800a018:	b40f      	push	{r0, r1, r2, r3}
 800a01a:	b507      	push	{r0, r1, r2, lr}
 800a01c:	4906      	ldr	r1, [pc, #24]	; (800a038 <iprintf+0x20>)
 800a01e:	ab04      	add	r3, sp, #16
 800a020:	6808      	ldr	r0, [r1, #0]
 800a022:	f853 2b04 	ldr.w	r2, [r3], #4
 800a026:	6881      	ldr	r1, [r0, #8]
 800a028:	9301      	str	r3, [sp, #4]
 800a02a:	f000 fae5 	bl	800a5f8 <_vfiprintf_r>
 800a02e:	b003      	add	sp, #12
 800a030:	f85d eb04 	ldr.w	lr, [sp], #4
 800a034:	b004      	add	sp, #16
 800a036:	4770      	bx	lr
 800a038:	200000a8 	.word	0x200000a8

0800a03c <_puts_r>:
 800a03c:	6a03      	ldr	r3, [r0, #32]
 800a03e:	b570      	push	{r4, r5, r6, lr}
 800a040:	6884      	ldr	r4, [r0, #8]
 800a042:	4605      	mov	r5, r0
 800a044:	460e      	mov	r6, r1
 800a046:	b90b      	cbnz	r3, 800a04c <_puts_r+0x10>
 800a048:	f7ff ffb0 	bl	8009fac <__sinit>
 800a04c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800a04e:	07db      	lsls	r3, r3, #31
 800a050:	d405      	bmi.n	800a05e <_puts_r+0x22>
 800a052:	89a3      	ldrh	r3, [r4, #12]
 800a054:	0598      	lsls	r0, r3, #22
 800a056:	d402      	bmi.n	800a05e <_puts_r+0x22>
 800a058:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a05a:	f000 f99b 	bl	800a394 <__retarget_lock_acquire_recursive>
 800a05e:	89a3      	ldrh	r3, [r4, #12]
 800a060:	0719      	lsls	r1, r3, #28
 800a062:	d513      	bpl.n	800a08c <_puts_r+0x50>
 800a064:	6923      	ldr	r3, [r4, #16]
 800a066:	b18b      	cbz	r3, 800a08c <_puts_r+0x50>
 800a068:	3e01      	subs	r6, #1
 800a06a:	68a3      	ldr	r3, [r4, #8]
 800a06c:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800a070:	3b01      	subs	r3, #1
 800a072:	60a3      	str	r3, [r4, #8]
 800a074:	b9e9      	cbnz	r1, 800a0b2 <_puts_r+0x76>
 800a076:	2b00      	cmp	r3, #0
 800a078:	da2e      	bge.n	800a0d8 <_puts_r+0x9c>
 800a07a:	4622      	mov	r2, r4
 800a07c:	210a      	movs	r1, #10
 800a07e:	4628      	mov	r0, r5
 800a080:	f000 f87b 	bl	800a17a <__swbuf_r>
 800a084:	3001      	adds	r0, #1
 800a086:	d007      	beq.n	800a098 <_puts_r+0x5c>
 800a088:	250a      	movs	r5, #10
 800a08a:	e007      	b.n	800a09c <_puts_r+0x60>
 800a08c:	4621      	mov	r1, r4
 800a08e:	4628      	mov	r0, r5
 800a090:	f000 f8b0 	bl	800a1f4 <__swsetup_r>
 800a094:	2800      	cmp	r0, #0
 800a096:	d0e7      	beq.n	800a068 <_puts_r+0x2c>
 800a098:	f04f 35ff 	mov.w	r5, #4294967295
 800a09c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800a09e:	07da      	lsls	r2, r3, #31
 800a0a0:	d405      	bmi.n	800a0ae <_puts_r+0x72>
 800a0a2:	89a3      	ldrh	r3, [r4, #12]
 800a0a4:	059b      	lsls	r3, r3, #22
 800a0a6:	d402      	bmi.n	800a0ae <_puts_r+0x72>
 800a0a8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a0aa:	f000 f974 	bl	800a396 <__retarget_lock_release_recursive>
 800a0ae:	4628      	mov	r0, r5
 800a0b0:	bd70      	pop	{r4, r5, r6, pc}
 800a0b2:	2b00      	cmp	r3, #0
 800a0b4:	da04      	bge.n	800a0c0 <_puts_r+0x84>
 800a0b6:	69a2      	ldr	r2, [r4, #24]
 800a0b8:	429a      	cmp	r2, r3
 800a0ba:	dc06      	bgt.n	800a0ca <_puts_r+0x8e>
 800a0bc:	290a      	cmp	r1, #10
 800a0be:	d004      	beq.n	800a0ca <_puts_r+0x8e>
 800a0c0:	6823      	ldr	r3, [r4, #0]
 800a0c2:	1c5a      	adds	r2, r3, #1
 800a0c4:	6022      	str	r2, [r4, #0]
 800a0c6:	7019      	strb	r1, [r3, #0]
 800a0c8:	e7cf      	b.n	800a06a <_puts_r+0x2e>
 800a0ca:	4622      	mov	r2, r4
 800a0cc:	4628      	mov	r0, r5
 800a0ce:	f000 f854 	bl	800a17a <__swbuf_r>
 800a0d2:	3001      	adds	r0, #1
 800a0d4:	d1c9      	bne.n	800a06a <_puts_r+0x2e>
 800a0d6:	e7df      	b.n	800a098 <_puts_r+0x5c>
 800a0d8:	6823      	ldr	r3, [r4, #0]
 800a0da:	250a      	movs	r5, #10
 800a0dc:	1c5a      	adds	r2, r3, #1
 800a0de:	6022      	str	r2, [r4, #0]
 800a0e0:	701d      	strb	r5, [r3, #0]
 800a0e2:	e7db      	b.n	800a09c <_puts_r+0x60>

0800a0e4 <puts>:
 800a0e4:	4b02      	ldr	r3, [pc, #8]	; (800a0f0 <puts+0xc>)
 800a0e6:	4601      	mov	r1, r0
 800a0e8:	6818      	ldr	r0, [r3, #0]
 800a0ea:	f7ff bfa7 	b.w	800a03c <_puts_r>
 800a0ee:	bf00      	nop
 800a0f0:	200000a8 	.word	0x200000a8

0800a0f4 <__sread>:
 800a0f4:	b510      	push	{r4, lr}
 800a0f6:	460c      	mov	r4, r1
 800a0f8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a0fc:	f000 f8fc 	bl	800a2f8 <_read_r>
 800a100:	2800      	cmp	r0, #0
 800a102:	bfab      	itete	ge
 800a104:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800a106:	89a3      	ldrhlt	r3, [r4, #12]
 800a108:	181b      	addge	r3, r3, r0
 800a10a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800a10e:	bfac      	ite	ge
 800a110:	6563      	strge	r3, [r4, #84]	; 0x54
 800a112:	81a3      	strhlt	r3, [r4, #12]
 800a114:	bd10      	pop	{r4, pc}

0800a116 <__swrite>:
 800a116:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a11a:	461f      	mov	r7, r3
 800a11c:	898b      	ldrh	r3, [r1, #12]
 800a11e:	05db      	lsls	r3, r3, #23
 800a120:	4605      	mov	r5, r0
 800a122:	460c      	mov	r4, r1
 800a124:	4616      	mov	r6, r2
 800a126:	d505      	bpl.n	800a134 <__swrite+0x1e>
 800a128:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a12c:	2302      	movs	r3, #2
 800a12e:	2200      	movs	r2, #0
 800a130:	f000 f8d0 	bl	800a2d4 <_lseek_r>
 800a134:	89a3      	ldrh	r3, [r4, #12]
 800a136:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a13a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800a13e:	81a3      	strh	r3, [r4, #12]
 800a140:	4632      	mov	r2, r6
 800a142:	463b      	mov	r3, r7
 800a144:	4628      	mov	r0, r5
 800a146:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a14a:	f000 b8e7 	b.w	800a31c <_write_r>

0800a14e <__sseek>:
 800a14e:	b510      	push	{r4, lr}
 800a150:	460c      	mov	r4, r1
 800a152:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a156:	f000 f8bd 	bl	800a2d4 <_lseek_r>
 800a15a:	1c43      	adds	r3, r0, #1
 800a15c:	89a3      	ldrh	r3, [r4, #12]
 800a15e:	bf15      	itete	ne
 800a160:	6560      	strne	r0, [r4, #84]	; 0x54
 800a162:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800a166:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800a16a:	81a3      	strheq	r3, [r4, #12]
 800a16c:	bf18      	it	ne
 800a16e:	81a3      	strhne	r3, [r4, #12]
 800a170:	bd10      	pop	{r4, pc}

0800a172 <__sclose>:
 800a172:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a176:	f000 b89d 	b.w	800a2b4 <_close_r>

0800a17a <__swbuf_r>:
 800a17a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a17c:	460e      	mov	r6, r1
 800a17e:	4614      	mov	r4, r2
 800a180:	4605      	mov	r5, r0
 800a182:	b118      	cbz	r0, 800a18c <__swbuf_r+0x12>
 800a184:	6a03      	ldr	r3, [r0, #32]
 800a186:	b90b      	cbnz	r3, 800a18c <__swbuf_r+0x12>
 800a188:	f7ff ff10 	bl	8009fac <__sinit>
 800a18c:	69a3      	ldr	r3, [r4, #24]
 800a18e:	60a3      	str	r3, [r4, #8]
 800a190:	89a3      	ldrh	r3, [r4, #12]
 800a192:	071a      	lsls	r2, r3, #28
 800a194:	d525      	bpl.n	800a1e2 <__swbuf_r+0x68>
 800a196:	6923      	ldr	r3, [r4, #16]
 800a198:	b31b      	cbz	r3, 800a1e2 <__swbuf_r+0x68>
 800a19a:	6823      	ldr	r3, [r4, #0]
 800a19c:	6922      	ldr	r2, [r4, #16]
 800a19e:	1a98      	subs	r0, r3, r2
 800a1a0:	6963      	ldr	r3, [r4, #20]
 800a1a2:	b2f6      	uxtb	r6, r6
 800a1a4:	4283      	cmp	r3, r0
 800a1a6:	4637      	mov	r7, r6
 800a1a8:	dc04      	bgt.n	800a1b4 <__swbuf_r+0x3a>
 800a1aa:	4621      	mov	r1, r4
 800a1ac:	4628      	mov	r0, r5
 800a1ae:	f000 fd53 	bl	800ac58 <_fflush_r>
 800a1b2:	b9e0      	cbnz	r0, 800a1ee <__swbuf_r+0x74>
 800a1b4:	68a3      	ldr	r3, [r4, #8]
 800a1b6:	3b01      	subs	r3, #1
 800a1b8:	60a3      	str	r3, [r4, #8]
 800a1ba:	6823      	ldr	r3, [r4, #0]
 800a1bc:	1c5a      	adds	r2, r3, #1
 800a1be:	6022      	str	r2, [r4, #0]
 800a1c0:	701e      	strb	r6, [r3, #0]
 800a1c2:	6962      	ldr	r2, [r4, #20]
 800a1c4:	1c43      	adds	r3, r0, #1
 800a1c6:	429a      	cmp	r2, r3
 800a1c8:	d004      	beq.n	800a1d4 <__swbuf_r+0x5a>
 800a1ca:	89a3      	ldrh	r3, [r4, #12]
 800a1cc:	07db      	lsls	r3, r3, #31
 800a1ce:	d506      	bpl.n	800a1de <__swbuf_r+0x64>
 800a1d0:	2e0a      	cmp	r6, #10
 800a1d2:	d104      	bne.n	800a1de <__swbuf_r+0x64>
 800a1d4:	4621      	mov	r1, r4
 800a1d6:	4628      	mov	r0, r5
 800a1d8:	f000 fd3e 	bl	800ac58 <_fflush_r>
 800a1dc:	b938      	cbnz	r0, 800a1ee <__swbuf_r+0x74>
 800a1de:	4638      	mov	r0, r7
 800a1e0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a1e2:	4621      	mov	r1, r4
 800a1e4:	4628      	mov	r0, r5
 800a1e6:	f000 f805 	bl	800a1f4 <__swsetup_r>
 800a1ea:	2800      	cmp	r0, #0
 800a1ec:	d0d5      	beq.n	800a19a <__swbuf_r+0x20>
 800a1ee:	f04f 37ff 	mov.w	r7, #4294967295
 800a1f2:	e7f4      	b.n	800a1de <__swbuf_r+0x64>

0800a1f4 <__swsetup_r>:
 800a1f4:	b538      	push	{r3, r4, r5, lr}
 800a1f6:	4b2a      	ldr	r3, [pc, #168]	; (800a2a0 <__swsetup_r+0xac>)
 800a1f8:	4605      	mov	r5, r0
 800a1fa:	6818      	ldr	r0, [r3, #0]
 800a1fc:	460c      	mov	r4, r1
 800a1fe:	b118      	cbz	r0, 800a208 <__swsetup_r+0x14>
 800a200:	6a03      	ldr	r3, [r0, #32]
 800a202:	b90b      	cbnz	r3, 800a208 <__swsetup_r+0x14>
 800a204:	f7ff fed2 	bl	8009fac <__sinit>
 800a208:	89a3      	ldrh	r3, [r4, #12]
 800a20a:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800a20e:	0718      	lsls	r0, r3, #28
 800a210:	d422      	bmi.n	800a258 <__swsetup_r+0x64>
 800a212:	06d9      	lsls	r1, r3, #27
 800a214:	d407      	bmi.n	800a226 <__swsetup_r+0x32>
 800a216:	2309      	movs	r3, #9
 800a218:	602b      	str	r3, [r5, #0]
 800a21a:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800a21e:	81a3      	strh	r3, [r4, #12]
 800a220:	f04f 30ff 	mov.w	r0, #4294967295
 800a224:	e034      	b.n	800a290 <__swsetup_r+0x9c>
 800a226:	0758      	lsls	r0, r3, #29
 800a228:	d512      	bpl.n	800a250 <__swsetup_r+0x5c>
 800a22a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800a22c:	b141      	cbz	r1, 800a240 <__swsetup_r+0x4c>
 800a22e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800a232:	4299      	cmp	r1, r3
 800a234:	d002      	beq.n	800a23c <__swsetup_r+0x48>
 800a236:	4628      	mov	r0, r5
 800a238:	f000 f8bc 	bl	800a3b4 <_free_r>
 800a23c:	2300      	movs	r3, #0
 800a23e:	6363      	str	r3, [r4, #52]	; 0x34
 800a240:	89a3      	ldrh	r3, [r4, #12]
 800a242:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800a246:	81a3      	strh	r3, [r4, #12]
 800a248:	2300      	movs	r3, #0
 800a24a:	6063      	str	r3, [r4, #4]
 800a24c:	6923      	ldr	r3, [r4, #16]
 800a24e:	6023      	str	r3, [r4, #0]
 800a250:	89a3      	ldrh	r3, [r4, #12]
 800a252:	f043 0308 	orr.w	r3, r3, #8
 800a256:	81a3      	strh	r3, [r4, #12]
 800a258:	6923      	ldr	r3, [r4, #16]
 800a25a:	b94b      	cbnz	r3, 800a270 <__swsetup_r+0x7c>
 800a25c:	89a3      	ldrh	r3, [r4, #12]
 800a25e:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800a262:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a266:	d003      	beq.n	800a270 <__swsetup_r+0x7c>
 800a268:	4621      	mov	r1, r4
 800a26a:	4628      	mov	r0, r5
 800a26c:	f000 fd42 	bl	800acf4 <__smakebuf_r>
 800a270:	89a0      	ldrh	r0, [r4, #12]
 800a272:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800a276:	f010 0301 	ands.w	r3, r0, #1
 800a27a:	d00a      	beq.n	800a292 <__swsetup_r+0x9e>
 800a27c:	2300      	movs	r3, #0
 800a27e:	60a3      	str	r3, [r4, #8]
 800a280:	6963      	ldr	r3, [r4, #20]
 800a282:	425b      	negs	r3, r3
 800a284:	61a3      	str	r3, [r4, #24]
 800a286:	6923      	ldr	r3, [r4, #16]
 800a288:	b943      	cbnz	r3, 800a29c <__swsetup_r+0xa8>
 800a28a:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800a28e:	d1c4      	bne.n	800a21a <__swsetup_r+0x26>
 800a290:	bd38      	pop	{r3, r4, r5, pc}
 800a292:	0781      	lsls	r1, r0, #30
 800a294:	bf58      	it	pl
 800a296:	6963      	ldrpl	r3, [r4, #20]
 800a298:	60a3      	str	r3, [r4, #8]
 800a29a:	e7f4      	b.n	800a286 <__swsetup_r+0x92>
 800a29c:	2000      	movs	r0, #0
 800a29e:	e7f7      	b.n	800a290 <__swsetup_r+0x9c>
 800a2a0:	200000a8 	.word	0x200000a8

0800a2a4 <memset>:
 800a2a4:	4402      	add	r2, r0
 800a2a6:	4603      	mov	r3, r0
 800a2a8:	4293      	cmp	r3, r2
 800a2aa:	d100      	bne.n	800a2ae <memset+0xa>
 800a2ac:	4770      	bx	lr
 800a2ae:	f803 1b01 	strb.w	r1, [r3], #1
 800a2b2:	e7f9      	b.n	800a2a8 <memset+0x4>

0800a2b4 <_close_r>:
 800a2b4:	b538      	push	{r3, r4, r5, lr}
 800a2b6:	4d06      	ldr	r5, [pc, #24]	; (800a2d0 <_close_r+0x1c>)
 800a2b8:	2300      	movs	r3, #0
 800a2ba:	4604      	mov	r4, r0
 800a2bc:	4608      	mov	r0, r1
 800a2be:	602b      	str	r3, [r5, #0]
 800a2c0:	f7f7 facd 	bl	800185e <_close>
 800a2c4:	1c43      	adds	r3, r0, #1
 800a2c6:	d102      	bne.n	800a2ce <_close_r+0x1a>
 800a2c8:	682b      	ldr	r3, [r5, #0]
 800a2ca:	b103      	cbz	r3, 800a2ce <_close_r+0x1a>
 800a2cc:	6023      	str	r3, [r4, #0]
 800a2ce:	bd38      	pop	{r3, r4, r5, pc}
 800a2d0:	20002b58 	.word	0x20002b58

0800a2d4 <_lseek_r>:
 800a2d4:	b538      	push	{r3, r4, r5, lr}
 800a2d6:	4d07      	ldr	r5, [pc, #28]	; (800a2f4 <_lseek_r+0x20>)
 800a2d8:	4604      	mov	r4, r0
 800a2da:	4608      	mov	r0, r1
 800a2dc:	4611      	mov	r1, r2
 800a2de:	2200      	movs	r2, #0
 800a2e0:	602a      	str	r2, [r5, #0]
 800a2e2:	461a      	mov	r2, r3
 800a2e4:	f7f7 fae2 	bl	80018ac <_lseek>
 800a2e8:	1c43      	adds	r3, r0, #1
 800a2ea:	d102      	bne.n	800a2f2 <_lseek_r+0x1e>
 800a2ec:	682b      	ldr	r3, [r5, #0]
 800a2ee:	b103      	cbz	r3, 800a2f2 <_lseek_r+0x1e>
 800a2f0:	6023      	str	r3, [r4, #0]
 800a2f2:	bd38      	pop	{r3, r4, r5, pc}
 800a2f4:	20002b58 	.word	0x20002b58

0800a2f8 <_read_r>:
 800a2f8:	b538      	push	{r3, r4, r5, lr}
 800a2fa:	4d07      	ldr	r5, [pc, #28]	; (800a318 <_read_r+0x20>)
 800a2fc:	4604      	mov	r4, r0
 800a2fe:	4608      	mov	r0, r1
 800a300:	4611      	mov	r1, r2
 800a302:	2200      	movs	r2, #0
 800a304:	602a      	str	r2, [r5, #0]
 800a306:	461a      	mov	r2, r3
 800a308:	f7f7 fa70 	bl	80017ec <_read>
 800a30c:	1c43      	adds	r3, r0, #1
 800a30e:	d102      	bne.n	800a316 <_read_r+0x1e>
 800a310:	682b      	ldr	r3, [r5, #0]
 800a312:	b103      	cbz	r3, 800a316 <_read_r+0x1e>
 800a314:	6023      	str	r3, [r4, #0]
 800a316:	bd38      	pop	{r3, r4, r5, pc}
 800a318:	20002b58 	.word	0x20002b58

0800a31c <_write_r>:
 800a31c:	b538      	push	{r3, r4, r5, lr}
 800a31e:	4d07      	ldr	r5, [pc, #28]	; (800a33c <_write_r+0x20>)
 800a320:	4604      	mov	r4, r0
 800a322:	4608      	mov	r0, r1
 800a324:	4611      	mov	r1, r2
 800a326:	2200      	movs	r2, #0
 800a328:	602a      	str	r2, [r5, #0]
 800a32a:	461a      	mov	r2, r3
 800a32c:	f7f7 fa7b 	bl	8001826 <_write>
 800a330:	1c43      	adds	r3, r0, #1
 800a332:	d102      	bne.n	800a33a <_write_r+0x1e>
 800a334:	682b      	ldr	r3, [r5, #0]
 800a336:	b103      	cbz	r3, 800a33a <_write_r+0x1e>
 800a338:	6023      	str	r3, [r4, #0]
 800a33a:	bd38      	pop	{r3, r4, r5, pc}
 800a33c:	20002b58 	.word	0x20002b58

0800a340 <__errno>:
 800a340:	4b01      	ldr	r3, [pc, #4]	; (800a348 <__errno+0x8>)
 800a342:	6818      	ldr	r0, [r3, #0]
 800a344:	4770      	bx	lr
 800a346:	bf00      	nop
 800a348:	200000a8 	.word	0x200000a8

0800a34c <__libc_init_array>:
 800a34c:	b570      	push	{r4, r5, r6, lr}
 800a34e:	4d0d      	ldr	r5, [pc, #52]	; (800a384 <__libc_init_array+0x38>)
 800a350:	4c0d      	ldr	r4, [pc, #52]	; (800a388 <__libc_init_array+0x3c>)
 800a352:	1b64      	subs	r4, r4, r5
 800a354:	10a4      	asrs	r4, r4, #2
 800a356:	2600      	movs	r6, #0
 800a358:	42a6      	cmp	r6, r4
 800a35a:	d109      	bne.n	800a370 <__libc_init_array+0x24>
 800a35c:	4d0b      	ldr	r5, [pc, #44]	; (800a38c <__libc_init_array+0x40>)
 800a35e:	4c0c      	ldr	r4, [pc, #48]	; (800a390 <__libc_init_array+0x44>)
 800a360:	f000 fd36 	bl	800add0 <_init>
 800a364:	1b64      	subs	r4, r4, r5
 800a366:	10a4      	asrs	r4, r4, #2
 800a368:	2600      	movs	r6, #0
 800a36a:	42a6      	cmp	r6, r4
 800a36c:	d105      	bne.n	800a37a <__libc_init_array+0x2e>
 800a36e:	bd70      	pop	{r4, r5, r6, pc}
 800a370:	f855 3b04 	ldr.w	r3, [r5], #4
 800a374:	4798      	blx	r3
 800a376:	3601      	adds	r6, #1
 800a378:	e7ee      	b.n	800a358 <__libc_init_array+0xc>
 800a37a:	f855 3b04 	ldr.w	r3, [r5], #4
 800a37e:	4798      	blx	r3
 800a380:	3601      	adds	r6, #1
 800a382:	e7f2      	b.n	800a36a <__libc_init_array+0x1e>
 800a384:	08020d7c 	.word	0x08020d7c
 800a388:	08020d7c 	.word	0x08020d7c
 800a38c:	08020d7c 	.word	0x08020d7c
 800a390:	08020d80 	.word	0x08020d80

0800a394 <__retarget_lock_acquire_recursive>:
 800a394:	4770      	bx	lr

0800a396 <__retarget_lock_release_recursive>:
 800a396:	4770      	bx	lr

0800a398 <memcpy>:
 800a398:	440a      	add	r2, r1
 800a39a:	4291      	cmp	r1, r2
 800a39c:	f100 33ff 	add.w	r3, r0, #4294967295
 800a3a0:	d100      	bne.n	800a3a4 <memcpy+0xc>
 800a3a2:	4770      	bx	lr
 800a3a4:	b510      	push	{r4, lr}
 800a3a6:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a3aa:	f803 4f01 	strb.w	r4, [r3, #1]!
 800a3ae:	4291      	cmp	r1, r2
 800a3b0:	d1f9      	bne.n	800a3a6 <memcpy+0xe>
 800a3b2:	bd10      	pop	{r4, pc}

0800a3b4 <_free_r>:
 800a3b4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800a3b6:	2900      	cmp	r1, #0
 800a3b8:	d044      	beq.n	800a444 <_free_r+0x90>
 800a3ba:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a3be:	9001      	str	r0, [sp, #4]
 800a3c0:	2b00      	cmp	r3, #0
 800a3c2:	f1a1 0404 	sub.w	r4, r1, #4
 800a3c6:	bfb8      	it	lt
 800a3c8:	18e4      	addlt	r4, r4, r3
 800a3ca:	f000 f8df 	bl	800a58c <__malloc_lock>
 800a3ce:	4a1e      	ldr	r2, [pc, #120]	; (800a448 <_free_r+0x94>)
 800a3d0:	9801      	ldr	r0, [sp, #4]
 800a3d2:	6813      	ldr	r3, [r2, #0]
 800a3d4:	b933      	cbnz	r3, 800a3e4 <_free_r+0x30>
 800a3d6:	6063      	str	r3, [r4, #4]
 800a3d8:	6014      	str	r4, [r2, #0]
 800a3da:	b003      	add	sp, #12
 800a3dc:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800a3e0:	f000 b8da 	b.w	800a598 <__malloc_unlock>
 800a3e4:	42a3      	cmp	r3, r4
 800a3e6:	d908      	bls.n	800a3fa <_free_r+0x46>
 800a3e8:	6825      	ldr	r5, [r4, #0]
 800a3ea:	1961      	adds	r1, r4, r5
 800a3ec:	428b      	cmp	r3, r1
 800a3ee:	bf01      	itttt	eq
 800a3f0:	6819      	ldreq	r1, [r3, #0]
 800a3f2:	685b      	ldreq	r3, [r3, #4]
 800a3f4:	1949      	addeq	r1, r1, r5
 800a3f6:	6021      	streq	r1, [r4, #0]
 800a3f8:	e7ed      	b.n	800a3d6 <_free_r+0x22>
 800a3fa:	461a      	mov	r2, r3
 800a3fc:	685b      	ldr	r3, [r3, #4]
 800a3fe:	b10b      	cbz	r3, 800a404 <_free_r+0x50>
 800a400:	42a3      	cmp	r3, r4
 800a402:	d9fa      	bls.n	800a3fa <_free_r+0x46>
 800a404:	6811      	ldr	r1, [r2, #0]
 800a406:	1855      	adds	r5, r2, r1
 800a408:	42a5      	cmp	r5, r4
 800a40a:	d10b      	bne.n	800a424 <_free_r+0x70>
 800a40c:	6824      	ldr	r4, [r4, #0]
 800a40e:	4421      	add	r1, r4
 800a410:	1854      	adds	r4, r2, r1
 800a412:	42a3      	cmp	r3, r4
 800a414:	6011      	str	r1, [r2, #0]
 800a416:	d1e0      	bne.n	800a3da <_free_r+0x26>
 800a418:	681c      	ldr	r4, [r3, #0]
 800a41a:	685b      	ldr	r3, [r3, #4]
 800a41c:	6053      	str	r3, [r2, #4]
 800a41e:	440c      	add	r4, r1
 800a420:	6014      	str	r4, [r2, #0]
 800a422:	e7da      	b.n	800a3da <_free_r+0x26>
 800a424:	d902      	bls.n	800a42c <_free_r+0x78>
 800a426:	230c      	movs	r3, #12
 800a428:	6003      	str	r3, [r0, #0]
 800a42a:	e7d6      	b.n	800a3da <_free_r+0x26>
 800a42c:	6825      	ldr	r5, [r4, #0]
 800a42e:	1961      	adds	r1, r4, r5
 800a430:	428b      	cmp	r3, r1
 800a432:	bf04      	itt	eq
 800a434:	6819      	ldreq	r1, [r3, #0]
 800a436:	685b      	ldreq	r3, [r3, #4]
 800a438:	6063      	str	r3, [r4, #4]
 800a43a:	bf04      	itt	eq
 800a43c:	1949      	addeq	r1, r1, r5
 800a43e:	6021      	streq	r1, [r4, #0]
 800a440:	6054      	str	r4, [r2, #4]
 800a442:	e7ca      	b.n	800a3da <_free_r+0x26>
 800a444:	b003      	add	sp, #12
 800a446:	bd30      	pop	{r4, r5, pc}
 800a448:	20002b60 	.word	0x20002b60

0800a44c <sbrk_aligned>:
 800a44c:	b570      	push	{r4, r5, r6, lr}
 800a44e:	4e0e      	ldr	r6, [pc, #56]	; (800a488 <sbrk_aligned+0x3c>)
 800a450:	460c      	mov	r4, r1
 800a452:	6831      	ldr	r1, [r6, #0]
 800a454:	4605      	mov	r5, r0
 800a456:	b911      	cbnz	r1, 800a45e <sbrk_aligned+0x12>
 800a458:	f000 fcaa 	bl	800adb0 <_sbrk_r>
 800a45c:	6030      	str	r0, [r6, #0]
 800a45e:	4621      	mov	r1, r4
 800a460:	4628      	mov	r0, r5
 800a462:	f000 fca5 	bl	800adb0 <_sbrk_r>
 800a466:	1c43      	adds	r3, r0, #1
 800a468:	d00a      	beq.n	800a480 <sbrk_aligned+0x34>
 800a46a:	1cc4      	adds	r4, r0, #3
 800a46c:	f024 0403 	bic.w	r4, r4, #3
 800a470:	42a0      	cmp	r0, r4
 800a472:	d007      	beq.n	800a484 <sbrk_aligned+0x38>
 800a474:	1a21      	subs	r1, r4, r0
 800a476:	4628      	mov	r0, r5
 800a478:	f000 fc9a 	bl	800adb0 <_sbrk_r>
 800a47c:	3001      	adds	r0, #1
 800a47e:	d101      	bne.n	800a484 <sbrk_aligned+0x38>
 800a480:	f04f 34ff 	mov.w	r4, #4294967295
 800a484:	4620      	mov	r0, r4
 800a486:	bd70      	pop	{r4, r5, r6, pc}
 800a488:	20002b64 	.word	0x20002b64

0800a48c <_malloc_r>:
 800a48c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a490:	1ccd      	adds	r5, r1, #3
 800a492:	f025 0503 	bic.w	r5, r5, #3
 800a496:	3508      	adds	r5, #8
 800a498:	2d0c      	cmp	r5, #12
 800a49a:	bf38      	it	cc
 800a49c:	250c      	movcc	r5, #12
 800a49e:	2d00      	cmp	r5, #0
 800a4a0:	4607      	mov	r7, r0
 800a4a2:	db01      	blt.n	800a4a8 <_malloc_r+0x1c>
 800a4a4:	42a9      	cmp	r1, r5
 800a4a6:	d905      	bls.n	800a4b4 <_malloc_r+0x28>
 800a4a8:	230c      	movs	r3, #12
 800a4aa:	603b      	str	r3, [r7, #0]
 800a4ac:	2600      	movs	r6, #0
 800a4ae:	4630      	mov	r0, r6
 800a4b0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a4b4:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 800a588 <_malloc_r+0xfc>
 800a4b8:	f000 f868 	bl	800a58c <__malloc_lock>
 800a4bc:	f8d8 3000 	ldr.w	r3, [r8]
 800a4c0:	461c      	mov	r4, r3
 800a4c2:	bb5c      	cbnz	r4, 800a51c <_malloc_r+0x90>
 800a4c4:	4629      	mov	r1, r5
 800a4c6:	4638      	mov	r0, r7
 800a4c8:	f7ff ffc0 	bl	800a44c <sbrk_aligned>
 800a4cc:	1c43      	adds	r3, r0, #1
 800a4ce:	4604      	mov	r4, r0
 800a4d0:	d155      	bne.n	800a57e <_malloc_r+0xf2>
 800a4d2:	f8d8 4000 	ldr.w	r4, [r8]
 800a4d6:	4626      	mov	r6, r4
 800a4d8:	2e00      	cmp	r6, #0
 800a4da:	d145      	bne.n	800a568 <_malloc_r+0xdc>
 800a4dc:	2c00      	cmp	r4, #0
 800a4de:	d048      	beq.n	800a572 <_malloc_r+0xe6>
 800a4e0:	6823      	ldr	r3, [r4, #0]
 800a4e2:	4631      	mov	r1, r6
 800a4e4:	4638      	mov	r0, r7
 800a4e6:	eb04 0903 	add.w	r9, r4, r3
 800a4ea:	f000 fc61 	bl	800adb0 <_sbrk_r>
 800a4ee:	4581      	cmp	r9, r0
 800a4f0:	d13f      	bne.n	800a572 <_malloc_r+0xe6>
 800a4f2:	6821      	ldr	r1, [r4, #0]
 800a4f4:	1a6d      	subs	r5, r5, r1
 800a4f6:	4629      	mov	r1, r5
 800a4f8:	4638      	mov	r0, r7
 800a4fa:	f7ff ffa7 	bl	800a44c <sbrk_aligned>
 800a4fe:	3001      	adds	r0, #1
 800a500:	d037      	beq.n	800a572 <_malloc_r+0xe6>
 800a502:	6823      	ldr	r3, [r4, #0]
 800a504:	442b      	add	r3, r5
 800a506:	6023      	str	r3, [r4, #0]
 800a508:	f8d8 3000 	ldr.w	r3, [r8]
 800a50c:	2b00      	cmp	r3, #0
 800a50e:	d038      	beq.n	800a582 <_malloc_r+0xf6>
 800a510:	685a      	ldr	r2, [r3, #4]
 800a512:	42a2      	cmp	r2, r4
 800a514:	d12b      	bne.n	800a56e <_malloc_r+0xe2>
 800a516:	2200      	movs	r2, #0
 800a518:	605a      	str	r2, [r3, #4]
 800a51a:	e00f      	b.n	800a53c <_malloc_r+0xb0>
 800a51c:	6822      	ldr	r2, [r4, #0]
 800a51e:	1b52      	subs	r2, r2, r5
 800a520:	d41f      	bmi.n	800a562 <_malloc_r+0xd6>
 800a522:	2a0b      	cmp	r2, #11
 800a524:	d917      	bls.n	800a556 <_malloc_r+0xca>
 800a526:	1961      	adds	r1, r4, r5
 800a528:	42a3      	cmp	r3, r4
 800a52a:	6025      	str	r5, [r4, #0]
 800a52c:	bf18      	it	ne
 800a52e:	6059      	strne	r1, [r3, #4]
 800a530:	6863      	ldr	r3, [r4, #4]
 800a532:	bf08      	it	eq
 800a534:	f8c8 1000 	streq.w	r1, [r8]
 800a538:	5162      	str	r2, [r4, r5]
 800a53a:	604b      	str	r3, [r1, #4]
 800a53c:	4638      	mov	r0, r7
 800a53e:	f104 060b 	add.w	r6, r4, #11
 800a542:	f000 f829 	bl	800a598 <__malloc_unlock>
 800a546:	f026 0607 	bic.w	r6, r6, #7
 800a54a:	1d23      	adds	r3, r4, #4
 800a54c:	1af2      	subs	r2, r6, r3
 800a54e:	d0ae      	beq.n	800a4ae <_malloc_r+0x22>
 800a550:	1b9b      	subs	r3, r3, r6
 800a552:	50a3      	str	r3, [r4, r2]
 800a554:	e7ab      	b.n	800a4ae <_malloc_r+0x22>
 800a556:	42a3      	cmp	r3, r4
 800a558:	6862      	ldr	r2, [r4, #4]
 800a55a:	d1dd      	bne.n	800a518 <_malloc_r+0x8c>
 800a55c:	f8c8 2000 	str.w	r2, [r8]
 800a560:	e7ec      	b.n	800a53c <_malloc_r+0xb0>
 800a562:	4623      	mov	r3, r4
 800a564:	6864      	ldr	r4, [r4, #4]
 800a566:	e7ac      	b.n	800a4c2 <_malloc_r+0x36>
 800a568:	4634      	mov	r4, r6
 800a56a:	6876      	ldr	r6, [r6, #4]
 800a56c:	e7b4      	b.n	800a4d8 <_malloc_r+0x4c>
 800a56e:	4613      	mov	r3, r2
 800a570:	e7cc      	b.n	800a50c <_malloc_r+0x80>
 800a572:	230c      	movs	r3, #12
 800a574:	603b      	str	r3, [r7, #0]
 800a576:	4638      	mov	r0, r7
 800a578:	f000 f80e 	bl	800a598 <__malloc_unlock>
 800a57c:	e797      	b.n	800a4ae <_malloc_r+0x22>
 800a57e:	6025      	str	r5, [r4, #0]
 800a580:	e7dc      	b.n	800a53c <_malloc_r+0xb0>
 800a582:	605b      	str	r3, [r3, #4]
 800a584:	deff      	udf	#255	; 0xff
 800a586:	bf00      	nop
 800a588:	20002b60 	.word	0x20002b60

0800a58c <__malloc_lock>:
 800a58c:	4801      	ldr	r0, [pc, #4]	; (800a594 <__malloc_lock+0x8>)
 800a58e:	f7ff bf01 	b.w	800a394 <__retarget_lock_acquire_recursive>
 800a592:	bf00      	nop
 800a594:	20002b5c 	.word	0x20002b5c

0800a598 <__malloc_unlock>:
 800a598:	4801      	ldr	r0, [pc, #4]	; (800a5a0 <__malloc_unlock+0x8>)
 800a59a:	f7ff befc 	b.w	800a396 <__retarget_lock_release_recursive>
 800a59e:	bf00      	nop
 800a5a0:	20002b5c 	.word	0x20002b5c

0800a5a4 <__sfputc_r>:
 800a5a4:	6893      	ldr	r3, [r2, #8]
 800a5a6:	3b01      	subs	r3, #1
 800a5a8:	2b00      	cmp	r3, #0
 800a5aa:	b410      	push	{r4}
 800a5ac:	6093      	str	r3, [r2, #8]
 800a5ae:	da08      	bge.n	800a5c2 <__sfputc_r+0x1e>
 800a5b0:	6994      	ldr	r4, [r2, #24]
 800a5b2:	42a3      	cmp	r3, r4
 800a5b4:	db01      	blt.n	800a5ba <__sfputc_r+0x16>
 800a5b6:	290a      	cmp	r1, #10
 800a5b8:	d103      	bne.n	800a5c2 <__sfputc_r+0x1e>
 800a5ba:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a5be:	f7ff bddc 	b.w	800a17a <__swbuf_r>
 800a5c2:	6813      	ldr	r3, [r2, #0]
 800a5c4:	1c58      	adds	r0, r3, #1
 800a5c6:	6010      	str	r0, [r2, #0]
 800a5c8:	7019      	strb	r1, [r3, #0]
 800a5ca:	4608      	mov	r0, r1
 800a5cc:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a5d0:	4770      	bx	lr

0800a5d2 <__sfputs_r>:
 800a5d2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a5d4:	4606      	mov	r6, r0
 800a5d6:	460f      	mov	r7, r1
 800a5d8:	4614      	mov	r4, r2
 800a5da:	18d5      	adds	r5, r2, r3
 800a5dc:	42ac      	cmp	r4, r5
 800a5de:	d101      	bne.n	800a5e4 <__sfputs_r+0x12>
 800a5e0:	2000      	movs	r0, #0
 800a5e2:	e007      	b.n	800a5f4 <__sfputs_r+0x22>
 800a5e4:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a5e8:	463a      	mov	r2, r7
 800a5ea:	4630      	mov	r0, r6
 800a5ec:	f7ff ffda 	bl	800a5a4 <__sfputc_r>
 800a5f0:	1c43      	adds	r3, r0, #1
 800a5f2:	d1f3      	bne.n	800a5dc <__sfputs_r+0xa>
 800a5f4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800a5f8 <_vfiprintf_r>:
 800a5f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a5fc:	460d      	mov	r5, r1
 800a5fe:	b09d      	sub	sp, #116	; 0x74
 800a600:	4614      	mov	r4, r2
 800a602:	4698      	mov	r8, r3
 800a604:	4606      	mov	r6, r0
 800a606:	b118      	cbz	r0, 800a610 <_vfiprintf_r+0x18>
 800a608:	6a03      	ldr	r3, [r0, #32]
 800a60a:	b90b      	cbnz	r3, 800a610 <_vfiprintf_r+0x18>
 800a60c:	f7ff fcce 	bl	8009fac <__sinit>
 800a610:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a612:	07d9      	lsls	r1, r3, #31
 800a614:	d405      	bmi.n	800a622 <_vfiprintf_r+0x2a>
 800a616:	89ab      	ldrh	r3, [r5, #12]
 800a618:	059a      	lsls	r2, r3, #22
 800a61a:	d402      	bmi.n	800a622 <_vfiprintf_r+0x2a>
 800a61c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a61e:	f7ff feb9 	bl	800a394 <__retarget_lock_acquire_recursive>
 800a622:	89ab      	ldrh	r3, [r5, #12]
 800a624:	071b      	lsls	r3, r3, #28
 800a626:	d501      	bpl.n	800a62c <_vfiprintf_r+0x34>
 800a628:	692b      	ldr	r3, [r5, #16]
 800a62a:	b99b      	cbnz	r3, 800a654 <_vfiprintf_r+0x5c>
 800a62c:	4629      	mov	r1, r5
 800a62e:	4630      	mov	r0, r6
 800a630:	f7ff fde0 	bl	800a1f4 <__swsetup_r>
 800a634:	b170      	cbz	r0, 800a654 <_vfiprintf_r+0x5c>
 800a636:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a638:	07dc      	lsls	r4, r3, #31
 800a63a:	d504      	bpl.n	800a646 <_vfiprintf_r+0x4e>
 800a63c:	f04f 30ff 	mov.w	r0, #4294967295
 800a640:	b01d      	add	sp, #116	; 0x74
 800a642:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a646:	89ab      	ldrh	r3, [r5, #12]
 800a648:	0598      	lsls	r0, r3, #22
 800a64a:	d4f7      	bmi.n	800a63c <_vfiprintf_r+0x44>
 800a64c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a64e:	f7ff fea2 	bl	800a396 <__retarget_lock_release_recursive>
 800a652:	e7f3      	b.n	800a63c <_vfiprintf_r+0x44>
 800a654:	2300      	movs	r3, #0
 800a656:	9309      	str	r3, [sp, #36]	; 0x24
 800a658:	2320      	movs	r3, #32
 800a65a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800a65e:	f8cd 800c 	str.w	r8, [sp, #12]
 800a662:	2330      	movs	r3, #48	; 0x30
 800a664:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 800a818 <_vfiprintf_r+0x220>
 800a668:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800a66c:	f04f 0901 	mov.w	r9, #1
 800a670:	4623      	mov	r3, r4
 800a672:	469a      	mov	sl, r3
 800a674:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a678:	b10a      	cbz	r2, 800a67e <_vfiprintf_r+0x86>
 800a67a:	2a25      	cmp	r2, #37	; 0x25
 800a67c:	d1f9      	bne.n	800a672 <_vfiprintf_r+0x7a>
 800a67e:	ebba 0b04 	subs.w	fp, sl, r4
 800a682:	d00b      	beq.n	800a69c <_vfiprintf_r+0xa4>
 800a684:	465b      	mov	r3, fp
 800a686:	4622      	mov	r2, r4
 800a688:	4629      	mov	r1, r5
 800a68a:	4630      	mov	r0, r6
 800a68c:	f7ff ffa1 	bl	800a5d2 <__sfputs_r>
 800a690:	3001      	adds	r0, #1
 800a692:	f000 80a9 	beq.w	800a7e8 <_vfiprintf_r+0x1f0>
 800a696:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a698:	445a      	add	r2, fp
 800a69a:	9209      	str	r2, [sp, #36]	; 0x24
 800a69c:	f89a 3000 	ldrb.w	r3, [sl]
 800a6a0:	2b00      	cmp	r3, #0
 800a6a2:	f000 80a1 	beq.w	800a7e8 <_vfiprintf_r+0x1f0>
 800a6a6:	2300      	movs	r3, #0
 800a6a8:	f04f 32ff 	mov.w	r2, #4294967295
 800a6ac:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a6b0:	f10a 0a01 	add.w	sl, sl, #1
 800a6b4:	9304      	str	r3, [sp, #16]
 800a6b6:	9307      	str	r3, [sp, #28]
 800a6b8:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800a6bc:	931a      	str	r3, [sp, #104]	; 0x68
 800a6be:	4654      	mov	r4, sl
 800a6c0:	2205      	movs	r2, #5
 800a6c2:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a6c6:	4854      	ldr	r0, [pc, #336]	; (800a818 <_vfiprintf_r+0x220>)
 800a6c8:	f7f5 fda2 	bl	8000210 <memchr>
 800a6cc:	9a04      	ldr	r2, [sp, #16]
 800a6ce:	b9d8      	cbnz	r0, 800a708 <_vfiprintf_r+0x110>
 800a6d0:	06d1      	lsls	r1, r2, #27
 800a6d2:	bf44      	itt	mi
 800a6d4:	2320      	movmi	r3, #32
 800a6d6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a6da:	0713      	lsls	r3, r2, #28
 800a6dc:	bf44      	itt	mi
 800a6de:	232b      	movmi	r3, #43	; 0x2b
 800a6e0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a6e4:	f89a 3000 	ldrb.w	r3, [sl]
 800a6e8:	2b2a      	cmp	r3, #42	; 0x2a
 800a6ea:	d015      	beq.n	800a718 <_vfiprintf_r+0x120>
 800a6ec:	9a07      	ldr	r2, [sp, #28]
 800a6ee:	4654      	mov	r4, sl
 800a6f0:	2000      	movs	r0, #0
 800a6f2:	f04f 0c0a 	mov.w	ip, #10
 800a6f6:	4621      	mov	r1, r4
 800a6f8:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a6fc:	3b30      	subs	r3, #48	; 0x30
 800a6fe:	2b09      	cmp	r3, #9
 800a700:	d94d      	bls.n	800a79e <_vfiprintf_r+0x1a6>
 800a702:	b1b0      	cbz	r0, 800a732 <_vfiprintf_r+0x13a>
 800a704:	9207      	str	r2, [sp, #28]
 800a706:	e014      	b.n	800a732 <_vfiprintf_r+0x13a>
 800a708:	eba0 0308 	sub.w	r3, r0, r8
 800a70c:	fa09 f303 	lsl.w	r3, r9, r3
 800a710:	4313      	orrs	r3, r2
 800a712:	9304      	str	r3, [sp, #16]
 800a714:	46a2      	mov	sl, r4
 800a716:	e7d2      	b.n	800a6be <_vfiprintf_r+0xc6>
 800a718:	9b03      	ldr	r3, [sp, #12]
 800a71a:	1d19      	adds	r1, r3, #4
 800a71c:	681b      	ldr	r3, [r3, #0]
 800a71e:	9103      	str	r1, [sp, #12]
 800a720:	2b00      	cmp	r3, #0
 800a722:	bfbb      	ittet	lt
 800a724:	425b      	neglt	r3, r3
 800a726:	f042 0202 	orrlt.w	r2, r2, #2
 800a72a:	9307      	strge	r3, [sp, #28]
 800a72c:	9307      	strlt	r3, [sp, #28]
 800a72e:	bfb8      	it	lt
 800a730:	9204      	strlt	r2, [sp, #16]
 800a732:	7823      	ldrb	r3, [r4, #0]
 800a734:	2b2e      	cmp	r3, #46	; 0x2e
 800a736:	d10c      	bne.n	800a752 <_vfiprintf_r+0x15a>
 800a738:	7863      	ldrb	r3, [r4, #1]
 800a73a:	2b2a      	cmp	r3, #42	; 0x2a
 800a73c:	d134      	bne.n	800a7a8 <_vfiprintf_r+0x1b0>
 800a73e:	9b03      	ldr	r3, [sp, #12]
 800a740:	1d1a      	adds	r2, r3, #4
 800a742:	681b      	ldr	r3, [r3, #0]
 800a744:	9203      	str	r2, [sp, #12]
 800a746:	2b00      	cmp	r3, #0
 800a748:	bfb8      	it	lt
 800a74a:	f04f 33ff 	movlt.w	r3, #4294967295
 800a74e:	3402      	adds	r4, #2
 800a750:	9305      	str	r3, [sp, #20]
 800a752:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 800a828 <_vfiprintf_r+0x230>
 800a756:	7821      	ldrb	r1, [r4, #0]
 800a758:	2203      	movs	r2, #3
 800a75a:	4650      	mov	r0, sl
 800a75c:	f7f5 fd58 	bl	8000210 <memchr>
 800a760:	b138      	cbz	r0, 800a772 <_vfiprintf_r+0x17a>
 800a762:	9b04      	ldr	r3, [sp, #16]
 800a764:	eba0 000a 	sub.w	r0, r0, sl
 800a768:	2240      	movs	r2, #64	; 0x40
 800a76a:	4082      	lsls	r2, r0
 800a76c:	4313      	orrs	r3, r2
 800a76e:	3401      	adds	r4, #1
 800a770:	9304      	str	r3, [sp, #16]
 800a772:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a776:	4829      	ldr	r0, [pc, #164]	; (800a81c <_vfiprintf_r+0x224>)
 800a778:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800a77c:	2206      	movs	r2, #6
 800a77e:	f7f5 fd47 	bl	8000210 <memchr>
 800a782:	2800      	cmp	r0, #0
 800a784:	d03f      	beq.n	800a806 <_vfiprintf_r+0x20e>
 800a786:	4b26      	ldr	r3, [pc, #152]	; (800a820 <_vfiprintf_r+0x228>)
 800a788:	bb1b      	cbnz	r3, 800a7d2 <_vfiprintf_r+0x1da>
 800a78a:	9b03      	ldr	r3, [sp, #12]
 800a78c:	3307      	adds	r3, #7
 800a78e:	f023 0307 	bic.w	r3, r3, #7
 800a792:	3308      	adds	r3, #8
 800a794:	9303      	str	r3, [sp, #12]
 800a796:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a798:	443b      	add	r3, r7
 800a79a:	9309      	str	r3, [sp, #36]	; 0x24
 800a79c:	e768      	b.n	800a670 <_vfiprintf_r+0x78>
 800a79e:	fb0c 3202 	mla	r2, ip, r2, r3
 800a7a2:	460c      	mov	r4, r1
 800a7a4:	2001      	movs	r0, #1
 800a7a6:	e7a6      	b.n	800a6f6 <_vfiprintf_r+0xfe>
 800a7a8:	2300      	movs	r3, #0
 800a7aa:	3401      	adds	r4, #1
 800a7ac:	9305      	str	r3, [sp, #20]
 800a7ae:	4619      	mov	r1, r3
 800a7b0:	f04f 0c0a 	mov.w	ip, #10
 800a7b4:	4620      	mov	r0, r4
 800a7b6:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a7ba:	3a30      	subs	r2, #48	; 0x30
 800a7bc:	2a09      	cmp	r2, #9
 800a7be:	d903      	bls.n	800a7c8 <_vfiprintf_r+0x1d0>
 800a7c0:	2b00      	cmp	r3, #0
 800a7c2:	d0c6      	beq.n	800a752 <_vfiprintf_r+0x15a>
 800a7c4:	9105      	str	r1, [sp, #20]
 800a7c6:	e7c4      	b.n	800a752 <_vfiprintf_r+0x15a>
 800a7c8:	fb0c 2101 	mla	r1, ip, r1, r2
 800a7cc:	4604      	mov	r4, r0
 800a7ce:	2301      	movs	r3, #1
 800a7d0:	e7f0      	b.n	800a7b4 <_vfiprintf_r+0x1bc>
 800a7d2:	ab03      	add	r3, sp, #12
 800a7d4:	9300      	str	r3, [sp, #0]
 800a7d6:	462a      	mov	r2, r5
 800a7d8:	4b12      	ldr	r3, [pc, #72]	; (800a824 <_vfiprintf_r+0x22c>)
 800a7da:	a904      	add	r1, sp, #16
 800a7dc:	4630      	mov	r0, r6
 800a7de:	f3af 8000 	nop.w
 800a7e2:	4607      	mov	r7, r0
 800a7e4:	1c78      	adds	r0, r7, #1
 800a7e6:	d1d6      	bne.n	800a796 <_vfiprintf_r+0x19e>
 800a7e8:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a7ea:	07d9      	lsls	r1, r3, #31
 800a7ec:	d405      	bmi.n	800a7fa <_vfiprintf_r+0x202>
 800a7ee:	89ab      	ldrh	r3, [r5, #12]
 800a7f0:	059a      	lsls	r2, r3, #22
 800a7f2:	d402      	bmi.n	800a7fa <_vfiprintf_r+0x202>
 800a7f4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a7f6:	f7ff fdce 	bl	800a396 <__retarget_lock_release_recursive>
 800a7fa:	89ab      	ldrh	r3, [r5, #12]
 800a7fc:	065b      	lsls	r3, r3, #25
 800a7fe:	f53f af1d 	bmi.w	800a63c <_vfiprintf_r+0x44>
 800a802:	9809      	ldr	r0, [sp, #36]	; 0x24
 800a804:	e71c      	b.n	800a640 <_vfiprintf_r+0x48>
 800a806:	ab03      	add	r3, sp, #12
 800a808:	9300      	str	r3, [sp, #0]
 800a80a:	462a      	mov	r2, r5
 800a80c:	4b05      	ldr	r3, [pc, #20]	; (800a824 <_vfiprintf_r+0x22c>)
 800a80e:	a904      	add	r1, sp, #16
 800a810:	4630      	mov	r0, r6
 800a812:	f000 f879 	bl	800a908 <_printf_i>
 800a816:	e7e4      	b.n	800a7e2 <_vfiprintf_r+0x1ea>
 800a818:	08020d40 	.word	0x08020d40
 800a81c:	08020d4a 	.word	0x08020d4a
 800a820:	00000000 	.word	0x00000000
 800a824:	0800a5d3 	.word	0x0800a5d3
 800a828:	08020d46 	.word	0x08020d46

0800a82c <_printf_common>:
 800a82c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a830:	4616      	mov	r6, r2
 800a832:	4699      	mov	r9, r3
 800a834:	688a      	ldr	r2, [r1, #8]
 800a836:	690b      	ldr	r3, [r1, #16]
 800a838:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800a83c:	4293      	cmp	r3, r2
 800a83e:	bfb8      	it	lt
 800a840:	4613      	movlt	r3, r2
 800a842:	6033      	str	r3, [r6, #0]
 800a844:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800a848:	4607      	mov	r7, r0
 800a84a:	460c      	mov	r4, r1
 800a84c:	b10a      	cbz	r2, 800a852 <_printf_common+0x26>
 800a84e:	3301      	adds	r3, #1
 800a850:	6033      	str	r3, [r6, #0]
 800a852:	6823      	ldr	r3, [r4, #0]
 800a854:	0699      	lsls	r1, r3, #26
 800a856:	bf42      	ittt	mi
 800a858:	6833      	ldrmi	r3, [r6, #0]
 800a85a:	3302      	addmi	r3, #2
 800a85c:	6033      	strmi	r3, [r6, #0]
 800a85e:	6825      	ldr	r5, [r4, #0]
 800a860:	f015 0506 	ands.w	r5, r5, #6
 800a864:	d106      	bne.n	800a874 <_printf_common+0x48>
 800a866:	f104 0a19 	add.w	sl, r4, #25
 800a86a:	68e3      	ldr	r3, [r4, #12]
 800a86c:	6832      	ldr	r2, [r6, #0]
 800a86e:	1a9b      	subs	r3, r3, r2
 800a870:	42ab      	cmp	r3, r5
 800a872:	dc26      	bgt.n	800a8c2 <_printf_common+0x96>
 800a874:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800a878:	1e13      	subs	r3, r2, #0
 800a87a:	6822      	ldr	r2, [r4, #0]
 800a87c:	bf18      	it	ne
 800a87e:	2301      	movne	r3, #1
 800a880:	0692      	lsls	r2, r2, #26
 800a882:	d42b      	bmi.n	800a8dc <_printf_common+0xb0>
 800a884:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800a888:	4649      	mov	r1, r9
 800a88a:	4638      	mov	r0, r7
 800a88c:	47c0      	blx	r8
 800a88e:	3001      	adds	r0, #1
 800a890:	d01e      	beq.n	800a8d0 <_printf_common+0xa4>
 800a892:	6823      	ldr	r3, [r4, #0]
 800a894:	6922      	ldr	r2, [r4, #16]
 800a896:	f003 0306 	and.w	r3, r3, #6
 800a89a:	2b04      	cmp	r3, #4
 800a89c:	bf02      	ittt	eq
 800a89e:	68e5      	ldreq	r5, [r4, #12]
 800a8a0:	6833      	ldreq	r3, [r6, #0]
 800a8a2:	1aed      	subeq	r5, r5, r3
 800a8a4:	68a3      	ldr	r3, [r4, #8]
 800a8a6:	bf0c      	ite	eq
 800a8a8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800a8ac:	2500      	movne	r5, #0
 800a8ae:	4293      	cmp	r3, r2
 800a8b0:	bfc4      	itt	gt
 800a8b2:	1a9b      	subgt	r3, r3, r2
 800a8b4:	18ed      	addgt	r5, r5, r3
 800a8b6:	2600      	movs	r6, #0
 800a8b8:	341a      	adds	r4, #26
 800a8ba:	42b5      	cmp	r5, r6
 800a8bc:	d11a      	bne.n	800a8f4 <_printf_common+0xc8>
 800a8be:	2000      	movs	r0, #0
 800a8c0:	e008      	b.n	800a8d4 <_printf_common+0xa8>
 800a8c2:	2301      	movs	r3, #1
 800a8c4:	4652      	mov	r2, sl
 800a8c6:	4649      	mov	r1, r9
 800a8c8:	4638      	mov	r0, r7
 800a8ca:	47c0      	blx	r8
 800a8cc:	3001      	adds	r0, #1
 800a8ce:	d103      	bne.n	800a8d8 <_printf_common+0xac>
 800a8d0:	f04f 30ff 	mov.w	r0, #4294967295
 800a8d4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a8d8:	3501      	adds	r5, #1
 800a8da:	e7c6      	b.n	800a86a <_printf_common+0x3e>
 800a8dc:	18e1      	adds	r1, r4, r3
 800a8de:	1c5a      	adds	r2, r3, #1
 800a8e0:	2030      	movs	r0, #48	; 0x30
 800a8e2:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800a8e6:	4422      	add	r2, r4
 800a8e8:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800a8ec:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800a8f0:	3302      	adds	r3, #2
 800a8f2:	e7c7      	b.n	800a884 <_printf_common+0x58>
 800a8f4:	2301      	movs	r3, #1
 800a8f6:	4622      	mov	r2, r4
 800a8f8:	4649      	mov	r1, r9
 800a8fa:	4638      	mov	r0, r7
 800a8fc:	47c0      	blx	r8
 800a8fe:	3001      	adds	r0, #1
 800a900:	d0e6      	beq.n	800a8d0 <_printf_common+0xa4>
 800a902:	3601      	adds	r6, #1
 800a904:	e7d9      	b.n	800a8ba <_printf_common+0x8e>
	...

0800a908 <_printf_i>:
 800a908:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800a90c:	7e0f      	ldrb	r7, [r1, #24]
 800a90e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800a910:	2f78      	cmp	r7, #120	; 0x78
 800a912:	4691      	mov	r9, r2
 800a914:	4680      	mov	r8, r0
 800a916:	460c      	mov	r4, r1
 800a918:	469a      	mov	sl, r3
 800a91a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800a91e:	d807      	bhi.n	800a930 <_printf_i+0x28>
 800a920:	2f62      	cmp	r7, #98	; 0x62
 800a922:	d80a      	bhi.n	800a93a <_printf_i+0x32>
 800a924:	2f00      	cmp	r7, #0
 800a926:	f000 80d4 	beq.w	800aad2 <_printf_i+0x1ca>
 800a92a:	2f58      	cmp	r7, #88	; 0x58
 800a92c:	f000 80c0 	beq.w	800aab0 <_printf_i+0x1a8>
 800a930:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800a934:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800a938:	e03a      	b.n	800a9b0 <_printf_i+0xa8>
 800a93a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800a93e:	2b15      	cmp	r3, #21
 800a940:	d8f6      	bhi.n	800a930 <_printf_i+0x28>
 800a942:	a101      	add	r1, pc, #4	; (adr r1, 800a948 <_printf_i+0x40>)
 800a944:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800a948:	0800a9a1 	.word	0x0800a9a1
 800a94c:	0800a9b5 	.word	0x0800a9b5
 800a950:	0800a931 	.word	0x0800a931
 800a954:	0800a931 	.word	0x0800a931
 800a958:	0800a931 	.word	0x0800a931
 800a95c:	0800a931 	.word	0x0800a931
 800a960:	0800a9b5 	.word	0x0800a9b5
 800a964:	0800a931 	.word	0x0800a931
 800a968:	0800a931 	.word	0x0800a931
 800a96c:	0800a931 	.word	0x0800a931
 800a970:	0800a931 	.word	0x0800a931
 800a974:	0800aab9 	.word	0x0800aab9
 800a978:	0800a9e1 	.word	0x0800a9e1
 800a97c:	0800aa73 	.word	0x0800aa73
 800a980:	0800a931 	.word	0x0800a931
 800a984:	0800a931 	.word	0x0800a931
 800a988:	0800aadb 	.word	0x0800aadb
 800a98c:	0800a931 	.word	0x0800a931
 800a990:	0800a9e1 	.word	0x0800a9e1
 800a994:	0800a931 	.word	0x0800a931
 800a998:	0800a931 	.word	0x0800a931
 800a99c:	0800aa7b 	.word	0x0800aa7b
 800a9a0:	682b      	ldr	r3, [r5, #0]
 800a9a2:	1d1a      	adds	r2, r3, #4
 800a9a4:	681b      	ldr	r3, [r3, #0]
 800a9a6:	602a      	str	r2, [r5, #0]
 800a9a8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800a9ac:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800a9b0:	2301      	movs	r3, #1
 800a9b2:	e09f      	b.n	800aaf4 <_printf_i+0x1ec>
 800a9b4:	6820      	ldr	r0, [r4, #0]
 800a9b6:	682b      	ldr	r3, [r5, #0]
 800a9b8:	0607      	lsls	r7, r0, #24
 800a9ba:	f103 0104 	add.w	r1, r3, #4
 800a9be:	6029      	str	r1, [r5, #0]
 800a9c0:	d501      	bpl.n	800a9c6 <_printf_i+0xbe>
 800a9c2:	681e      	ldr	r6, [r3, #0]
 800a9c4:	e003      	b.n	800a9ce <_printf_i+0xc6>
 800a9c6:	0646      	lsls	r6, r0, #25
 800a9c8:	d5fb      	bpl.n	800a9c2 <_printf_i+0xba>
 800a9ca:	f9b3 6000 	ldrsh.w	r6, [r3]
 800a9ce:	2e00      	cmp	r6, #0
 800a9d0:	da03      	bge.n	800a9da <_printf_i+0xd2>
 800a9d2:	232d      	movs	r3, #45	; 0x2d
 800a9d4:	4276      	negs	r6, r6
 800a9d6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a9da:	485a      	ldr	r0, [pc, #360]	; (800ab44 <_printf_i+0x23c>)
 800a9dc:	230a      	movs	r3, #10
 800a9de:	e012      	b.n	800aa06 <_printf_i+0xfe>
 800a9e0:	682b      	ldr	r3, [r5, #0]
 800a9e2:	6820      	ldr	r0, [r4, #0]
 800a9e4:	1d19      	adds	r1, r3, #4
 800a9e6:	6029      	str	r1, [r5, #0]
 800a9e8:	0605      	lsls	r5, r0, #24
 800a9ea:	d501      	bpl.n	800a9f0 <_printf_i+0xe8>
 800a9ec:	681e      	ldr	r6, [r3, #0]
 800a9ee:	e002      	b.n	800a9f6 <_printf_i+0xee>
 800a9f0:	0641      	lsls	r1, r0, #25
 800a9f2:	d5fb      	bpl.n	800a9ec <_printf_i+0xe4>
 800a9f4:	881e      	ldrh	r6, [r3, #0]
 800a9f6:	4853      	ldr	r0, [pc, #332]	; (800ab44 <_printf_i+0x23c>)
 800a9f8:	2f6f      	cmp	r7, #111	; 0x6f
 800a9fa:	bf0c      	ite	eq
 800a9fc:	2308      	moveq	r3, #8
 800a9fe:	230a      	movne	r3, #10
 800aa00:	2100      	movs	r1, #0
 800aa02:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800aa06:	6865      	ldr	r5, [r4, #4]
 800aa08:	60a5      	str	r5, [r4, #8]
 800aa0a:	2d00      	cmp	r5, #0
 800aa0c:	bfa2      	ittt	ge
 800aa0e:	6821      	ldrge	r1, [r4, #0]
 800aa10:	f021 0104 	bicge.w	r1, r1, #4
 800aa14:	6021      	strge	r1, [r4, #0]
 800aa16:	b90e      	cbnz	r6, 800aa1c <_printf_i+0x114>
 800aa18:	2d00      	cmp	r5, #0
 800aa1a:	d04b      	beq.n	800aab4 <_printf_i+0x1ac>
 800aa1c:	4615      	mov	r5, r2
 800aa1e:	fbb6 f1f3 	udiv	r1, r6, r3
 800aa22:	fb03 6711 	mls	r7, r3, r1, r6
 800aa26:	5dc7      	ldrb	r7, [r0, r7]
 800aa28:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800aa2c:	4637      	mov	r7, r6
 800aa2e:	42bb      	cmp	r3, r7
 800aa30:	460e      	mov	r6, r1
 800aa32:	d9f4      	bls.n	800aa1e <_printf_i+0x116>
 800aa34:	2b08      	cmp	r3, #8
 800aa36:	d10b      	bne.n	800aa50 <_printf_i+0x148>
 800aa38:	6823      	ldr	r3, [r4, #0]
 800aa3a:	07de      	lsls	r6, r3, #31
 800aa3c:	d508      	bpl.n	800aa50 <_printf_i+0x148>
 800aa3e:	6923      	ldr	r3, [r4, #16]
 800aa40:	6861      	ldr	r1, [r4, #4]
 800aa42:	4299      	cmp	r1, r3
 800aa44:	bfde      	ittt	le
 800aa46:	2330      	movle	r3, #48	; 0x30
 800aa48:	f805 3c01 	strble.w	r3, [r5, #-1]
 800aa4c:	f105 35ff 	addle.w	r5, r5, #4294967295
 800aa50:	1b52      	subs	r2, r2, r5
 800aa52:	6122      	str	r2, [r4, #16]
 800aa54:	f8cd a000 	str.w	sl, [sp]
 800aa58:	464b      	mov	r3, r9
 800aa5a:	aa03      	add	r2, sp, #12
 800aa5c:	4621      	mov	r1, r4
 800aa5e:	4640      	mov	r0, r8
 800aa60:	f7ff fee4 	bl	800a82c <_printf_common>
 800aa64:	3001      	adds	r0, #1
 800aa66:	d14a      	bne.n	800aafe <_printf_i+0x1f6>
 800aa68:	f04f 30ff 	mov.w	r0, #4294967295
 800aa6c:	b004      	add	sp, #16
 800aa6e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800aa72:	6823      	ldr	r3, [r4, #0]
 800aa74:	f043 0320 	orr.w	r3, r3, #32
 800aa78:	6023      	str	r3, [r4, #0]
 800aa7a:	4833      	ldr	r0, [pc, #204]	; (800ab48 <_printf_i+0x240>)
 800aa7c:	2778      	movs	r7, #120	; 0x78
 800aa7e:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800aa82:	6823      	ldr	r3, [r4, #0]
 800aa84:	6829      	ldr	r1, [r5, #0]
 800aa86:	061f      	lsls	r7, r3, #24
 800aa88:	f851 6b04 	ldr.w	r6, [r1], #4
 800aa8c:	d402      	bmi.n	800aa94 <_printf_i+0x18c>
 800aa8e:	065f      	lsls	r7, r3, #25
 800aa90:	bf48      	it	mi
 800aa92:	b2b6      	uxthmi	r6, r6
 800aa94:	07df      	lsls	r7, r3, #31
 800aa96:	bf48      	it	mi
 800aa98:	f043 0320 	orrmi.w	r3, r3, #32
 800aa9c:	6029      	str	r1, [r5, #0]
 800aa9e:	bf48      	it	mi
 800aaa0:	6023      	strmi	r3, [r4, #0]
 800aaa2:	b91e      	cbnz	r6, 800aaac <_printf_i+0x1a4>
 800aaa4:	6823      	ldr	r3, [r4, #0]
 800aaa6:	f023 0320 	bic.w	r3, r3, #32
 800aaaa:	6023      	str	r3, [r4, #0]
 800aaac:	2310      	movs	r3, #16
 800aaae:	e7a7      	b.n	800aa00 <_printf_i+0xf8>
 800aab0:	4824      	ldr	r0, [pc, #144]	; (800ab44 <_printf_i+0x23c>)
 800aab2:	e7e4      	b.n	800aa7e <_printf_i+0x176>
 800aab4:	4615      	mov	r5, r2
 800aab6:	e7bd      	b.n	800aa34 <_printf_i+0x12c>
 800aab8:	682b      	ldr	r3, [r5, #0]
 800aaba:	6826      	ldr	r6, [r4, #0]
 800aabc:	6961      	ldr	r1, [r4, #20]
 800aabe:	1d18      	adds	r0, r3, #4
 800aac0:	6028      	str	r0, [r5, #0]
 800aac2:	0635      	lsls	r5, r6, #24
 800aac4:	681b      	ldr	r3, [r3, #0]
 800aac6:	d501      	bpl.n	800aacc <_printf_i+0x1c4>
 800aac8:	6019      	str	r1, [r3, #0]
 800aaca:	e002      	b.n	800aad2 <_printf_i+0x1ca>
 800aacc:	0670      	lsls	r0, r6, #25
 800aace:	d5fb      	bpl.n	800aac8 <_printf_i+0x1c0>
 800aad0:	8019      	strh	r1, [r3, #0]
 800aad2:	2300      	movs	r3, #0
 800aad4:	6123      	str	r3, [r4, #16]
 800aad6:	4615      	mov	r5, r2
 800aad8:	e7bc      	b.n	800aa54 <_printf_i+0x14c>
 800aada:	682b      	ldr	r3, [r5, #0]
 800aadc:	1d1a      	adds	r2, r3, #4
 800aade:	602a      	str	r2, [r5, #0]
 800aae0:	681d      	ldr	r5, [r3, #0]
 800aae2:	6862      	ldr	r2, [r4, #4]
 800aae4:	2100      	movs	r1, #0
 800aae6:	4628      	mov	r0, r5
 800aae8:	f7f5 fb92 	bl	8000210 <memchr>
 800aaec:	b108      	cbz	r0, 800aaf2 <_printf_i+0x1ea>
 800aaee:	1b40      	subs	r0, r0, r5
 800aaf0:	6060      	str	r0, [r4, #4]
 800aaf2:	6863      	ldr	r3, [r4, #4]
 800aaf4:	6123      	str	r3, [r4, #16]
 800aaf6:	2300      	movs	r3, #0
 800aaf8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800aafc:	e7aa      	b.n	800aa54 <_printf_i+0x14c>
 800aafe:	6923      	ldr	r3, [r4, #16]
 800ab00:	462a      	mov	r2, r5
 800ab02:	4649      	mov	r1, r9
 800ab04:	4640      	mov	r0, r8
 800ab06:	47d0      	blx	sl
 800ab08:	3001      	adds	r0, #1
 800ab0a:	d0ad      	beq.n	800aa68 <_printf_i+0x160>
 800ab0c:	6823      	ldr	r3, [r4, #0]
 800ab0e:	079b      	lsls	r3, r3, #30
 800ab10:	d413      	bmi.n	800ab3a <_printf_i+0x232>
 800ab12:	68e0      	ldr	r0, [r4, #12]
 800ab14:	9b03      	ldr	r3, [sp, #12]
 800ab16:	4298      	cmp	r0, r3
 800ab18:	bfb8      	it	lt
 800ab1a:	4618      	movlt	r0, r3
 800ab1c:	e7a6      	b.n	800aa6c <_printf_i+0x164>
 800ab1e:	2301      	movs	r3, #1
 800ab20:	4632      	mov	r2, r6
 800ab22:	4649      	mov	r1, r9
 800ab24:	4640      	mov	r0, r8
 800ab26:	47d0      	blx	sl
 800ab28:	3001      	adds	r0, #1
 800ab2a:	d09d      	beq.n	800aa68 <_printf_i+0x160>
 800ab2c:	3501      	adds	r5, #1
 800ab2e:	68e3      	ldr	r3, [r4, #12]
 800ab30:	9903      	ldr	r1, [sp, #12]
 800ab32:	1a5b      	subs	r3, r3, r1
 800ab34:	42ab      	cmp	r3, r5
 800ab36:	dcf2      	bgt.n	800ab1e <_printf_i+0x216>
 800ab38:	e7eb      	b.n	800ab12 <_printf_i+0x20a>
 800ab3a:	2500      	movs	r5, #0
 800ab3c:	f104 0619 	add.w	r6, r4, #25
 800ab40:	e7f5      	b.n	800ab2e <_printf_i+0x226>
 800ab42:	bf00      	nop
 800ab44:	08020d51 	.word	0x08020d51
 800ab48:	08020d62 	.word	0x08020d62

0800ab4c <__sflush_r>:
 800ab4c:	898a      	ldrh	r2, [r1, #12]
 800ab4e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ab52:	4605      	mov	r5, r0
 800ab54:	0710      	lsls	r0, r2, #28
 800ab56:	460c      	mov	r4, r1
 800ab58:	d458      	bmi.n	800ac0c <__sflush_r+0xc0>
 800ab5a:	684b      	ldr	r3, [r1, #4]
 800ab5c:	2b00      	cmp	r3, #0
 800ab5e:	dc05      	bgt.n	800ab6c <__sflush_r+0x20>
 800ab60:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800ab62:	2b00      	cmp	r3, #0
 800ab64:	dc02      	bgt.n	800ab6c <__sflush_r+0x20>
 800ab66:	2000      	movs	r0, #0
 800ab68:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ab6c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800ab6e:	2e00      	cmp	r6, #0
 800ab70:	d0f9      	beq.n	800ab66 <__sflush_r+0x1a>
 800ab72:	2300      	movs	r3, #0
 800ab74:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800ab78:	682f      	ldr	r7, [r5, #0]
 800ab7a:	6a21      	ldr	r1, [r4, #32]
 800ab7c:	602b      	str	r3, [r5, #0]
 800ab7e:	d032      	beq.n	800abe6 <__sflush_r+0x9a>
 800ab80:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800ab82:	89a3      	ldrh	r3, [r4, #12]
 800ab84:	075a      	lsls	r2, r3, #29
 800ab86:	d505      	bpl.n	800ab94 <__sflush_r+0x48>
 800ab88:	6863      	ldr	r3, [r4, #4]
 800ab8a:	1ac0      	subs	r0, r0, r3
 800ab8c:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800ab8e:	b10b      	cbz	r3, 800ab94 <__sflush_r+0x48>
 800ab90:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800ab92:	1ac0      	subs	r0, r0, r3
 800ab94:	2300      	movs	r3, #0
 800ab96:	4602      	mov	r2, r0
 800ab98:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800ab9a:	6a21      	ldr	r1, [r4, #32]
 800ab9c:	4628      	mov	r0, r5
 800ab9e:	47b0      	blx	r6
 800aba0:	1c43      	adds	r3, r0, #1
 800aba2:	89a3      	ldrh	r3, [r4, #12]
 800aba4:	d106      	bne.n	800abb4 <__sflush_r+0x68>
 800aba6:	6829      	ldr	r1, [r5, #0]
 800aba8:	291d      	cmp	r1, #29
 800abaa:	d82b      	bhi.n	800ac04 <__sflush_r+0xb8>
 800abac:	4a29      	ldr	r2, [pc, #164]	; (800ac54 <__sflush_r+0x108>)
 800abae:	410a      	asrs	r2, r1
 800abb0:	07d6      	lsls	r6, r2, #31
 800abb2:	d427      	bmi.n	800ac04 <__sflush_r+0xb8>
 800abb4:	2200      	movs	r2, #0
 800abb6:	6062      	str	r2, [r4, #4]
 800abb8:	04d9      	lsls	r1, r3, #19
 800abba:	6922      	ldr	r2, [r4, #16]
 800abbc:	6022      	str	r2, [r4, #0]
 800abbe:	d504      	bpl.n	800abca <__sflush_r+0x7e>
 800abc0:	1c42      	adds	r2, r0, #1
 800abc2:	d101      	bne.n	800abc8 <__sflush_r+0x7c>
 800abc4:	682b      	ldr	r3, [r5, #0]
 800abc6:	b903      	cbnz	r3, 800abca <__sflush_r+0x7e>
 800abc8:	6560      	str	r0, [r4, #84]	; 0x54
 800abca:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800abcc:	602f      	str	r7, [r5, #0]
 800abce:	2900      	cmp	r1, #0
 800abd0:	d0c9      	beq.n	800ab66 <__sflush_r+0x1a>
 800abd2:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800abd6:	4299      	cmp	r1, r3
 800abd8:	d002      	beq.n	800abe0 <__sflush_r+0x94>
 800abda:	4628      	mov	r0, r5
 800abdc:	f7ff fbea 	bl	800a3b4 <_free_r>
 800abe0:	2000      	movs	r0, #0
 800abe2:	6360      	str	r0, [r4, #52]	; 0x34
 800abe4:	e7c0      	b.n	800ab68 <__sflush_r+0x1c>
 800abe6:	2301      	movs	r3, #1
 800abe8:	4628      	mov	r0, r5
 800abea:	47b0      	blx	r6
 800abec:	1c41      	adds	r1, r0, #1
 800abee:	d1c8      	bne.n	800ab82 <__sflush_r+0x36>
 800abf0:	682b      	ldr	r3, [r5, #0]
 800abf2:	2b00      	cmp	r3, #0
 800abf4:	d0c5      	beq.n	800ab82 <__sflush_r+0x36>
 800abf6:	2b1d      	cmp	r3, #29
 800abf8:	d001      	beq.n	800abfe <__sflush_r+0xb2>
 800abfa:	2b16      	cmp	r3, #22
 800abfc:	d101      	bne.n	800ac02 <__sflush_r+0xb6>
 800abfe:	602f      	str	r7, [r5, #0]
 800ac00:	e7b1      	b.n	800ab66 <__sflush_r+0x1a>
 800ac02:	89a3      	ldrh	r3, [r4, #12]
 800ac04:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ac08:	81a3      	strh	r3, [r4, #12]
 800ac0a:	e7ad      	b.n	800ab68 <__sflush_r+0x1c>
 800ac0c:	690f      	ldr	r7, [r1, #16]
 800ac0e:	2f00      	cmp	r7, #0
 800ac10:	d0a9      	beq.n	800ab66 <__sflush_r+0x1a>
 800ac12:	0793      	lsls	r3, r2, #30
 800ac14:	680e      	ldr	r6, [r1, #0]
 800ac16:	bf08      	it	eq
 800ac18:	694b      	ldreq	r3, [r1, #20]
 800ac1a:	600f      	str	r7, [r1, #0]
 800ac1c:	bf18      	it	ne
 800ac1e:	2300      	movne	r3, #0
 800ac20:	eba6 0807 	sub.w	r8, r6, r7
 800ac24:	608b      	str	r3, [r1, #8]
 800ac26:	f1b8 0f00 	cmp.w	r8, #0
 800ac2a:	dd9c      	ble.n	800ab66 <__sflush_r+0x1a>
 800ac2c:	6a21      	ldr	r1, [r4, #32]
 800ac2e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800ac30:	4643      	mov	r3, r8
 800ac32:	463a      	mov	r2, r7
 800ac34:	4628      	mov	r0, r5
 800ac36:	47b0      	blx	r6
 800ac38:	2800      	cmp	r0, #0
 800ac3a:	dc06      	bgt.n	800ac4a <__sflush_r+0xfe>
 800ac3c:	89a3      	ldrh	r3, [r4, #12]
 800ac3e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ac42:	81a3      	strh	r3, [r4, #12]
 800ac44:	f04f 30ff 	mov.w	r0, #4294967295
 800ac48:	e78e      	b.n	800ab68 <__sflush_r+0x1c>
 800ac4a:	4407      	add	r7, r0
 800ac4c:	eba8 0800 	sub.w	r8, r8, r0
 800ac50:	e7e9      	b.n	800ac26 <__sflush_r+0xda>
 800ac52:	bf00      	nop
 800ac54:	dfbffffe 	.word	0xdfbffffe

0800ac58 <_fflush_r>:
 800ac58:	b538      	push	{r3, r4, r5, lr}
 800ac5a:	690b      	ldr	r3, [r1, #16]
 800ac5c:	4605      	mov	r5, r0
 800ac5e:	460c      	mov	r4, r1
 800ac60:	b913      	cbnz	r3, 800ac68 <_fflush_r+0x10>
 800ac62:	2500      	movs	r5, #0
 800ac64:	4628      	mov	r0, r5
 800ac66:	bd38      	pop	{r3, r4, r5, pc}
 800ac68:	b118      	cbz	r0, 800ac72 <_fflush_r+0x1a>
 800ac6a:	6a03      	ldr	r3, [r0, #32]
 800ac6c:	b90b      	cbnz	r3, 800ac72 <_fflush_r+0x1a>
 800ac6e:	f7ff f99d 	bl	8009fac <__sinit>
 800ac72:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ac76:	2b00      	cmp	r3, #0
 800ac78:	d0f3      	beq.n	800ac62 <_fflush_r+0xa>
 800ac7a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800ac7c:	07d0      	lsls	r0, r2, #31
 800ac7e:	d404      	bmi.n	800ac8a <_fflush_r+0x32>
 800ac80:	0599      	lsls	r1, r3, #22
 800ac82:	d402      	bmi.n	800ac8a <_fflush_r+0x32>
 800ac84:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800ac86:	f7ff fb85 	bl	800a394 <__retarget_lock_acquire_recursive>
 800ac8a:	4628      	mov	r0, r5
 800ac8c:	4621      	mov	r1, r4
 800ac8e:	f7ff ff5d 	bl	800ab4c <__sflush_r>
 800ac92:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800ac94:	07da      	lsls	r2, r3, #31
 800ac96:	4605      	mov	r5, r0
 800ac98:	d4e4      	bmi.n	800ac64 <_fflush_r+0xc>
 800ac9a:	89a3      	ldrh	r3, [r4, #12]
 800ac9c:	059b      	lsls	r3, r3, #22
 800ac9e:	d4e1      	bmi.n	800ac64 <_fflush_r+0xc>
 800aca0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800aca2:	f7ff fb78 	bl	800a396 <__retarget_lock_release_recursive>
 800aca6:	e7dd      	b.n	800ac64 <_fflush_r+0xc>

0800aca8 <__swhatbuf_r>:
 800aca8:	b570      	push	{r4, r5, r6, lr}
 800acaa:	460c      	mov	r4, r1
 800acac:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800acb0:	2900      	cmp	r1, #0
 800acb2:	b096      	sub	sp, #88	; 0x58
 800acb4:	4615      	mov	r5, r2
 800acb6:	461e      	mov	r6, r3
 800acb8:	da0d      	bge.n	800acd6 <__swhatbuf_r+0x2e>
 800acba:	89a3      	ldrh	r3, [r4, #12]
 800acbc:	f013 0f80 	tst.w	r3, #128	; 0x80
 800acc0:	f04f 0100 	mov.w	r1, #0
 800acc4:	bf0c      	ite	eq
 800acc6:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 800acca:	2340      	movne	r3, #64	; 0x40
 800accc:	2000      	movs	r0, #0
 800acce:	6031      	str	r1, [r6, #0]
 800acd0:	602b      	str	r3, [r5, #0]
 800acd2:	b016      	add	sp, #88	; 0x58
 800acd4:	bd70      	pop	{r4, r5, r6, pc}
 800acd6:	466a      	mov	r2, sp
 800acd8:	f000 f848 	bl	800ad6c <_fstat_r>
 800acdc:	2800      	cmp	r0, #0
 800acde:	dbec      	blt.n	800acba <__swhatbuf_r+0x12>
 800ace0:	9901      	ldr	r1, [sp, #4]
 800ace2:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 800ace6:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 800acea:	4259      	negs	r1, r3
 800acec:	4159      	adcs	r1, r3
 800acee:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800acf2:	e7eb      	b.n	800accc <__swhatbuf_r+0x24>

0800acf4 <__smakebuf_r>:
 800acf4:	898b      	ldrh	r3, [r1, #12]
 800acf6:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800acf8:	079d      	lsls	r5, r3, #30
 800acfa:	4606      	mov	r6, r0
 800acfc:	460c      	mov	r4, r1
 800acfe:	d507      	bpl.n	800ad10 <__smakebuf_r+0x1c>
 800ad00:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800ad04:	6023      	str	r3, [r4, #0]
 800ad06:	6123      	str	r3, [r4, #16]
 800ad08:	2301      	movs	r3, #1
 800ad0a:	6163      	str	r3, [r4, #20]
 800ad0c:	b002      	add	sp, #8
 800ad0e:	bd70      	pop	{r4, r5, r6, pc}
 800ad10:	ab01      	add	r3, sp, #4
 800ad12:	466a      	mov	r2, sp
 800ad14:	f7ff ffc8 	bl	800aca8 <__swhatbuf_r>
 800ad18:	9900      	ldr	r1, [sp, #0]
 800ad1a:	4605      	mov	r5, r0
 800ad1c:	4630      	mov	r0, r6
 800ad1e:	f7ff fbb5 	bl	800a48c <_malloc_r>
 800ad22:	b948      	cbnz	r0, 800ad38 <__smakebuf_r+0x44>
 800ad24:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ad28:	059a      	lsls	r2, r3, #22
 800ad2a:	d4ef      	bmi.n	800ad0c <__smakebuf_r+0x18>
 800ad2c:	f023 0303 	bic.w	r3, r3, #3
 800ad30:	f043 0302 	orr.w	r3, r3, #2
 800ad34:	81a3      	strh	r3, [r4, #12]
 800ad36:	e7e3      	b.n	800ad00 <__smakebuf_r+0xc>
 800ad38:	89a3      	ldrh	r3, [r4, #12]
 800ad3a:	6020      	str	r0, [r4, #0]
 800ad3c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ad40:	81a3      	strh	r3, [r4, #12]
 800ad42:	9b00      	ldr	r3, [sp, #0]
 800ad44:	6163      	str	r3, [r4, #20]
 800ad46:	9b01      	ldr	r3, [sp, #4]
 800ad48:	6120      	str	r0, [r4, #16]
 800ad4a:	b15b      	cbz	r3, 800ad64 <__smakebuf_r+0x70>
 800ad4c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800ad50:	4630      	mov	r0, r6
 800ad52:	f000 f81d 	bl	800ad90 <_isatty_r>
 800ad56:	b128      	cbz	r0, 800ad64 <__smakebuf_r+0x70>
 800ad58:	89a3      	ldrh	r3, [r4, #12]
 800ad5a:	f023 0303 	bic.w	r3, r3, #3
 800ad5e:	f043 0301 	orr.w	r3, r3, #1
 800ad62:	81a3      	strh	r3, [r4, #12]
 800ad64:	89a3      	ldrh	r3, [r4, #12]
 800ad66:	431d      	orrs	r5, r3
 800ad68:	81a5      	strh	r5, [r4, #12]
 800ad6a:	e7cf      	b.n	800ad0c <__smakebuf_r+0x18>

0800ad6c <_fstat_r>:
 800ad6c:	b538      	push	{r3, r4, r5, lr}
 800ad6e:	4d07      	ldr	r5, [pc, #28]	; (800ad8c <_fstat_r+0x20>)
 800ad70:	2300      	movs	r3, #0
 800ad72:	4604      	mov	r4, r0
 800ad74:	4608      	mov	r0, r1
 800ad76:	4611      	mov	r1, r2
 800ad78:	602b      	str	r3, [r5, #0]
 800ad7a:	f7f6 fd7c 	bl	8001876 <_fstat>
 800ad7e:	1c43      	adds	r3, r0, #1
 800ad80:	d102      	bne.n	800ad88 <_fstat_r+0x1c>
 800ad82:	682b      	ldr	r3, [r5, #0]
 800ad84:	b103      	cbz	r3, 800ad88 <_fstat_r+0x1c>
 800ad86:	6023      	str	r3, [r4, #0]
 800ad88:	bd38      	pop	{r3, r4, r5, pc}
 800ad8a:	bf00      	nop
 800ad8c:	20002b58 	.word	0x20002b58

0800ad90 <_isatty_r>:
 800ad90:	b538      	push	{r3, r4, r5, lr}
 800ad92:	4d06      	ldr	r5, [pc, #24]	; (800adac <_isatty_r+0x1c>)
 800ad94:	2300      	movs	r3, #0
 800ad96:	4604      	mov	r4, r0
 800ad98:	4608      	mov	r0, r1
 800ad9a:	602b      	str	r3, [r5, #0]
 800ad9c:	f7f6 fd7b 	bl	8001896 <_isatty>
 800ada0:	1c43      	adds	r3, r0, #1
 800ada2:	d102      	bne.n	800adaa <_isatty_r+0x1a>
 800ada4:	682b      	ldr	r3, [r5, #0]
 800ada6:	b103      	cbz	r3, 800adaa <_isatty_r+0x1a>
 800ada8:	6023      	str	r3, [r4, #0]
 800adaa:	bd38      	pop	{r3, r4, r5, pc}
 800adac:	20002b58 	.word	0x20002b58

0800adb0 <_sbrk_r>:
 800adb0:	b538      	push	{r3, r4, r5, lr}
 800adb2:	4d06      	ldr	r5, [pc, #24]	; (800adcc <_sbrk_r+0x1c>)
 800adb4:	2300      	movs	r3, #0
 800adb6:	4604      	mov	r4, r0
 800adb8:	4608      	mov	r0, r1
 800adba:	602b      	str	r3, [r5, #0]
 800adbc:	f7f6 fd84 	bl	80018c8 <_sbrk>
 800adc0:	1c43      	adds	r3, r0, #1
 800adc2:	d102      	bne.n	800adca <_sbrk_r+0x1a>
 800adc4:	682b      	ldr	r3, [r5, #0]
 800adc6:	b103      	cbz	r3, 800adca <_sbrk_r+0x1a>
 800adc8:	6023      	str	r3, [r4, #0]
 800adca:	bd38      	pop	{r3, r4, r5, pc}
 800adcc:	20002b58 	.word	0x20002b58

0800add0 <_init>:
 800add0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800add2:	bf00      	nop
 800add4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800add6:	bc08      	pop	{r3}
 800add8:	469e      	mov	lr, r3
 800adda:	4770      	bx	lr

0800addc <_fini>:
 800addc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800adde:	bf00      	nop
 800ade0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ade2:	bc08      	pop	{r3}
 800ade4:	469e      	mov	lr, r3
 800ade6:	4770      	bx	lr
